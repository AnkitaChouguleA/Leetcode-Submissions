2025-07-18 12:31:37,867 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-07-18 12:31:37,867 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-18 12:32:22,281 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-07-18 12:32:23,186 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-07-18 12:32:23,187 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"25Â minutes","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\nreturns int \nas\nBEGIN \n    Return ( \n        Select top(1) Salary \n    from (\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \n        from Employee \n    ) e\n    where D_Rank = @n\n    )\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106}],"has_next":true,"last_key":""}
2025-07-18 12:32:24,199 [DEBUG] leetcode.py:112 - User is logged in
2025-07-18 12:32:24,199 [INFO] leetcode.py:95 - Cookie set successful
2025-07-18 12:32:24,201 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-07-18 12:32:24,734 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-07-18 12:32:24,735 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"25\xc2\xa0minutes","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"26\xc2\xa0minutes","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"27\xc2\xa0minutes","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"28\xc2\xa0minutes","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 3\xc2\xa0minutes","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 4\xc2\xa0minutes","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 5\xc2\xa0minutes","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 6\xc2\xa0minutes","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 8\xc2\xa0minutes","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 15\xc2\xa0minutes","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 16\xc2\xa0minutes","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 19\xc2\xa0minutes","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"23\xc2\xa0hours, 26\xc2\xa0minutes","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"23\xc2\xa0hours, 28\xc2\xa0minutes","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"23\xc2\xa0hours, 40\xc2\xa0minutes","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"23\xc2\xa0hours, 46\xc2\xa0minutes","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"23\xc2\xa0hours, 59\xc2\xa0minutes","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87}],"has_next":true,"last_key":""}'
2025-07-18 12:32:25,065 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:25,069 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql
2025-07-18 12:32:25,071 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql
2025-07-18 12:32:25,073 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql
2025-07-18 12:32:25,075 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql
2025-07-18 12:32:25,456 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:25,457 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:25,458 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,458 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,459 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,461 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,461 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,462 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,462 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,463 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,463 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,855 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:25,858 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:26,192 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:26,195 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:26,559 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:26,562 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:26,994 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:26,996 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:27,413 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:27,415 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:27,416 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:32,423 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-07-18 12:32:32,836 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-07-18 12:32:32,839 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 1\xc2\xa0hour","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 1\xc2\xa0hour","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 2\xc2\xa0hours","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 2\xc2\xa0hours","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 2\xc2\xa0hours","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 20\xc2\xa0hours","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 20\xc2\xa0hours","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 20\xc2\xa0hours","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 20\xc2\xa0hours","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 21\xc2\xa0hours","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 21\xc2\xa0hours","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 18\xc2\xa0hours","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67}],"has_next":true,"last_key":""}'
2025-07-18 12:32:32,840 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:32,840 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:33,186 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:33,190 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:33,190 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:33,539 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:33,542 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:33,896 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:33,899 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:33,901 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:34,281 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:34,289 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:34,624 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:34,627 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:35,469 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:35,471 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:35,472 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:35,472 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:35,893 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:35,901 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:35,902 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:36,243 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:36,245 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:36,246 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:36,608 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:36,616 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:36,940 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:36,948 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:37,277 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:37,286 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:37,287 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:42,300 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-07-18 12:32:42,732 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-07-18 12:32:42,743 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47}],"has_next":true,"last_key":""}'
2025-07-18 12:32:43,074 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:43,076 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:43,077 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:43,693 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:43,695 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:44,030 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:44,039 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:44,369 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:44,372 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:44,373 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:44,373 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:44,374 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:44,707 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:44,710 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:44,710 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:44,711 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:45,081 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:45,083 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:45,483 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:45,485 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:45,803 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:45,815 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:46,158 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:46,161 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:46,161 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:46,492 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:46,496 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:46,496 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:46,888 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:46,892 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:47,236 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:47,238 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:52,239 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-07-18 12:32:52,626 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-07-18 12:32:52,639 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27}],"has_next":true,"last_key":""}'
2025-07-18 12:32:53,289 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:53,295 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:53,619 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:53,621 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:53,998 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:54,002 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:54,355 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:54,360 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:54,685 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:54,702 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:55,054 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:55,060 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:55,401 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:55,401 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:55,401 [INFO] __main__.py:251 - average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:55,741 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:55,744 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:55,751 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:56,071 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:56,080 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:56,452 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:56,452 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:57,069 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:57,076 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:57,403 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:57,407 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:57,407 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:58,406 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:58,410 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:58,855 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:58,866 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:59,209 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:59,211 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:59,569 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:59,569 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:59,921 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:59,936 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:04,947 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-07-18 12:33:05,356 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-07-18 12:33:05,363 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 1\xc2\xa0week","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 1\xc2\xa0week","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1029511014,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1692792516,"status":10,"status_display":"Accepted","runtime":"1642 ms","url":"/submissions/detail/1029511014/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1029510363,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1692792466,"status":10,"status_display":"Accepted","runtime":"1053 ms","url":"/submissions/detail/1029510363/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1016455334,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573885,"status":10,"status_display":"Accepted","runtime":"1095 ms","url":"/submissions/detail/1016455334/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1016455058,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573858,"status":10,"status_display":"Accepted","runtime":"2190 ms","url":"/submissions/detail/1016455058/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1009234981,"question_id":183,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690881420,"status":10,"status_display":"Accepted","runtime":"724 ms","url":"/submissions/detail/1009234981/","is_pending":"Not Pending","title":"Customers Who Never Order","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as customers from Customers where id not in(select customerid from orders)","compare_result":"111111111111","title_slug":"customers-who-never-order","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1009161386,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874221,"status":10,"status_display":"Accepted","runtime":"875 ms","url":"/submissions/detail/1009161386/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1009161138,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874197,"status":10,"status_display":"Accepted","runtime":"1543 ms","url":"/submissions/detail/1009161138/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1004211677,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690353557,"status":10,"status_display":"Accepted","runtime":"981 ms","url":"/submissions/detail/1004211677/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as Employee from Employee e1 where salary > (select salary from Employee where id = e1.managerId)","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1004210595,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690353467,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1004210595/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\nselect * from Employee e1 where salary > (select salary from Emplpoyee where id = e1.managerId)","compare_result":"00000000000000","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1003745627,"question_id":175,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690304358,"status":10,"status_display":"Accepted","runtime":"1086 ms","url":"/submissions/detail/1003745627/","is_pending":"Not Pending","title":"Combine Two Tables","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect FirstName, LastName, city, state from person left join address \\r\\non person.personId = address.personId ","compare_result":"11111111","title_slug":"combine-two-tables","has_notes":false,"flag_type":1,"frontend_id":7}],"has_next":true,"last_key":""}'
2025-07-18 12:33:05,693 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:05,702 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:06,054 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:06,054 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:06,398 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:06,402 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:07,823 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:07,832 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,188 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:08,198 [INFO] __main__.py:251 - customer-placing-the-largest-number-of-orders/2024-08-11 22.33.14 - Accepted - runtime 444ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,588 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:08,588 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2024-08-08 15.31.19 - Accepted - runtime 1265ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,971 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:08,971 [INFO] __main__.py:251 - top-travellers/2024-08-02 22.39.39 - Accepted - runtime 843ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,971 [INFO] __main__.py:251 - rising-temperature/2023-09-07 17.53.10 - Accepted - runtime 1344ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,971 [INFO] __main__.py:251 - rising-temperature/2023-09-07 17.48.36 - Runtime Error - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:33:08,978 [INFO] __main__.py:251 - second-highest-salary/2023-08-25 10.40.12 - Accepted - runtime 1338ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,978 [INFO] __main__.py:251 - second-highest-salary/2023-08-23 17.38.36 - Accepted - runtime 1642ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,979 [INFO] __main__.py:251 - second-highest-salary/2023-08-23 17.37.46 - Accepted - runtime 1053ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,979 [INFO] __main__.py:251 - delete-duplicate-emails/2023-08-09 15.08.05 - Accepted - runtime 1095ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,979 [INFO] __main__.py:251 - delete-duplicate-emails/2023-08-09 15.07.38 - Accepted - runtime 2190ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:09,306 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:09,324 [INFO] __main__.py:251 - customers-who-never-order/2023-08-01 14.47.00 - Accepted - runtime 724ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:09,652 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:09,655 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.47.01 - Accepted - runtime 875ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:09,656 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.46.37 - Accepted - runtime 1543ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:09,657 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2023-07-26 12.09.17 - Accepted - runtime 981ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:09,657 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2023-07-26 12.07.47 - Runtime Error - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:33:09,991 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:09,999 [INFO] __main__.py:251 - combine-two-tables/2023-07-25 22.29.18 - Accepted - runtime 1086ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:15,011 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-07-18 12:33:15,366 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-07-18 12:33:15,366 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":842546003,"question_id":327,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668329684,"status":10,"status_display":"Accepted","runtime":"2624 ms","url":"/submissions/detail/842546003/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"100.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} lower\\n * @param {number} upper\\n * @return {number}\\n */\\nvar countRangeSum = function(nums, lower, upper) {\\n    let preSum = Array(nums.length + 1).fill(0);\\n  let count = 0;\\n\\n  // create preSum array, use preSum to check the sum range\\n  for (let i = 0; i < nums.length; i++) {\\n      preSum[i + 1] = preSum[i] + nums[i];\\n  }\\n\\n  const sort = function(preSum) {\\n      if (preSum.length === 1) return preSum;\\n\\n      let mid = Math.floor(preSum.length / 2);\\n      let left = sort(preSum.slice(0, mid));\\n      let right = sort(preSum.slice(mid))\\n\\n      return merge(left, right);\\n  }\\n\\n  const merge = function(left, right) {\\n      let start = 0;\\n      let end = 0;\\n\\n      for (let i = 0; i < left.length; i++) {\\n          // all elements before start index, after subtracting left[i] are less than lower, which means all elements after start index are bigger or equal than lower\\n          while (start < right.length && right[start] - left[i] < lower) {\\n              start++;\\n          }\\n          // similarly, all elements before end index are less or euqal then upper\\n          while (end < right.length && right[end] - left[i] <= upper) {\\n              end++;\\n          }\\n\\n          // since the initial values of start and end are the same, and upper >= lower, so end will >= start too, which means the rest of the end minus start element difference will fall between [lower, upper].\\n          count += end - start;\\n      }\\n\\n      let sort = [];\\n      while (left.length && right.length) {\\n          if (left[0] <= right[0]) {\\n              sort.push(left.shift());\\n          } else {\\n              sort.push(right.shift());\\n          }\\n      }\\n\\n      return [...sort, ...left, ...right];\\n  }\\n\\n  sort(preSum);\\n  return count;\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1,"frontend_id":6},{"id":842024680,"question_id":2561,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668266557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/842024680/","is_pending":"Not Pending","title":"Number of Distinct Averages","memory":"N/A","code":"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    for(let i = 0; i < nums.length;i++)\\n    {\\n        let newnums = nums;\\n        let  res = [],max = Math.max(...nums), min = Math.min(...nums);   \\n        res[0] = min, res[1] = max\\n        let avg = (max+min)/2\\n    }\\n    \\n    \\n};","compare_result":"000000000000000000000000000000000000","title_slug":"number-of-distinct-averages","has_notes":false,"flag_type":1,"frontend_id":5},{"id":836960924,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591646,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/836960924/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"42.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":4},{"id":836960390,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591580,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/836960390/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"43 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":3},{"id":831406918,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666877523,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/831406918/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":2},{"id":831395512,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666876149,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/831395512/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-07-18 12:33:15,721 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:15,721 [INFO] __main__.py:251 - count-of-range-sum/2022-11-13 14.24.44 - Accepted - runtime 2624ms - memory 100.9MB.js already exists, skipping it
2025-07-18 12:33:16,101 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:16,104 [INFO] __main__.py:251 - number-of-distinct-averages/2022-11-12 20.52.37 - Wrong Answer - runtime NA - memory NA.js already exists, skipping it
2025-07-18 12:33:16,438 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:16,440 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.24.06 - Accepted - runtime 91ms - memory 42.9MB.js already exists, skipping it
2025-07-18 12:33:16,441 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.23.00 - Accepted - runtime 96ms - memory 43MB.js already exists, skipping it
2025-07-18 12:33:16,788 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:16,797 [INFO] __main__.py:251 - valid-anagram/2022-10-27 19.02.03 - Accepted - runtime 171ms - memory 49.4MB.js already exists, skipping it
2025-07-18 12:33:16,798 [INFO] __main__.py:251 - valid-anagram/2022-10-27 18.39.09 - Accepted - runtime 122ms - memory 49.4MB.js already exists, skipping it
2025-07-21 09:53:51,836 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-07-21 09:53:51,836 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-21 09:56:01,048 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-07-21 09:56:03,196 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-07-21 09:56:03,202 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"7Â minutes","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\nwith cte_highest_salary_rank\nas (\nselect d.name as Department , e.name Employee , e.Salary ,\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\nfrom Employee e join Department d on e.departmentId = d.id\n)\nselect Department, Employee, salary\nfrom cte_highest_salary_rank\nwhere rn=1\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108}],"has_next":true,"last_key":""}
2025-07-21 09:56:04,216 [DEBUG] leetcode.py:112 - User is logged in
2025-07-21 09:56:04,216 [INFO] leetcode.py:95 - Cookie set successful
2025-07-21 09:56:04,220 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-07-21 09:56:04,679 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-07-21 09:56:04,692 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"7\xc2\xa0minutes","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1703090868,"question_id":178,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 22\xc2\xa0hours","timestamp":1752902814,"status":10,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/1703090868/","is_pending":"Not Pending","title":"Rank Scores","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT SCORE, DENSE_RANK() OVER(ORDER BY SCORE DESC) AS RANK\\nFROM SCORES\\n","compare_result":"11111111111","title_slug":"rank-scores","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89}],"has_next":true,"last_key":""}'
2025-07-21 09:56:05,102 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:05,120 [INFO] __main__.py:245 - Writing department-highest-salary/2025-07-21 09.48.07 - Accepted - runtime 420ms - memory 0.0B.sql
2025-07-21 09:56:05,437 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:05,442 [INFO] __main__.py:245 - Writing rank-scores/2025-07-19 10.56.54 - Accepted - runtime 362ms - memory 0.0B.sql
2025-07-21 09:56:05,747 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:05,757 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:05,758 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql
2025-07-21 09:56:05,758 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql
2025-07-21 09:56:05,762 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,073 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:06,075 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:06,075 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,081 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,083 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,084 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,084 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,089 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,091 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,091 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,095 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,420 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:06,431 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:07,055 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:07,055 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:09,084 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:09,093 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:09,715 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:09,724 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:14,737 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-07-21 09:56:15,204 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-07-21 09:56:15,216 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 18\xc2\xa0hours","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 18\xc2\xa0hours","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 18\xc2\xa0hours","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 18\xc2\xa0hours","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 18\xc2\xa0hours","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69}],"has_next":true,"last_key":""}'
2025-07-21 09:56:15,550 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:15,561 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:15,563 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:15,565 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:15,567 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:15,885 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:15,889 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:15,893 [INFO] __main__.py:245 - Writing fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:16,200 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:16,216 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:16,588 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:16,594 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:16,598 [INFO] __main__.py:245 - Writing investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:16,954 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:16,960 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:17,321 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:17,323 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:17,658 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:17,669 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:17,669 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql
2025-07-21 09:56:17,675 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:18,329 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:18,335 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:18,337 [INFO] __main__.py:245 - Writing exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:18,710 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:18,714 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:18,717 [INFO] __main__.py:245 - Writing employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:19,101 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:19,103 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:19,864 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:19,868 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:24,872 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-07-21 09:56:25,432 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-07-21 09:56:25,432 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 16\xc2\xa0hours","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49}],"has_next":true,"last_key":""}'
2025-07-21 09:56:25,783 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:25,787 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:25,787 [INFO] __main__.py:245 - Writing product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql
2025-07-21 09:56:26,990 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:26,992 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:26,995 [INFO] __main__.py:245 - Writing consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:27,542 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:27,544 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:27,887 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:27,887 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:28,206 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:28,207 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:28,207 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:28,213 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:28,216 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:28,520 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:28,527 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:28,528 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:28,529 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:28,836 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:28,839 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:29,144 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:29,148 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:29,566 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:29,571 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:30,399 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:30,400 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:30,400 [INFO] __main__.py:245 - Writing product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:30,834 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:30,843 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:30,845 [INFO] __main__.py:245 - Writing user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:35,862 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-07-21 09:56:36,247 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-07-21 09:56:36,248 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29}],"has_next":true,"last_key":""}'
2025-07-21 09:56:36,739 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:36,749 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:37,070 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:37,078 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:37,482 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:37,482 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:37,834 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:37,834 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:38,581 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:38,583 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:38,916 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:38,918 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:39,357 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:39,362 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:39,698 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:39,705 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:40,075 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:40,079 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:40,080 [INFO] __main__.py:245 - Writing average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql
2025-07-21 09:56:40,516 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:40,521 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:40,523 [INFO] __main__.py:245 - Writing confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:40,848 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:40,857 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:41,178 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:41,183 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:42,323 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:42,333 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:42,753 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:42,758 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:42,758 [INFO] __main__.py:245 - Writing average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:43,071 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:43,075 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:43,436 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:43,439 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:44,138 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:44,143 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:49,158 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-07-21 09:56:49,549 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-07-21 09:56:49,550 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 1\xc2\xa0week","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1029511014,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792516,"status":10,"status_display":"Accepted","runtime":"1642 ms","url":"/submissions/detail/1029511014/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1029510363,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792466,"status":10,"status_display":"Accepted","runtime":"1053 ms","url":"/submissions/detail/1029510363/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1016455334,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573885,"status":10,"status_display":"Accepted","runtime":"1095 ms","url":"/submissions/detail/1016455334/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1016455058,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573858,"status":10,"status_display":"Accepted","runtime":"2190 ms","url":"/submissions/detail/1016455058/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1009234981,"question_id":183,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690881420,"status":10,"status_display":"Accepted","runtime":"724 ms","url":"/submissions/detail/1009234981/","is_pending":"Not Pending","title":"Customers Who Never Order","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as customers from Customers where id not in(select customerid from orders)","compare_result":"111111111111","title_slug":"customers-who-never-order","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1009161386,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874221,"status":10,"status_display":"Accepted","runtime":"875 ms","url":"/submissions/detail/1009161386/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1009161138,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874197,"status":10,"status_display":"Accepted","runtime":"1543 ms","url":"/submissions/detail/1009161138/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1004211677,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690353557,"status":10,"status_display":"Accepted","runtime":"981 ms","url":"/submissions/detail/1004211677/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as Employee from Employee e1 where salary > (select salary from Employee where id = e1.managerId)","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":9}],"has_next":true,"last_key":""}'
2025-07-21 09:56:49,897 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:49,901 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:51,055 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:51,061 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:51,388 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:51,394 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:51,720 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:51,722 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:52,334 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:52,338 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:52,708 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:52,709 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:53,032 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:53,038 [INFO] __main__.py:251 - customer-placing-the-largest-number-of-orders/2024-08-11 22.33.14 - Accepted - runtime 444ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:53,383 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:53,389 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2024-08-08 15.31.19 - Accepted - runtime 1265ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:53,718 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:53,722 [INFO] __main__.py:251 - top-travellers/2024-08-02 22.39.39 - Accepted - runtime 843ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:53,724 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.53.10 - Accepted - runtime 1344ms - memory 0.0B.sql
2025-07-21 09:56:53,725 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.48.36 - Runtime Error - runtime NA - memory NA.sql
2025-07-21 09:56:53,730 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-25 10.40.12 - Accepted - runtime 1338ms - memory 0.0B.sql
2025-07-21 09:56:53,733 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.38.36 - Accepted - runtime 1642ms - memory 0.0B.sql
2025-07-21 09:56:53,736 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.37.46 - Accepted - runtime 1053ms - memory 0.0B.sql
2025-07-21 09:56:53,738 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.08.05 - Accepted - runtime 1095ms - memory 0.0B.sql
2025-07-21 09:56:53,740 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.07.38 - Accepted - runtime 2190ms - memory 0.0B.sql
2025-07-21 09:56:54,256 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:54,263 [INFO] __main__.py:251 - customers-who-never-order/2023-08-01 14.47.00 - Accepted - runtime 724ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:54,843 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:54,846 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.47.01 - Accepted - runtime 875ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:54,846 [INFO] __main__.py:245 - Writing duplicate-emails/2023-08-01 12.46.37 - Accepted - runtime 1543ms - memory 0.0B.sql
2025-07-21 09:56:54,848 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.09.17 - Accepted - runtime 981ms - memory 0.0B.sql
2025-07-21 09:56:59,849 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-07-21 09:57:00,193 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-07-21 09:57:00,197 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1004210595,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690353467,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1004210595/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\nselect * from Employee e1 where salary > (select salary from Emplpoyee where id = e1.managerId)","compare_result":"00000000000000","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1003745627,"question_id":175,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690304358,"status":10,"status_display":"Accepted","runtime":"1086 ms","url":"/submissions/detail/1003745627/","is_pending":"Not Pending","title":"Combine Two Tables","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect FirstName, LastName, city, state from person left join address \\r\\non person.personId = address.personId ","compare_result":"11111111","title_slug":"combine-two-tables","has_notes":false,"flag_type":1,"frontend_id":7},{"id":842546003,"question_id":327,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668329684,"status":10,"status_display":"Accepted","runtime":"2624 ms","url":"/submissions/detail/842546003/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"100.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} lower\\n * @param {number} upper\\n * @return {number}\\n */\\nvar countRangeSum = function(nums, lower, upper) {\\n    let preSum = Array(nums.length + 1).fill(0);\\n  let count = 0;\\n\\n  // create preSum array, use preSum to check the sum range\\n  for (let i = 0; i < nums.length; i++) {\\n      preSum[i + 1] = preSum[i] + nums[i];\\n  }\\n\\n  const sort = function(preSum) {\\n      if (preSum.length === 1) return preSum;\\n\\n      let mid = Math.floor(preSum.length / 2);\\n      let left = sort(preSum.slice(0, mid));\\n      let right = sort(preSum.slice(mid))\\n\\n      return merge(left, right);\\n  }\\n\\n  const merge = function(left, right) {\\n      let start = 0;\\n      let end = 0;\\n\\n      for (let i = 0; i < left.length; i++) {\\n          // all elements before start index, after subtracting left[i] are less than lower, which means all elements after start index are bigger or equal than lower\\n          while (start < right.length && right[start] - left[i] < lower) {\\n              start++;\\n          }\\n          // similarly, all elements before end index are less or euqal then upper\\n          while (end < right.length && right[end] - left[i] <= upper) {\\n              end++;\\n          }\\n\\n          // since the initial values of start and end are the same, and upper >= lower, so end will >= start too, which means the rest of the end minus start element difference will fall between [lower, upper].\\n          count += end - start;\\n      }\\n\\n      let sort = [];\\n      while (left.length && right.length) {\\n          if (left[0] <= right[0]) {\\n              sort.push(left.shift());\\n          } else {\\n              sort.push(right.shift());\\n          }\\n      }\\n\\n      return [...sort, ...left, ...right];\\n  }\\n\\n  sort(preSum);\\n  return count;\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1,"frontend_id":6},{"id":842024680,"question_id":2561,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668266557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/842024680/","is_pending":"Not Pending","title":"Number of Distinct Averages","memory":"N/A","code":"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    for(let i = 0; i < nums.length;i++)\\n    {\\n        let newnums = nums;\\n        let  res = [],max = Math.max(...nums), min = Math.min(...nums);   \\n        res[0] = min, res[1] = max\\n        let avg = (max+min)/2\\n    }\\n    \\n    \\n};","compare_result":"000000000000000000000000000000000000","title_slug":"number-of-distinct-averages","has_notes":false,"flag_type":1,"frontend_id":5},{"id":836960924,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591646,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/836960924/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"42.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":4},{"id":836960390,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591580,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/836960390/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"43 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":3},{"id":831406918,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666877523,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/831406918/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":2},{"id":831395512,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666876149,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/831395512/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-07-21 09:57:00,201 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.07.47 - Runtime Error - runtime NA - memory NA.sql
2025-07-21 09:57:00,510 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:57:00,527 [INFO] __main__.py:251 - combine-two-tables/2023-07-25 22.29.18 - Accepted - runtime 1086ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:57:00,867 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:57:00,876 [INFO] __main__.py:251 - count-of-range-sum/2022-11-13 14.24.44 - Accepted - runtime 2624ms - memory 100.9MB.js already exists, skipping it
2025-07-21 09:57:01,188 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:57:01,203 [INFO] __main__.py:251 - number-of-distinct-averages/2022-11-12 20.52.37 - Wrong Answer - runtime NA - memory NA.js already exists, skipping it
2025-07-21 09:57:01,544 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:57:01,551 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.24.06 - Accepted - runtime 91ms - memory 42.9MB.js already exists, skipping it
2025-07-21 09:57:01,551 [INFO] __main__.py:245 - Writing find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.23.00 - Accepted - runtime 96ms - memory 43MB.js
2025-07-21 09:57:01,872 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:57:01,874 [INFO] __main__.py:251 - valid-anagram/2022-10-27 19.02.03 - Accepted - runtime 171ms - memory 49.4MB.js already exists, skipping it
2025-07-21 09:57:01,876 [INFO] __main__.py:245 - Writing valid-anagram/2022-10-27 18.39.09 - Accepted - runtime 122ms - memory 49.4MB.js
2025-07-22 15:45:46,293 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-07-22 15:45:46,293 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-22 15:46:24,568 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-07-22 15:46:25,241 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-07-22 15:46:25,242 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1707070691,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"4Â minutes","timestamp":1753179134,"status":10,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/1707070691/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"WITH helper AS\n(\n    SELECT \n        E.name Employee, \n        E.salary Salary,\n        D.name Department,\n        DENSE_RANK() OVER (PARTITION BY D.id ORDER BY salary DESC) rank\n    FROM Employee E JOIN Department D\n    ON D.id = E.departmentId\n)\nSELECT \n    Employee, \n    Salary,\n    Department\nFROM helper\nWHERE rank < 4;\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":111}],"has_next":true,"last_key":""}
2025-07-22 15:46:26,250 [DEBUG] leetcode.py:112 - User is logged in
2025-07-22 15:46:26,250 [INFO] leetcode.py:95 - Cookie set successful
2025-07-22 15:46:26,251 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-07-22 15:46:26,704 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-07-22 15:46:26,729 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1707070691,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0minutes","timestamp":1753179134,"status":10,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/1707070691/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"WITH helper AS\\n(\\n    SELECT \\n        E.name Employee, \\n        E.salary Salary,\\n        D.name Department,\\n        DENSE_RANK() OVER (PARTITION BY D.id ORDER BY salary DESC) rank\\n    FROM Employee E JOIN Department D\\n    ON D.id = E.departmentId\\n)\\nSELECT \\n    Employee, \\n    Salary,\\n    Department\\nFROM helper\\nWHERE rank < 4;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":111},{"id":1707069861,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0minutes","timestamp":1753179084,"status":10,"status_display":"Accepted","runtime":"768 ms","url":"/submissions/detail/1707069861/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(\\nselect *, dense_rank() over(partition by e.departmentId order by e.salary desc) as rn\\nfrom Employee e \\n)\\nselect d.name as Department , e.name as Employee , e.salary\\nfrom cte_ranked e\\njoin Department d on e.departmentId = d.id \\nwhere rn <= 3","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":110},{"id":1705582347,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 3\xc2\xa0hours","timestamp":1753080312,"status":10,"status_display":"Accepted","runtime":"394 ms","url":"/submissions/detail/1705582347/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 5\xc2\xa0hours","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1703090868,"question_id":178,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 4\xc2\xa0hours","timestamp":1752902814,"status":10,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/1703090868/","is_pending":"Not Pending","title":"Rank Scores","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT SCORE, DENSE_RANK() OVER(ORDER BY SCORE DESC) AS RANK\\nFROM SCORES\\n","compare_result":"11111111111","title_slug":"rank-scores","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 2\xc2\xa0hours","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 2\xc2\xa0hours","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 2\xc2\xa0hours","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92}],"has_next":true,"last_key":""}'
2025-07-22 15:46:27,066 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:27,070 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-22 15.42.14 - Accepted - runtime 459ms - memory 0.0B.sql
2025-07-22 15:46:27,073 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-22 15.41.24 - Accepted - runtime 768ms - memory 0.0B.sql
2025-07-22 15:46:27,429 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:27,432 [INFO] __main__.py:245 - Writing department-highest-salary/2025-07-21 12.15.12 - Accepted - runtime 394ms - memory 0.0B.sql
2025-07-22 15:46:27,436 [INFO] __main__.py:251 - department-highest-salary/2025-07-21 09.48.07 - Accepted - runtime 420ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:27,783 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:27,786 [INFO] __main__.py:251 - rank-scores/2025-07-19 10.56.54 - Accepted - runtime 362ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:28,122 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:28,125 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:28,125 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql
2025-07-22 15:46:28,127 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql
2025-07-22 15:46:28,128 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,466 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:28,470 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:28,471 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,473 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,475 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,476 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,477 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,479 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,480 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,482 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,484 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,844 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:28,852 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:33,857 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-07-22 15:46:34,251 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-07-22 15:46:34,280 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 4\xc2\xa0hours","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 4\xc2\xa0hours","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 4\xc2\xa0hours","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 5\xc2\xa0hours","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 5\xc2\xa0hours","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 6\xc2\xa0hours","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 6\xc2\xa0hours","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72}],"has_next":true,"last_key":""}'
2025-07-22 15:46:34,621 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:34,631 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:35,019 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:35,022 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:35,386 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:35,400 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:35,771 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:35,775 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:35,776 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:35,777 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:35,777 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:36,228 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:36,230 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:36,232 [INFO] __main__.py:245 - Writing fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:36,237 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:36,583 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:36,590 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:36,590 [INFO] __main__.py:245 - Writing investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:37,232 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:37,241 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:37,601 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:37,604 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:37,928 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:37,939 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:37,939 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql
2025-07-22 15:46:37,944 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:38,288 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:38,292 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:38,293 [INFO] __main__.py:245 - Writing exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:38,648 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:38,682 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:43,683 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-07-22 15:46:44,102 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-07-22 15:46:44,132 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52}],"has_next":true,"last_key":""}'
2025-07-22 15:46:44,136 [INFO] __main__.py:245 - Writing employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:44,554 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:44,568 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:44,909 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:44,918 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:45,295 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:45,301 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:45,301 [INFO] __main__.py:245 - Writing product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql
2025-07-22 15:46:45,644 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:45,652 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:45,652 [INFO] __main__.py:245 - Writing consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:46,033 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:46,033 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:46,388 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:46,388 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:46,807 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:46,812 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:46,812 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:46,813 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:46,814 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:47,182 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:47,188 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:47,188 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:47,191 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:47,538 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:47,538 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:47,983 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:47,997 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:48,330 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:48,332 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:48,777 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:48,782 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:53,783 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-07-22 15:46:54,412 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-07-22 15:46:54,427 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32}],"has_next":true,"last_key":""}'
2025-07-22 15:46:54,428 [INFO] __main__.py:245 - Writing product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:55,017 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:55,021 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:55,021 [INFO] __main__.py:245 - Writing user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:55,703 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:55,705 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:56,156 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:56,163 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:56,542 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:56,550 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:57,068 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:57,069 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:57,449 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:57,459 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:58,280 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:58,293 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:58,630 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:58,632 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:58,958 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:58,961 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:59,334 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:59,338 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:59,338 [INFO] __main__.py:245 - Writing average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql
2025-07-22 15:46:59,691 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:59,693 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:59,693 [INFO] __main__.py:245 - Writing confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:47:00,035 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:00,050 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:00,490 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:00,498 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:00,860 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:00,882 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:01,261 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:01,262 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:01,262 [INFO] __main__.py:245 - Writing average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:47:06,276 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-07-22 15:47:07,001 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-07-22 15:47:07,016 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1029511014,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792516,"status":10,"status_display":"Accepted","runtime":"1642 ms","url":"/submissions/detail/1029511014/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1029510363,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792466,"status":10,"status_display":"Accepted","runtime":"1053 ms","url":"/submissions/detail/1029510363/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1016455334,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573885,"status":10,"status_display":"Accepted","runtime":"1095 ms","url":"/submissions/detail/1016455334/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1016455058,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573858,"status":10,"status_display":"Accepted","runtime":"2190 ms","url":"/submissions/detail/1016455058/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1009234981,"question_id":183,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690881420,"status":10,"status_display":"Accepted","runtime":"724 ms","url":"/submissions/detail/1009234981/","is_pending":"Not Pending","title":"Customers Who Never Order","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as customers from Customers where id not in(select customerid from orders)","compare_result":"111111111111","title_slug":"customers-who-never-order","has_notes":false,"flag_type":1,"frontend_id":12}],"has_next":true,"last_key":""}'
2025-07-22 15:47:07,371 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:07,374 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:07,731 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:07,732 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:08,132 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:08,136 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:08,681 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:08,683 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:09,080 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:09,088 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:09,450 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:09,452 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:09,795 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:09,798 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:10,131 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:10,135 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:10,496 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:10,504 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:10,898 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:10,901 [INFO] __main__.py:251 - customer-placing-the-largest-number-of-orders/2024-08-11 22.33.14 - Accepted - runtime 444ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:11,471 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:11,503 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2024-08-08 15.31.19 - Accepted - runtime 1265ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:12,195 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:12,196 [INFO] __main__.py:251 - top-travellers/2024-08-02 22.39.39 - Accepted - runtime 843ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:12,196 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.53.10 - Accepted - runtime 1344ms - memory 0.0B.sql
2025-07-22 15:47:12,201 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.48.36 - Runtime Error - runtime NA - memory NA.sql
2025-07-22 15:47:12,272 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-25 10.40.12 - Accepted - runtime 1338ms - memory 0.0B.sql
2025-07-22 15:47:12,274 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.38.36 - Accepted - runtime 1642ms - memory 0.0B.sql
2025-07-22 15:47:12,274 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.37.46 - Accepted - runtime 1053ms - memory 0.0B.sql
2025-07-22 15:47:12,278 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.08.05 - Accepted - runtime 1095ms - memory 0.0B.sql
2025-07-22 15:47:12,280 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.07.38 - Accepted - runtime 2190ms - memory 0.0B.sql
2025-07-22 15:47:12,905 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:12,907 [INFO] __main__.py:251 - customers-who-never-order/2023-08-01 14.47.00 - Accepted - runtime 724ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:17,915 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-07-22 15:47:18,301 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-07-22 15:47:18,312 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1009161386,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874221,"status":10,"status_display":"Accepted","runtime":"875 ms","url":"/submissions/detail/1009161386/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1009161138,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874197,"status":10,"status_display":"Accepted","runtime":"1543 ms","url":"/submissions/detail/1009161138/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1004211677,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690353557,"status":10,"status_display":"Accepted","runtime":"981 ms","url":"/submissions/detail/1004211677/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as Employee from Employee e1 where salary > (select salary from Employee where id = e1.managerId)","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1004210595,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690353467,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1004210595/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\nselect * from Employee e1 where salary > (select salary from Emplpoyee where id = e1.managerId)","compare_result":"00000000000000","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1003745627,"question_id":175,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690304358,"status":10,"status_display":"Accepted","runtime":"1086 ms","url":"/submissions/detail/1003745627/","is_pending":"Not Pending","title":"Combine Two Tables","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect FirstName, LastName, city, state from person left join address \\r\\non person.personId = address.personId ","compare_result":"11111111","title_slug":"combine-two-tables","has_notes":false,"flag_type":1,"frontend_id":7},{"id":842546003,"question_id":327,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668329684,"status":10,"status_display":"Accepted","runtime":"2624 ms","url":"/submissions/detail/842546003/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"100.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} lower\\n * @param {number} upper\\n * @return {number}\\n */\\nvar countRangeSum = function(nums, lower, upper) {\\n    let preSum = Array(nums.length + 1).fill(0);\\n  let count = 0;\\n\\n  // create preSum array, use preSum to check the sum range\\n  for (let i = 0; i < nums.length; i++) {\\n      preSum[i + 1] = preSum[i] + nums[i];\\n  }\\n\\n  const sort = function(preSum) {\\n      if (preSum.length === 1) return preSum;\\n\\n      let mid = Math.floor(preSum.length / 2);\\n      let left = sort(preSum.slice(0, mid));\\n      let right = sort(preSum.slice(mid))\\n\\n      return merge(left, right);\\n  }\\n\\n  const merge = function(left, right) {\\n      let start = 0;\\n      let end = 0;\\n\\n      for (let i = 0; i < left.length; i++) {\\n          // all elements before start index, after subtracting left[i] are less than lower, which means all elements after start index are bigger or equal than lower\\n          while (start < right.length && right[start] - left[i] < lower) {\\n              start++;\\n          }\\n          // similarly, all elements before end index are less or euqal then upper\\n          while (end < right.length && right[end] - left[i] <= upper) {\\n              end++;\\n          }\\n\\n          // since the initial values of start and end are the same, and upper >= lower, so end will >= start too, which means the rest of the end minus start element difference will fall between [lower, upper].\\n          count += end - start;\\n      }\\n\\n      let sort = [];\\n      while (left.length && right.length) {\\n          if (left[0] <= right[0]) {\\n              sort.push(left.shift());\\n          } else {\\n              sort.push(right.shift());\\n          }\\n      }\\n\\n      return [...sort, ...left, ...right];\\n  }\\n\\n  sort(preSum);\\n  return count;\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1,"frontend_id":6},{"id":842024680,"question_id":2561,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668266557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/842024680/","is_pending":"Not Pending","title":"Number of Distinct Averages","memory":"N/A","code":"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    for(let i = 0; i < nums.length;i++)\\n    {\\n        let newnums = nums;\\n        let  res = [],max = Math.max(...nums), min = Math.min(...nums);   \\n        res[0] = min, res[1] = max\\n        let avg = (max+min)/2\\n    }\\n    \\n    \\n};","compare_result":"000000000000000000000000000000000000","title_slug":"number-of-distinct-averages","has_notes":false,"flag_type":1,"frontend_id":5},{"id":836960924,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591646,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/836960924/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"42.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":4},{"id":836960390,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591580,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/836960390/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"43 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":3},{"id":831406918,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666877523,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/831406918/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":2},{"id":831395512,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666876149,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/831395512/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-07-22 15:47:18,660 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:18,663 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.47.01 - Accepted - runtime 875ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:18,663 [INFO] __main__.py:245 - Writing duplicate-emails/2023-08-01 12.46.37 - Accepted - runtime 1543ms - memory 0.0B.sql
2025-07-22 15:47:18,665 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.09.17 - Accepted - runtime 981ms - memory 0.0B.sql
2025-07-22 15:47:18,666 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.07.47 - Runtime Error - runtime NA - memory NA.sql
2025-07-22 15:47:19,000 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:19,000 [INFO] __main__.py:251 - combine-two-tables/2023-07-25 22.29.18 - Accepted - runtime 1086ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:19,353 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:19,357 [INFO] __main__.py:251 - count-of-range-sum/2022-11-13 14.24.44 - Accepted - runtime 2624ms - memory 100.9MB.js already exists, skipping it
2025-07-22 15:47:19,786 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:19,795 [INFO] __main__.py:251 - number-of-distinct-averages/2022-11-12 20.52.37 - Wrong Answer - runtime NA - memory NA.js already exists, skipping it
2025-07-22 15:47:20,167 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:20,168 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.24.06 - Accepted - runtime 91ms - memory 42.9MB.js already exists, skipping it
2025-07-22 15:47:20,168 [INFO] __main__.py:245 - Writing find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.23.00 - Accepted - runtime 96ms - memory 43MB.js
2025-07-22 15:47:20,529 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:20,531 [INFO] __main__.py:251 - valid-anagram/2022-10-27 19.02.03 - Accepted - runtime 171ms - memory 49.4MB.js already exists, skipping it
2025-07-22 15:47:20,531 [INFO] __main__.py:245 - Writing valid-anagram/2022-10-27 18.39.09 - Accepted - runtime 122ms - memory 49.4MB.js
2025-07-23 15:35:12,497 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-07-23 15:35:12,497 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-23 15:35:44,820 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-07-23 15:35:45,764 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-07-23 15:35:45,766 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1708309019,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"26Â minutes","timestamp":1753263559,"status":10,"status_display":"Accepted","runtime":"351 ms","url":"/submissions/detail/1708309019/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"SELECT\n    request_at as Day,\n    ROUND(SUM(CASE WHEN status LIKE 'cancelled%' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) * 1.0, 2) as 'Cancellation Rate'\nFROM\n    Trips t\nJOIN Users uc\n    ON t.client_id = uc.users_id\nJOIN Users ud\n    ON t.driver_id = ud.users_id\nWHERE\n    uc.banned = 'No'\n    AND ud. banned = 'No'\n    AND request_at BETWEEN '2013-01-01' AND '2013-10-03'\nGROUP BY\n    request_at\nORDER BY\n    request_at\n\n-- WITH cte_a AS (\n--     -- Only include trips where both client and driver are not banned\n--     SELECT * \n--     FROM Trips\n--     WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = 'Yes')\n--       AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = 'Yes')\n-- ), \n-- cte_total_cnt AS (\n--     -- Count total unbanned requests per day\n--     SELECT request_at, COUNT(*) AS cnt_total_request\n--     FROM cte_a \n--     GROUP BY request_at\n-- ),\n-- cte_cancelled_cnt AS (\n--     -- Count unbanned cancelled requests per day\n--     SELECT request_at, COUNT(*) AS cnt_cancelled\n--     FROM cte_a\n--     WHERE status IN ('cancelled_by_driver', 'cancelled_by_client')\n--     GROUP BY request_at\n-- )\n-- SELECT \n--     t.request_at AS Day,\n--     ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\n-- FROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \n-- ON t.request_at = c.request_at\n-- WHERE t.request_at BETWEEN '2013-10-01' AND '2013-10-03'\n-- ORDER BY t.request_at;\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":113}],"has_next":true,"last_key":""}
2025-07-23 15:35:46,776 [DEBUG] leetcode.py:112 - User is logged in
2025-07-23 15:35:46,776 [INFO] leetcode.py:95 - Cookie set successful
2025-07-23 15:35:46,777 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-07-23 15:35:47,178 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-07-23 15:35:47,178 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1708309019,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"26\xc2\xa0minutes","timestamp":1753263559,"status":10,"status_display":"Accepted","runtime":"351 ms","url":"/submissions/detail/1708309019/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"SELECT\\n    request_at as Day,\\n    ROUND(SUM(CASE WHEN status LIKE \'cancelled%\' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) * 1.0, 2) as \'Cancellation Rate\'\\nFROM\\n    Trips t\\nJOIN Users uc\\n    ON t.client_id = uc.users_id\\nJOIN Users ud\\n    ON t.driver_id = ud.users_id\\nWHERE\\n    uc.banned = \'No\'\\n    AND ud. banned = \'No\'\\n    AND request_at BETWEEN \'2013-01-01\' AND \'2013-10-03\'\\nGROUP BY\\n    request_at\\nORDER BY\\n    request_at\\n\\n-- WITH cte_a AS (\\n--     -- Only include trips where both client and driver are not banned\\n--     SELECT * \\n--     FROM Trips\\n--     WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n--       AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n-- ), \\n-- cte_total_cnt AS (\\n--     -- Count total unbanned requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_total_request\\n--     FROM cte_a \\n--     GROUP BY request_at\\n-- ),\\n-- cte_cancelled_cnt AS (\\n--     -- Count unbanned cancelled requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_cancelled\\n--     FROM cte_a\\n--     WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n--     GROUP BY request_at\\n-- )\\n-- SELECT \\n--     t.request_at AS Day,\\n--     ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\n-- FROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\n-- ON t.request_at = c.request_at\\n-- WHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\n-- ORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":113},{"id":1708304798,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"30\xc2\xa0minutes","timestamp":1753263298,"status":10,"status_display":"Accepted","runtime":"483 ms","url":"/submissions/detail/1708304798/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"WITH cte_a AS (\\n    -- Only include trips where both client and driver are not banned\\n    SELECT * \\n    FROM Trips\\n    WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n      AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n), \\ncte_total_cnt AS (\\n    -- Count total unbanned requests per day\\n    SELECT request_at, COUNT(*) AS cnt_total_request\\n    FROM cte_a \\n    GROUP BY request_at\\n),\\ncte_cancelled_cnt AS (\\n    -- Count unbanned cancelled requests per day\\n    SELECT request_at, COUNT(*) AS cnt_cancelled\\n    FROM cte_a\\n    WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n    GROUP BY request_at\\n)\\nSELECT \\n    t.request_at AS Day,\\n    ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\nFROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\nON t.request_at = c.request_at\\nWHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\nORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":112},{"id":1707070691,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"23\xc2\xa0hours, 53\xc2\xa0minutes","timestamp":1753179134,"status":10,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/1707070691/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"WITH helper AS\\n(\\n    SELECT \\n        E.name Employee, \\n        E.salary Salary,\\n        D.name Department,\\n        DENSE_RANK() OVER (PARTITION BY D.id ORDER BY salary DESC) rank\\n    FROM Employee E JOIN Department D\\n    ON D.id = E.departmentId\\n)\\nSELECT \\n    Employee, \\n    Salary,\\n    Department\\nFROM helper\\nWHERE rank < 4;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":111},{"id":1707069861,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"23\xc2\xa0hours, 54\xc2\xa0minutes","timestamp":1753179084,"status":10,"status_display":"Accepted","runtime":"768 ms","url":"/submissions/detail/1707069861/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(\\nselect *, dense_rank() over(partition by e.departmentId order by e.salary desc) as rn\\nfrom Employee e \\n)\\nselect d.name as Department , e.name as Employee , e.salary\\nfrom cte_ranked e\\njoin Department d on e.departmentId = d.id \\nwhere rn <= 3","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":110},{"id":1705582347,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 3\xc2\xa0hours","timestamp":1753080312,"status":10,"status_display":"Accepted","runtime":"394 ms","url":"/submissions/detail/1705582347/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 5\xc2\xa0hours","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1703090868,"question_id":178,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 4\xc2\xa0hours","timestamp":1752902814,"status":10,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/1703090868/","is_pending":"Not Pending","title":"Rank Scores","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT SCORE, DENSE_RANK() OVER(ORDER BY SCORE DESC) AS RANK\\nFROM SCORES\\n","compare_result":"11111111111","title_slug":"rank-scores","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 2\xc2\xa0hours","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94}],"has_next":true,"last_key":""}'
2025-07-23 15:35:47,993 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:48,002 [INFO] __main__.py:245 - Writing trips-and-users/2025-07-23 15.09.19 - Accepted - runtime 351ms - memory 0.0B.sql
2025-07-23 15:35:48,006 [INFO] __main__.py:245 - Writing trips-and-users/2025-07-23 15.04.58 - Accepted - runtime 483ms - memory 0.0B.sql
2025-07-23 15:35:48,516 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:48,520 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-22 15.42.14 - Accepted - runtime 459ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:35:48,520 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-22 15.41.24 - Accepted - runtime 768ms - memory 0.0B.sql
2025-07-23 15:35:48,922 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:48,932 [INFO] __main__.py:251 - department-highest-salary/2025-07-21 12.15.12 - Accepted - runtime 394ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:35:48,933 [INFO] __main__.py:245 - Writing department-highest-salary/2025-07-21 09.48.07 - Accepted - runtime 420ms - memory 0.0B.sql
2025-07-23 15:35:49,413 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:49,417 [INFO] __main__.py:251 - rank-scores/2025-07-19 10.56.54 - Accepted - runtime 362ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:35:49,803 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:49,803 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:35:49,803 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql
2025-07-23 15:35:49,803 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql
2025-07-23 15:35:49,803 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:50,194 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:50,197 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:35:50,198 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:50,203 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:50,206 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:50,209 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:50,213 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:50,216 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:50,216 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:50,220 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:55,235 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-07-23 15:35:55,615 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-07-23 15:35:55,631 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 2\xc2\xa0hours","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 2\xc2\xa0hours","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 2\xc2\xa0hours","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 4\xc2\xa0hours","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 4\xc2\xa0hours","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 5\xc2\xa0hours","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 5\xc2\xa0hours","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 6\xc2\xa0hours","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74}],"has_next":true,"last_key":""}'
2025-07-23 15:35:55,633 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:55,965 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:55,968 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:35:56,795 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:56,799 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:35:57,409 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:57,412 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:35:57,919 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:57,924 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:35:58,385 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:58,388 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:35:58,388 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:58,388 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:58,395 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:58,774 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:58,779 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:35:58,781 [INFO] __main__.py:245 - Writing fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:58,784 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql
2025-07-23 15:35:59,177 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:59,177 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:35:59,177 [INFO] __main__.py:245 - Writing investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:35:59,558 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:59,567 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:35:59,928 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:35:59,928 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:00,288 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:00,293 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:00,295 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql
2025-07-23 15:36:00,298 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:36:00,653 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:00,654 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:05,656 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-07-23 15:36:06,299 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-07-23 15:36:06,299 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54}],"has_next":true,"last_key":""}'
2025-07-23 15:36:06,308 [INFO] __main__.py:245 - Writing exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:36:06,731 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:06,733 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:06,733 [INFO] __main__.py:245 - Writing employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:36:07,144 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:07,148 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:07,999 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:07,999 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:08,557 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:08,562 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:08,562 [INFO] __main__.py:245 - Writing product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql
2025-07-23 15:36:09,130 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:09,143 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:09,143 [INFO] __main__.py:245 - Writing consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:36:09,470 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:09,472 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:09,992 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:09,997 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:10,624 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:10,626 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:10,628 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:36:10,632 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:36:10,633 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:36:10,959 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:10,969 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:10,971 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:36:10,974 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:36:11,327 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:11,333 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:11,654 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:11,654 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:16,670 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-07-23 15:36:17,069 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-07-23 15:36:17,069 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34}],"has_next":true,"last_key":""}'
2025-07-23 15:36:17,427 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:17,432 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:17,777 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:17,779 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:17,782 [INFO] __main__.py:245 - Writing product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:36:18,112 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:18,116 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:18,116 [INFO] __main__.py:245 - Writing user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:36:18,448 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:18,450 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:18,813 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:18,820 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:19,148 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:19,148 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:19,512 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:19,515 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:19,839 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:19,842 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:20,615 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:20,619 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:20,945 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:20,949 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:21,415 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:21,417 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:21,765 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:21,765 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:21,765 [INFO] __main__.py:245 - Writing average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql
2025-07-23 15:36:22,127 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:22,127 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:22,127 [INFO] __main__.py:245 - Writing confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:36:23,422 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:23,426 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:24,244 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:24,250 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:24,624 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:24,626 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:29,628 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-07-23 15:36:30,204 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-07-23 15:36:30,204 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1029511014,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792516,"status":10,"status_display":"Accepted","runtime":"1642 ms","url":"/submissions/detail/1029511014/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1029510363,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792466,"status":10,"status_display":"Accepted","runtime":"1053 ms","url":"/submissions/detail/1029510363/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1016455334,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573885,"status":10,"status_display":"Accepted","runtime":"1095 ms","url":"/submissions/detail/1016455334/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":14}],"has_next":true,"last_key":""}'
2025-07-23 15:36:31,352 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:31,354 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:31,354 [INFO] __main__.py:245 - Writing average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql
2025-07-23 15:36:31,799 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:31,803 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:32,161 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:32,166 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:32,608 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:32,610 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:32,935 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:32,938 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:33,276 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:33,279 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:33,651 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:33,658 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:34,008 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:34,008 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:34,371 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:34,376 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:34,705 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:34,709 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:35,405 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:35,407 [INFO] __main__.py:251 - customer-placing-the-largest-number-of-orders/2024-08-11 22.33.14 - Accepted - runtime 444ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:36,112 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:36,129 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2024-08-08 15.31.19 - Accepted - runtime 1265ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:36,832 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:36,835 [INFO] __main__.py:251 - top-travellers/2024-08-02 22.39.39 - Accepted - runtime 843ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:36,837 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.53.10 - Accepted - runtime 1344ms - memory 0.0B.sql
2025-07-23 15:36:36,837 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.48.36 - Runtime Error - runtime NA - memory NA.sql
2025-07-23 15:36:36,850 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-25 10.40.12 - Accepted - runtime 1338ms - memory 0.0B.sql
2025-07-23 15:36:36,850 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.38.36 - Accepted - runtime 1642ms - memory 0.0B.sql
2025-07-23 15:36:36,854 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.37.46 - Accepted - runtime 1053ms - memory 0.0B.sql
2025-07-23 15:36:36,857 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.08.05 - Accepted - runtime 1095ms - memory 0.0B.sql
2025-07-23 15:36:41,872 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-07-23 15:36:42,893 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-07-23 15:36:42,893 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1016455058,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573858,"status":10,"status_display":"Accepted","runtime":"2190 ms","url":"/submissions/detail/1016455058/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1009234981,"question_id":183,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690881420,"status":10,"status_display":"Accepted","runtime":"724 ms","url":"/submissions/detail/1009234981/","is_pending":"Not Pending","title":"Customers Who Never Order","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as customers from Customers where id not in(select customerid from orders)","compare_result":"111111111111","title_slug":"customers-who-never-order","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1009161386,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874221,"status":10,"status_display":"Accepted","runtime":"875 ms","url":"/submissions/detail/1009161386/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1009161138,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874197,"status":10,"status_display":"Accepted","runtime":"1543 ms","url":"/submissions/detail/1009161138/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1004211677,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690353557,"status":10,"status_display":"Accepted","runtime":"981 ms","url":"/submissions/detail/1004211677/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as Employee from Employee e1 where salary > (select salary from Employee where id = e1.managerId)","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1004210595,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690353467,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1004210595/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\nselect * from Employee e1 where salary > (select salary from Emplpoyee where id = e1.managerId)","compare_result":"00000000000000","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1003745627,"question_id":175,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690304358,"status":10,"status_display":"Accepted","runtime":"1086 ms","url":"/submissions/detail/1003745627/","is_pending":"Not Pending","title":"Combine Two Tables","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect FirstName, LastName, city, state from person left join address \\r\\non person.personId = address.personId ","compare_result":"11111111","title_slug":"combine-two-tables","has_notes":false,"flag_type":1,"frontend_id":7},{"id":842546003,"question_id":327,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668329684,"status":10,"status_display":"Accepted","runtime":"2624 ms","url":"/submissions/detail/842546003/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"100.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} lower\\n * @param {number} upper\\n * @return {number}\\n */\\nvar countRangeSum = function(nums, lower, upper) {\\n    let preSum = Array(nums.length + 1).fill(0);\\n  let count = 0;\\n\\n  // create preSum array, use preSum to check the sum range\\n  for (let i = 0; i < nums.length; i++) {\\n      preSum[i + 1] = preSum[i] + nums[i];\\n  }\\n\\n  const sort = function(preSum) {\\n      if (preSum.length === 1) return preSum;\\n\\n      let mid = Math.floor(preSum.length / 2);\\n      let left = sort(preSum.slice(0, mid));\\n      let right = sort(preSum.slice(mid))\\n\\n      return merge(left, right);\\n  }\\n\\n  const merge = function(left, right) {\\n      let start = 0;\\n      let end = 0;\\n\\n      for (let i = 0; i < left.length; i++) {\\n          // all elements before start index, after subtracting left[i] are less than lower, which means all elements after start index are bigger or equal than lower\\n          while (start < right.length && right[start] - left[i] < lower) {\\n              start++;\\n          }\\n          // similarly, all elements before end index are less or euqal then upper\\n          while (end < right.length && right[end] - left[i] <= upper) {\\n              end++;\\n          }\\n\\n          // since the initial values of start and end are the same, and upper >= lower, so end will >= start too, which means the rest of the end minus start element difference will fall between [lower, upper].\\n          count += end - start;\\n      }\\n\\n      let sort = [];\\n      while (left.length && right.length) {\\n          if (left[0] <= right[0]) {\\n              sort.push(left.shift());\\n          } else {\\n              sort.push(right.shift());\\n          }\\n      }\\n\\n      return [...sort, ...left, ...right];\\n  }\\n\\n  sort(preSum);\\n  return count;\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1,"frontend_id":6},{"id":842024680,"question_id":2561,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668266557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/842024680/","is_pending":"Not Pending","title":"Number of Distinct Averages","memory":"N/A","code":"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    for(let i = 0; i < nums.length;i++)\\n    {\\n        let newnums = nums;\\n        let  res = [],max = Math.max(...nums), min = Math.min(...nums);   \\n        res[0] = min, res[1] = max\\n        let avg = (max+min)/2\\n    }\\n    \\n    \\n};","compare_result":"000000000000000000000000000000000000","title_slug":"number-of-distinct-averages","has_notes":false,"flag_type":1,"frontend_id":5},{"id":836960924,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591646,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/836960924/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"42.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":4},{"id":836960390,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591580,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/836960390/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"43 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":3},{"id":831406918,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666877523,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/831406918/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":2},{"id":831395512,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666876149,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/831395512/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-07-23 15:36:42,900 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.07.38 - Accepted - runtime 2190ms - memory 0.0B.sql
2025-07-23 15:36:43,300 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:43,302 [INFO] __main__.py:251 - customers-who-never-order/2023-08-01 14.47.00 - Accepted - runtime 724ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:43,901 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:43,905 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.47.01 - Accepted - runtime 875ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:43,905 [INFO] __main__.py:245 - Writing duplicate-emails/2023-08-01 12.46.37 - Accepted - runtime 1543ms - memory 0.0B.sql
2025-07-23 15:36:43,905 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.09.17 - Accepted - runtime 981ms - memory 0.0B.sql
2025-07-23 15:36:43,911 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.07.47 - Runtime Error - runtime NA - memory NA.sql
2025-07-23 15:36:44,609 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:44,617 [INFO] __main__.py:251 - combine-two-tables/2023-07-25 22.29.18 - Accepted - runtime 1086ms - memory 0.0B.sql already exists, skipping it
2025-07-23 15:36:45,070 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:45,073 [INFO] __main__.py:251 - count-of-range-sum/2022-11-13 14.24.44 - Accepted - runtime 2624ms - memory 100.9MB.js already exists, skipping it
2025-07-23 15:36:46,043 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:46,061 [INFO] __main__.py:251 - number-of-distinct-averages/2022-11-12 20.52.37 - Wrong Answer - runtime NA - memory NA.js already exists, skipping it
2025-07-23 15:36:46,758 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:46,774 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.24.06 - Accepted - runtime 91ms - memory 42.9MB.js already exists, skipping it
2025-07-23 15:36:46,777 [INFO] __main__.py:245 - Writing find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.23.00 - Accepted - runtime 96ms - memory 43MB.js
2025-07-23 15:36:47,194 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-23 15:36:47,194 [INFO] __main__.py:251 - valid-anagram/2022-10-27 19.02.03 - Accepted - runtime 171ms - memory 49.4MB.js already exists, skipping it
2025-07-23 15:36:47,194 [INFO] __main__.py:245 - Writing valid-anagram/2022-10-27 18.39.09 - Accepted - runtime 122ms - memory 49.4MB.js
2025-07-24 10:30:23,335 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-07-24 10:30:23,335 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-24 10:31:06,345 [ERROR] leetcode.py:88 - Cookie format not valid. Expected: 'csrftoken=value1;LEETCODE_SESSION=value2;...'
2025-07-24 10:31:06,353 [ERROR] __main__.py:160 - Cookies not valid. Copy them from the Network tab of your browser by clicking on any leetcode.com request and going in Request Headers > cookie. Check README.md file for more information
2025-07-24 10:31:38,047 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-07-24 10:31:38,047 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-24 10:31:54,664 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-07-24 10:31:55,318 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-07-24 10:31:55,319 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1709236092,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"28Â minutes","timestamp":1753331620,"status":10,"status_display":"Accepted","runtime":"1290 ms","url":"/submissions/detail/1709236092/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\nselect player_id , min(event_date ) as first_login \nfrom Activity \ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":114}],"has_next":true,"last_key":""}
2025-07-24 10:31:56,325 [DEBUG] leetcode.py:112 - User is logged in
2025-07-24 10:31:56,325 [INFO] leetcode.py:95 - Cookie set successful
2025-07-24 10:31:56,325 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-07-24 10:31:57,176 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-07-24 10:31:57,180 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1709236092,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"28\xc2\xa0minutes","timestamp":1753331620,"status":10,"status_display":"Accepted","runtime":"1290 ms","url":"/submissions/detail/1709236092/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect player_id , min(event_date ) as first_login \\nfrom Activity \\ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":114},{"id":1708309019,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"19\xc2\xa0hours, 22\xc2\xa0minutes","timestamp":1753263559,"status":10,"status_display":"Accepted","runtime":"351 ms","url":"/submissions/detail/1708309019/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"SELECT\\n    request_at as Day,\\n    ROUND(SUM(CASE WHEN status LIKE \'cancelled%\' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) * 1.0, 2) as \'Cancellation Rate\'\\nFROM\\n    Trips t\\nJOIN Users uc\\n    ON t.client_id = uc.users_id\\nJOIN Users ud\\n    ON t.driver_id = ud.users_id\\nWHERE\\n    uc.banned = \'No\'\\n    AND ud. banned = \'No\'\\n    AND request_at BETWEEN \'2013-01-01\' AND \'2013-10-03\'\\nGROUP BY\\n    request_at\\nORDER BY\\n    request_at\\n\\n-- WITH cte_a AS (\\n--     -- Only include trips where both client and driver are not banned\\n--     SELECT * \\n--     FROM Trips\\n--     WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n--       AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n-- ), \\n-- cte_total_cnt AS (\\n--     -- Count total unbanned requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_total_request\\n--     FROM cte_a \\n--     GROUP BY request_at\\n-- ),\\n-- cte_cancelled_cnt AS (\\n--     -- Count unbanned cancelled requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_cancelled\\n--     FROM cte_a\\n--     WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n--     GROUP BY request_at\\n-- )\\n-- SELECT \\n--     t.request_at AS Day,\\n--     ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\n-- FROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\n-- ON t.request_at = c.request_at\\n-- WHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\n-- ORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":113},{"id":1708304798,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"19\xc2\xa0hours, 27\xc2\xa0minutes","timestamp":1753263298,"status":10,"status_display":"Accepted","runtime":"483 ms","url":"/submissions/detail/1708304798/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"WITH cte_a AS (\\n    -- Only include trips where both client and driver are not banned\\n    SELECT * \\n    FROM Trips\\n    WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n      AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n), \\ncte_total_cnt AS (\\n    -- Count total unbanned requests per day\\n    SELECT request_at, COUNT(*) AS cnt_total_request\\n    FROM cte_a \\n    GROUP BY request_at\\n),\\ncte_cancelled_cnt AS (\\n    -- Count unbanned cancelled requests per day\\n    SELECT request_at, COUNT(*) AS cnt_cancelled\\n    FROM cte_a\\n    WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n    GROUP BY request_at\\n)\\nSELECT \\n    t.request_at AS Day,\\n    ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\nFROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\nON t.request_at = c.request_at\\nWHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\nORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":112},{"id":1707070691,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 18\xc2\xa0hours","timestamp":1753179134,"status":10,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/1707070691/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"WITH helper AS\\n(\\n    SELECT \\n        E.name Employee, \\n        E.salary Salary,\\n        D.name Department,\\n        DENSE_RANK() OVER (PARTITION BY D.id ORDER BY salary DESC) rank\\n    FROM Employee E JOIN Department D\\n    ON D.id = E.departmentId\\n)\\nSELECT \\n    Employee, \\n    Salary,\\n    Department\\nFROM helper\\nWHERE rank < 4;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":111},{"id":1707069861,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 18\xc2\xa0hours","timestamp":1753179084,"status":10,"status_display":"Accepted","runtime":"768 ms","url":"/submissions/detail/1707069861/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(\\nselect *, dense_rank() over(partition by e.departmentId order by e.salary desc) as rn\\nfrom Employee e \\n)\\nselect d.name as Department , e.name as Employee , e.salary\\nfrom cte_ranked e\\njoin Department d on e.departmentId = d.id \\nwhere rn <= 3","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":110},{"id":1705582347,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 22\xc2\xa0hours","timestamp":1753080312,"status":10,"status_display":"Accepted","runtime":"394 ms","url":"/submissions/detail/1705582347/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1703090868,"question_id":178,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752902814,"status":10,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/1703090868/","is_pending":"Not Pending","title":"Rank Scores","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT SCORE, DENSE_RANK() OVER(ORDER BY SCORE DESC) AS RANK\\nFROM SCORES\\n","compare_result":"11111111111","title_slug":"rank-scores","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95}],"has_next":true,"last_key":""}'
2025-07-24 10:31:57,720 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:31:57,724 [INFO] __main__.py:245 - Writing game-play-analysis-i/2025-07-24 10.03.40 - Accepted - runtime 1290ms - memory 0.0B.sql
2025-07-24 10:31:58,088 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:31:58,097 [INFO] __main__.py:251 - trips-and-users/2025-07-23 15.09.19 - Accepted - runtime 351ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:31:58,097 [INFO] __main__.py:245 - Writing trips-and-users/2025-07-23 15.04.58 - Accepted - runtime 483ms - memory 0.0B.sql
2025-07-24 10:31:58,458 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:31:58,467 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-22 15.42.14 - Accepted - runtime 459ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:31:58,468 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-22 15.41.24 - Accepted - runtime 768ms - memory 0.0B.sql
2025-07-24 10:31:58,858 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:31:58,861 [INFO] __main__.py:251 - department-highest-salary/2025-07-21 12.15.12 - Accepted - runtime 394ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:31:58,862 [INFO] __main__.py:245 - Writing department-highest-salary/2025-07-21 09.48.07 - Accepted - runtime 420ms - memory 0.0B.sql
2025-07-24 10:31:59,317 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:31:59,329 [INFO] __main__.py:251 - rank-scores/2025-07-19 10.56.54 - Accepted - runtime 362ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:31:59,733 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:31:59,742 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:31:59,744 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql
2025-07-24 10:31:59,745 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql
2025-07-24 10:31:59,746 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:00,378 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:00,386 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:00,386 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:00,388 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:00,389 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:00,390 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:00,392 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:00,393 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:00,394 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:05,411 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-07-24 10:32:06,052 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-07-24 10:32:06,076 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75}],"has_next":true,"last_key":""}'
2025-07-24 10:32:06,077 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:06,078 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:06,468 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:06,470 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:06,828 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:06,833 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:07,192 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:07,199 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:07,548 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:07,551 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:07,897 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:07,901 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:07,902 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:07,904 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:07,911 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:08,897 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:08,899 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:08,900 [INFO] __main__.py:245 - Writing fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:08,902 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql
2025-07-24 10:32:09,352 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:09,352 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:09,352 [INFO] __main__.py:245 - Writing investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:09,863 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:09,869 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:10,221 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:10,223 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:10,572 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:10,574 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:10,577 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql
2025-07-24 10:32:10,580 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:15,584 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-07-24 10:32:16,688 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-07-24 10:32:16,689 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55}],"has_next":true,"last_key":""}'
2025-07-24 10:32:17,066 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:17,071 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:17,071 [INFO] __main__.py:245 - Writing exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:17,465 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:17,473 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:17,475 [INFO] __main__.py:245 - Writing employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:18,270 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:18,277 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:18,723 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:18,728 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:19,073 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:19,082 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:19,084 [INFO] __main__.py:245 - Writing product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql
2025-07-24 10:32:19,433 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:19,436 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:19,437 [INFO] __main__.py:245 - Writing consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:20,626 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:20,630 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:20,989 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:20,997 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:21,369 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:21,371 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:21,374 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:21,374 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:21,378 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:21,831 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:21,834 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:21,835 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:21,838 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:22,189 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:22,189 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:27,197 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-07-24 10:32:27,908 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-07-24 10:32:27,908 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35}],"has_next":true,"last_key":""}'
2025-07-24 10:32:28,978 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:28,981 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:29,629 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:29,630 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:30,168 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:30,176 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:30,178 [INFO] __main__.py:245 - Writing product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:30,622 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:30,624 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:30,626 [INFO] __main__.py:245 - Writing user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:30,997 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:30,997 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:31,589 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:31,591 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:32,028 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:32,029 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:32,935 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:32,936 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:33,298 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:33,298 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:33,656 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:33,658 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:34,046 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:34,048 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:34,417 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:34,433 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:34,825 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:34,827 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:34,828 [INFO] __main__.py:245 - Writing average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql
2025-07-24 10:32:35,231 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:35,233 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:35,233 [INFO] __main__.py:245 - Writing confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:37,181 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:37,183 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:37,525 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:37,527 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:42,532 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-07-24 10:32:42,917 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-07-24 10:32:42,917 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1029511014,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792516,"status":10,"status_display":"Accepted","runtime":"1642 ms","url":"/submissions/detail/1029511014/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1029510363,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792466,"status":10,"status_display":"Accepted","runtime":"1053 ms","url":"/submissions/detail/1029510363/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":15}],"has_next":true,"last_key":""}'
2025-07-24 10:32:43,384 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:43,395 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:43,981 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:43,984 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:43,984 [INFO] __main__.py:245 - Writing average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:32:44,393 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:44,396 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:44,755 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:44,759 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:45,531 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:45,539 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:45,948 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:45,948 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:46,367 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:46,367 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:46,774 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:46,777 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:47,181 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:47,188 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:47,538 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:47,541 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:48,010 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:48,010 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:48,862 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:48,864 [INFO] __main__.py:251 - customer-placing-the-largest-number-of-orders/2024-08-11 22.33.14 - Accepted - runtime 444ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:49,243 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:49,252 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2024-08-08 15.31.19 - Accepted - runtime 1265ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:49,763 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:49,764 [INFO] __main__.py:251 - top-travellers/2024-08-02 22.39.39 - Accepted - runtime 843ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:49,765 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.53.10 - Accepted - runtime 1344ms - memory 0.0B.sql
2025-07-24 10:32:49,773 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.48.36 - Runtime Error - runtime NA - memory NA.sql
2025-07-24 10:32:49,774 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-25 10.40.12 - Accepted - runtime 1338ms - memory 0.0B.sql
2025-07-24 10:32:49,776 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.38.36 - Accepted - runtime 1642ms - memory 0.0B.sql
2025-07-24 10:32:49,778 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.37.46 - Accepted - runtime 1053ms - memory 0.0B.sql
2025-07-24 10:32:54,780 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-07-24 10:32:55,426 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-07-24 10:32:55,427 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1016455334,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573885,"status":10,"status_display":"Accepted","runtime":"1095 ms","url":"/submissions/detail/1016455334/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1016455058,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573858,"status":10,"status_display":"Accepted","runtime":"2190 ms","url":"/submissions/detail/1016455058/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1009234981,"question_id":183,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690881420,"status":10,"status_display":"Accepted","runtime":"724 ms","url":"/submissions/detail/1009234981/","is_pending":"Not Pending","title":"Customers Who Never Order","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as customers from Customers where id not in(select customerid from orders)","compare_result":"111111111111","title_slug":"customers-who-never-order","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1009161386,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874221,"status":10,"status_display":"Accepted","runtime":"875 ms","url":"/submissions/detail/1009161386/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1009161138,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874197,"status":10,"status_display":"Accepted","runtime":"1543 ms","url":"/submissions/detail/1009161138/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1004211677,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690353557,"status":10,"status_display":"Accepted","runtime":"981 ms","url":"/submissions/detail/1004211677/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as Employee from Employee e1 where salary > (select salary from Employee where id = e1.managerId)","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1004210595,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690353467,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1004210595/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\nselect * from Employee e1 where salary > (select salary from Emplpoyee where id = e1.managerId)","compare_result":"00000000000000","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1003745627,"question_id":175,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690304358,"status":10,"status_display":"Accepted","runtime":"1086 ms","url":"/submissions/detail/1003745627/","is_pending":"Not Pending","title":"Combine Two Tables","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect FirstName, LastName, city, state from person left join address \\r\\non person.personId = address.personId ","compare_result":"11111111","title_slug":"combine-two-tables","has_notes":false,"flag_type":1,"frontend_id":7},{"id":842546003,"question_id":327,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668329684,"status":10,"status_display":"Accepted","runtime":"2624 ms","url":"/submissions/detail/842546003/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"100.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} lower\\n * @param {number} upper\\n * @return {number}\\n */\\nvar countRangeSum = function(nums, lower, upper) {\\n    let preSum = Array(nums.length + 1).fill(0);\\n  let count = 0;\\n\\n  // create preSum array, use preSum to check the sum range\\n  for (let i = 0; i < nums.length; i++) {\\n      preSum[i + 1] = preSum[i] + nums[i];\\n  }\\n\\n  const sort = function(preSum) {\\n      if (preSum.length === 1) return preSum;\\n\\n      let mid = Math.floor(preSum.length / 2);\\n      let left = sort(preSum.slice(0, mid));\\n      let right = sort(preSum.slice(mid))\\n\\n      return merge(left, right);\\n  }\\n\\n  const merge = function(left, right) {\\n      let start = 0;\\n      let end = 0;\\n\\n      for (let i = 0; i < left.length; i++) {\\n          // all elements before start index, after subtracting left[i] are less than lower, which means all elements after start index are bigger or equal than lower\\n          while (start < right.length && right[start] - left[i] < lower) {\\n              start++;\\n          }\\n          // similarly, all elements before end index are less or euqal then upper\\n          while (end < right.length && right[end] - left[i] <= upper) {\\n              end++;\\n          }\\n\\n          // since the initial values of start and end are the same, and upper >= lower, so end will >= start too, which means the rest of the end minus start element difference will fall between [lower, upper].\\n          count += end - start;\\n      }\\n\\n      let sort = [];\\n      while (left.length && right.length) {\\n          if (left[0] <= right[0]) {\\n              sort.push(left.shift());\\n          } else {\\n              sort.push(right.shift());\\n          }\\n      }\\n\\n      return [...sort, ...left, ...right];\\n  }\\n\\n  sort(preSum);\\n  return count;\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1,"frontend_id":6},{"id":842024680,"question_id":2561,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668266557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/842024680/","is_pending":"Not Pending","title":"Number of Distinct Averages","memory":"N/A","code":"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    for(let i = 0; i < nums.length;i++)\\n    {\\n        let newnums = nums;\\n        let  res = [],max = Math.max(...nums), min = Math.min(...nums);   \\n        res[0] = min, res[1] = max\\n        let avg = (max+min)/2\\n    }\\n    \\n    \\n};","compare_result":"000000000000000000000000000000000000","title_slug":"number-of-distinct-averages","has_notes":false,"flag_type":1,"frontend_id":5},{"id":836960924,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591646,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/836960924/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"42.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":4},{"id":836960390,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591580,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/836960390/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"43 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":3},{"id":831406918,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666877523,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/831406918/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":2},{"id":831395512,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666876149,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/831395512/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-07-24 10:32:55,429 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.08.05 - Accepted - runtime 1095ms - memory 0.0B.sql
2025-07-24 10:32:55,431 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.07.38 - Accepted - runtime 2190ms - memory 0.0B.sql
2025-07-24 10:32:55,930 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:56,158 [INFO] __main__.py:251 - customers-who-never-order/2023-08-01 14.47.00 - Accepted - runtime 724ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:56,737 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:56,916 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.47.01 - Accepted - runtime 875ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:56,918 [INFO] __main__.py:245 - Writing duplicate-emails/2023-08-01 12.46.37 - Accepted - runtime 1543ms - memory 0.0B.sql
2025-07-24 10:32:56,918 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.09.17 - Accepted - runtime 981ms - memory 0.0B.sql
2025-07-24 10:32:57,134 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.07.47 - Runtime Error - runtime NA - memory NA.sql
2025-07-24 10:32:57,477 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:57,754 [INFO] __main__.py:251 - combine-two-tables/2023-07-25 22.29.18 - Accepted - runtime 1086ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:32:58,206 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:58,211 [INFO] __main__.py:251 - count-of-range-sum/2022-11-13 14.24.44 - Accepted - runtime 2624ms - memory 100.9MB.js already exists, skipping it
2025-07-24 10:32:58,582 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:58,589 [INFO] __main__.py:251 - number-of-distinct-averages/2022-11-12 20.52.37 - Wrong Answer - runtime NA - memory NA.js already exists, skipping it
2025-07-24 10:32:58,936 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:58,948 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.24.06 - Accepted - runtime 91ms - memory 42.9MB.js already exists, skipping it
2025-07-24 10:32:58,948 [INFO] __main__.py:245 - Writing find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.23.00 - Accepted - runtime 96ms - memory 43MB.js
2025-07-24 10:32:59,537 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:32:59,537 [INFO] __main__.py:251 - valid-anagram/2022-10-27 19.02.03 - Accepted - runtime 171ms - memory 49.4MB.js already exists, skipping it
2025-07-24 10:32:59,541 [INFO] __main__.py:245 - Writing valid-anagram/2022-10-27 18.39.09 - Accepted - runtime 122ms - memory 49.4MB.js
2025-07-24 10:39:10,759 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-07-24 10:39:10,759 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-24 10:40:01,381 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-07-24 10:40:02,964 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-07-24 10:40:03,014 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1709236092,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"36Â minutes","timestamp":1753331620,"status":10,"status_display":"Accepted","runtime":"1290 ms","url":"/submissions/detail/1709236092/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\nselect player_id , min(event_date ) as first_login \nfrom Activity \ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":114}],"has_next":true,"last_key":""}
2025-07-24 10:40:04,018 [DEBUG] leetcode.py:112 - User is logged in
2025-07-24 10:40:04,018 [INFO] leetcode.py:95 - Cookie set successful
2025-07-24 10:40:04,018 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-07-24 10:40:04,546 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-07-24 10:40:04,546 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1709236092,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"36\xc2\xa0minutes","timestamp":1753331620,"status":10,"status_display":"Accepted","runtime":"1290 ms","url":"/submissions/detail/1709236092/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect player_id , min(event_date ) as first_login \\nfrom Activity \\ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":114},{"id":1708309019,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"19\xc2\xa0hours, 30\xc2\xa0minutes","timestamp":1753263559,"status":10,"status_display":"Accepted","runtime":"351 ms","url":"/submissions/detail/1708309019/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"SELECT\\n    request_at as Day,\\n    ROUND(SUM(CASE WHEN status LIKE \'cancelled%\' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) * 1.0, 2) as \'Cancellation Rate\'\\nFROM\\n    Trips t\\nJOIN Users uc\\n    ON t.client_id = uc.users_id\\nJOIN Users ud\\n    ON t.driver_id = ud.users_id\\nWHERE\\n    uc.banned = \'No\'\\n    AND ud. banned = \'No\'\\n    AND request_at BETWEEN \'2013-01-01\' AND \'2013-10-03\'\\nGROUP BY\\n    request_at\\nORDER BY\\n    request_at\\n\\n-- WITH cte_a AS (\\n--     -- Only include trips where both client and driver are not banned\\n--     SELECT * \\n--     FROM Trips\\n--     WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n--       AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n-- ), \\n-- cte_total_cnt AS (\\n--     -- Count total unbanned requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_total_request\\n--     FROM cte_a \\n--     GROUP BY request_at\\n-- ),\\n-- cte_cancelled_cnt AS (\\n--     -- Count unbanned cancelled requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_cancelled\\n--     FROM cte_a\\n--     WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n--     GROUP BY request_at\\n-- )\\n-- SELECT \\n--     t.request_at AS Day,\\n--     ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\n-- FROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\n-- ON t.request_at = c.request_at\\n-- WHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\n-- ORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":113},{"id":1708304798,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"19\xc2\xa0hours, 35\xc2\xa0minutes","timestamp":1753263298,"status":10,"status_display":"Accepted","runtime":"483 ms","url":"/submissions/detail/1708304798/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"WITH cte_a AS (\\n    -- Only include trips where both client and driver are not banned\\n    SELECT * \\n    FROM Trips\\n    WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n      AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n), \\ncte_total_cnt AS (\\n    -- Count total unbanned requests per day\\n    SELECT request_at, COUNT(*) AS cnt_total_request\\n    FROM cte_a \\n    GROUP BY request_at\\n),\\ncte_cancelled_cnt AS (\\n    -- Count unbanned cancelled requests per day\\n    SELECT request_at, COUNT(*) AS cnt_cancelled\\n    FROM cte_a\\n    WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n    GROUP BY request_at\\n)\\nSELECT \\n    t.request_at AS Day,\\n    ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\nFROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\nON t.request_at = c.request_at\\nWHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\nORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":112},{"id":1707070691,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 18\xc2\xa0hours","timestamp":1753179134,"status":10,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/1707070691/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"WITH helper AS\\n(\\n    SELECT \\n        E.name Employee, \\n        E.salary Salary,\\n        D.name Department,\\n        DENSE_RANK() OVER (PARTITION BY D.id ORDER BY salary DESC) rank\\n    FROM Employee E JOIN Department D\\n    ON D.id = E.departmentId\\n)\\nSELECT \\n    Employee, \\n    Salary,\\n    Department\\nFROM helper\\nWHERE rank < 4;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":111},{"id":1707069861,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 18\xc2\xa0hours","timestamp":1753179084,"status":10,"status_display":"Accepted","runtime":"768 ms","url":"/submissions/detail/1707069861/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(\\nselect *, dense_rank() over(partition by e.departmentId order by e.salary desc) as rn\\nfrom Employee e \\n)\\nselect d.name as Department , e.name as Employee , e.salary\\nfrom cte_ranked e\\njoin Department d on e.departmentId = d.id \\nwhere rn <= 3","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":110},{"id":1705582347,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 22\xc2\xa0hours","timestamp":1753080312,"status":10,"status_display":"Accepted","runtime":"394 ms","url":"/submissions/detail/1705582347/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1703090868,"question_id":178,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752902814,"status":10,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/1703090868/","is_pending":"Not Pending","title":"Rank Scores","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT SCORE, DENSE_RANK() OVER(ORDER BY SCORE DESC) AS RANK\\nFROM SCORES\\n","compare_result":"11111111111","title_slug":"rank-scores","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95}],"has_next":true,"last_key":""}'
2025-07-24 10:40:05,062 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:05,063 [INFO] __main__.py:251 - game-play-analysis-i/2025-07-24 10.03.40 - Accepted - runtime 1290ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:05,645 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:05,646 [INFO] __main__.py:251 - trips-and-users/2025-07-23 15.09.19 - Accepted - runtime 351ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:05,648 [INFO] __main__.py:245 - Writing trips-and-users/2025-07-23 15.04.58 - Accepted - runtime 483ms - memory 0.0B.sql
2025-07-24 10:40:06,198 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:06,200 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-22 15.42.14 - Accepted - runtime 459ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:06,200 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-22 15.41.24 - Accepted - runtime 768ms - memory 0.0B.sql
2025-07-24 10:40:06,713 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:06,715 [INFO] __main__.py:251 - department-highest-salary/2025-07-21 12.15.12 - Accepted - runtime 394ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:06,715 [INFO] __main__.py:245 - Writing department-highest-salary/2025-07-21 09.48.07 - Accepted - runtime 420ms - memory 0.0B.sql
2025-07-24 10:40:07,146 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:07,149 [INFO] __main__.py:251 - rank-scores/2025-07-19 10.56.54 - Accepted - runtime 362ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:08,189 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:08,194 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:08,194 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql
2025-07-24 10:40:08,199 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql
2025-07-24 10:40:08,201 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:08,579 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:08,582 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:08,582 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:08,585 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:08,587 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:08,590 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:08,593 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:08,596 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:08,598 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:13,600 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-07-24 10:40:14,163 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-07-24 10:40:14,197 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75}],"has_next":true,"last_key":""}'
2025-07-24 10:40:14,199 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:14,203 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:14,620 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:14,626 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:15,070 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:15,072 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:15,574 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:15,576 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:16,181 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:16,183 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:16,531 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:16,534 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:16,535 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:16,538 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:16,542 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:17,558 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:17,561 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:17,562 [INFO] __main__.py:245 - Writing fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:17,566 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql
2025-07-24 10:40:18,092 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:18,094 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:18,096 [INFO] __main__.py:245 - Writing investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:18,881 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:18,884 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:19,340 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:19,341 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:20,071 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:20,073 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:20,074 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql
2025-07-24 10:40:20,085 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:25,091 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-07-24 10:40:25,486 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-07-24 10:40:25,505 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55}],"has_next":true,"last_key":""}'
2025-07-24 10:40:26,335 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:26,337 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:26,338 [INFO] __main__.py:245 - Writing exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:26,683 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:26,687 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:26,689 [INFO] __main__.py:245 - Writing employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:27,046 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:27,050 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:27,467 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:27,468 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:27,831 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:27,835 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:27,836 [INFO] __main__.py:245 - Writing product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql
2025-07-24 10:40:28,185 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:28,187 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:28,188 [INFO] __main__.py:245 - Writing consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:29,039 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:29,041 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:29,416 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:29,418 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:29,775 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:29,778 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:29,779 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:29,782 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:29,784 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:30,168 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:30,170 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:30,171 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:30,173 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:30,600 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:30,603 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:35,657 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-07-24 10:40:36,140 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-07-24 10:40:36,143 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35}],"has_next":true,"last_key":""}'
2025-07-24 10:40:36,669 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:36,672 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:37,062 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:37,067 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:37,836 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:37,838 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:37,876 [INFO] __main__.py:245 - Writing product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:38,609 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:38,610 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:38,611 [INFO] __main__.py:245 - Writing user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:39,247 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:39,250 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:40,019 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:40,044 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:40,425 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:40,428 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:41,101 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:41,106 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:41,519 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:41,524 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:42,021 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:42,024 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:42,531 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:42,535 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:42,902 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:42,904 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:43,286 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:43,289 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:43,294 [INFO] __main__.py:245 - Writing average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql
2025-07-24 10:40:43,729 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:43,735 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:43,738 [INFO] __main__.py:245 - Writing confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:44,155 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:44,200 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:44,999 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:45,012 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:50,034 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-07-24 10:40:50,461 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-07-24 10:40:50,539 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1029511014,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792516,"status":10,"status_display":"Accepted","runtime":"1642 ms","url":"/submissions/detail/1029511014/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1029510363,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792466,"status":10,"status_display":"Accepted","runtime":"1053 ms","url":"/submissions/detail/1029510363/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":15}],"has_next":true,"last_key":""}'
2025-07-24 10:40:50,918 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:50,920 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:51,268 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:51,275 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:51,278 [INFO] __main__.py:245 - Writing average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql
2025-07-24 10:40:52,024 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:52,026 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:52,478 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:52,481 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:54,052 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:54,053 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:54,936 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:54,938 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:55,274 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:55,277 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:55,667 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:55,669 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:56,011 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:56,013 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:56,350 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:56,355 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:57,423 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:57,424 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:57,758 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:57,765 [INFO] __main__.py:251 - customer-placing-the-largest-number-of-orders/2024-08-11 22.33.14 - Accepted - runtime 444ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:58,185 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:58,186 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2024-08-08 15.31.19 - Accepted - runtime 1265ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:58,678 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:40:58,679 [INFO] __main__.py:251 - top-travellers/2024-08-02 22.39.39 - Accepted - runtime 843ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:40:58,680 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.53.10 - Accepted - runtime 1344ms - memory 0.0B.sql
2025-07-24 10:40:58,682 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.48.36 - Runtime Error - runtime NA - memory NA.sql
2025-07-24 10:40:58,684 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-25 10.40.12 - Accepted - runtime 1338ms - memory 0.0B.sql
2025-07-24 10:40:58,686 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.38.36 - Accepted - runtime 1642ms - memory 0.0B.sql
2025-07-24 10:40:58,687 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.37.46 - Accepted - runtime 1053ms - memory 0.0B.sql
2025-07-24 10:41:03,696 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-07-24 10:41:04,101 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-07-24 10:41:04,102 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1016455334,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573885,"status":10,"status_display":"Accepted","runtime":"1095 ms","url":"/submissions/detail/1016455334/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1016455058,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573858,"status":10,"status_display":"Accepted","runtime":"2190 ms","url":"/submissions/detail/1016455058/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1009234981,"question_id":183,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690881420,"status":10,"status_display":"Accepted","runtime":"724 ms","url":"/submissions/detail/1009234981/","is_pending":"Not Pending","title":"Customers Who Never Order","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as customers from Customers where id not in(select customerid from orders)","compare_result":"111111111111","title_slug":"customers-who-never-order","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1009161386,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874221,"status":10,"status_display":"Accepted","runtime":"875 ms","url":"/submissions/detail/1009161386/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1009161138,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874197,"status":10,"status_display":"Accepted","runtime":"1543 ms","url":"/submissions/detail/1009161138/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1004211677,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690353557,"status":10,"status_display":"Accepted","runtime":"981 ms","url":"/submissions/detail/1004211677/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as Employee from Employee e1 where salary > (select salary from Employee where id = e1.managerId)","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1004210595,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690353467,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1004210595/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\nselect * from Employee e1 where salary > (select salary from Emplpoyee where id = e1.managerId)","compare_result":"00000000000000","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1003745627,"question_id":175,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690304358,"status":10,"status_display":"Accepted","runtime":"1086 ms","url":"/submissions/detail/1003745627/","is_pending":"Not Pending","title":"Combine Two Tables","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect FirstName, LastName, city, state from person left join address \\r\\non person.personId = address.personId ","compare_result":"11111111","title_slug":"combine-two-tables","has_notes":false,"flag_type":1,"frontend_id":7},{"id":842546003,"question_id":327,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668329684,"status":10,"status_display":"Accepted","runtime":"2624 ms","url":"/submissions/detail/842546003/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"100.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} lower\\n * @param {number} upper\\n * @return {number}\\n */\\nvar countRangeSum = function(nums, lower, upper) {\\n    let preSum = Array(nums.length + 1).fill(0);\\n  let count = 0;\\n\\n  // create preSum array, use preSum to check the sum range\\n  for (let i = 0; i < nums.length; i++) {\\n      preSum[i + 1] = preSum[i] + nums[i];\\n  }\\n\\n  const sort = function(preSum) {\\n      if (preSum.length === 1) return preSum;\\n\\n      let mid = Math.floor(preSum.length / 2);\\n      let left = sort(preSum.slice(0, mid));\\n      let right = sort(preSum.slice(mid))\\n\\n      return merge(left, right);\\n  }\\n\\n  const merge = function(left, right) {\\n      let start = 0;\\n      let end = 0;\\n\\n      for (let i = 0; i < left.length; i++) {\\n          // all elements before start index, after subtracting left[i] are less than lower, which means all elements after start index are bigger or equal than lower\\n          while (start < right.length && right[start] - left[i] < lower) {\\n              start++;\\n          }\\n          // similarly, all elements before end index are less or euqal then upper\\n          while (end < right.length && right[end] - left[i] <= upper) {\\n              end++;\\n          }\\n\\n          // since the initial values of start and end are the same, and upper >= lower, so end will >= start too, which means the rest of the end minus start element difference will fall between [lower, upper].\\n          count += end - start;\\n      }\\n\\n      let sort = [];\\n      while (left.length && right.length) {\\n          if (left[0] <= right[0]) {\\n              sort.push(left.shift());\\n          } else {\\n              sort.push(right.shift());\\n          }\\n      }\\n\\n      return [...sort, ...left, ...right];\\n  }\\n\\n  sort(preSum);\\n  return count;\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1,"frontend_id":6},{"id":842024680,"question_id":2561,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668266557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/842024680/","is_pending":"Not Pending","title":"Number of Distinct Averages","memory":"N/A","code":"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    for(let i = 0; i < nums.length;i++)\\n    {\\n        let newnums = nums;\\n        let  res = [],max = Math.max(...nums), min = Math.min(...nums);   \\n        res[0] = min, res[1] = max\\n        let avg = (max+min)/2\\n    }\\n    \\n    \\n};","compare_result":"000000000000000000000000000000000000","title_slug":"number-of-distinct-averages","has_notes":false,"flag_type":1,"frontend_id":5},{"id":836960924,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591646,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/836960924/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"42.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":4},{"id":836960390,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591580,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/836960390/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"43 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":3},{"id":831406918,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666877523,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/831406918/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":2},{"id":831395512,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666876149,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/831395512/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-07-24 10:41:04,103 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.08.05 - Accepted - runtime 1095ms - memory 0.0B.sql
2025-07-24 10:41:04,105 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.07.38 - Accepted - runtime 2190ms - memory 0.0B.sql
2025-07-24 10:41:04,463 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:41:04,467 [INFO] __main__.py:251 - customers-who-never-order/2023-08-01 14.47.00 - Accepted - runtime 724ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:41:05,669 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:41:05,671 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.47.01 - Accepted - runtime 875ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:41:05,672 [INFO] __main__.py:245 - Writing duplicate-emails/2023-08-01 12.46.37 - Accepted - runtime 1543ms - memory 0.0B.sql
2025-07-24 10:41:05,673 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.09.17 - Accepted - runtime 981ms - memory 0.0B.sql
2025-07-24 10:41:05,676 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.07.47 - Runtime Error - runtime NA - memory NA.sql
2025-07-24 10:41:06,035 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:41:06,040 [INFO] __main__.py:251 - combine-two-tables/2023-07-25 22.29.18 - Accepted - runtime 1086ms - memory 0.0B.sql already exists, skipping it
2025-07-24 10:41:06,421 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:41:06,422 [INFO] __main__.py:251 - count-of-range-sum/2022-11-13 14.24.44 - Accepted - runtime 2624ms - memory 100.9MB.js already exists, skipping it
2025-07-24 10:41:06,978 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:41:06,981 [INFO] __main__.py:251 - number-of-distinct-averages/2022-11-12 20.52.37 - Wrong Answer - runtime NA - memory NA.js already exists, skipping it
2025-07-24 10:41:07,358 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:41:07,360 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.24.06 - Accepted - runtime 91ms - memory 42.9MB.js already exists, skipping it
2025-07-24 10:41:07,361 [INFO] __main__.py:245 - Writing find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.23.00 - Accepted - runtime 96ms - memory 43MB.js
2025-07-24 10:41:07,714 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 10:41:07,716 [INFO] __main__.py:251 - valid-anagram/2022-10-27 19.02.03 - Accepted - runtime 171ms - memory 49.4MB.js already exists, skipping it
2025-07-24 10:41:07,716 [INFO] __main__.py:245 - Writing valid-anagram/2022-10-27 18.39.09 - Accepted - runtime 122ms - memory 49.4MB.js
2025-07-24 10:58:01,107 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-07-24 10:58:01,111 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-24 11:00:39,959 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-07-24 11:00:41,524 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-07-24 11:00:41,526 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1709286509,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"3Â minutes","timestamp":1753334822,"status":10,"status_display":"Accepted","runtime":"1294 ms","url":"/submissions/detail/1709286509/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\nselect player_id , min(event_date ) as first_login \nfrom Activity \ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":115}],"has_next":true,"last_key":""}
2025-07-24 11:00:42,541 [DEBUG] leetcode.py:112 - User is logged in
2025-07-24 11:00:42,541 [INFO] leetcode.py:95 - Cookie set successful
2025-07-24 11:00:42,541 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-07-24 11:00:43,011 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-07-24 11:00:43,025 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1709286509,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0minutes","timestamp":1753334822,"status":10,"status_display":"Accepted","runtime":"1294 ms","url":"/submissions/detail/1709286509/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect player_id , min(event_date ) as first_login \\nfrom Activity \\ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":115},{"id":1709236092,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"57\xc2\xa0minutes","timestamp":1753331620,"status":10,"status_display":"Accepted","runtime":"1290 ms","url":"/submissions/detail/1709236092/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect player_id , min(event_date ) as first_login \\nfrom Activity \\ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":114},{"id":1708309019,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"19\xc2\xa0hours, 51\xc2\xa0minutes","timestamp":1753263559,"status":10,"status_display":"Accepted","runtime":"351 ms","url":"/submissions/detail/1708309019/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"SELECT\\n    request_at as Day,\\n    ROUND(SUM(CASE WHEN status LIKE \'cancelled%\' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) * 1.0, 2) as \'Cancellation Rate\'\\nFROM\\n    Trips t\\nJOIN Users uc\\n    ON t.client_id = uc.users_id\\nJOIN Users ud\\n    ON t.driver_id = ud.users_id\\nWHERE\\n    uc.banned = \'No\'\\n    AND ud. banned = \'No\'\\n    AND request_at BETWEEN \'2013-01-01\' AND \'2013-10-03\'\\nGROUP BY\\n    request_at\\nORDER BY\\n    request_at\\n\\n-- WITH cte_a AS (\\n--     -- Only include trips where both client and driver are not banned\\n--     SELECT * \\n--     FROM Trips\\n--     WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n--       AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n-- ), \\n-- cte_total_cnt AS (\\n--     -- Count total unbanned requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_total_request\\n--     FROM cte_a \\n--     GROUP BY request_at\\n-- ),\\n-- cte_cancelled_cnt AS (\\n--     -- Count unbanned cancelled requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_cancelled\\n--     FROM cte_a\\n--     WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n--     GROUP BY request_at\\n-- )\\n-- SELECT \\n--     t.request_at AS Day,\\n--     ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\n-- FROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\n-- ON t.request_at = c.request_at\\n-- WHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\n-- ORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":113},{"id":1708304798,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"19\xc2\xa0hours, 55\xc2\xa0minutes","timestamp":1753263298,"status":10,"status_display":"Accepted","runtime":"483 ms","url":"/submissions/detail/1708304798/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"WITH cte_a AS (\\n    -- Only include trips where both client and driver are not banned\\n    SELECT * \\n    FROM Trips\\n    WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n      AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n), \\ncte_total_cnt AS (\\n    -- Count total unbanned requests per day\\n    SELECT request_at, COUNT(*) AS cnt_total_request\\n    FROM cte_a \\n    GROUP BY request_at\\n),\\ncte_cancelled_cnt AS (\\n    -- Count unbanned cancelled requests per day\\n    SELECT request_at, COUNT(*) AS cnt_cancelled\\n    FROM cte_a\\n    WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n    GROUP BY request_at\\n)\\nSELECT \\n    t.request_at AS Day,\\n    ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\nFROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\nON t.request_at = c.request_at\\nWHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\nORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":112},{"id":1707070691,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 19\xc2\xa0hours","timestamp":1753179134,"status":10,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/1707070691/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"WITH helper AS\\n(\\n    SELECT \\n        E.name Employee, \\n        E.salary Salary,\\n        D.name Department,\\n        DENSE_RANK() OVER (PARTITION BY D.id ORDER BY salary DESC) rank\\n    FROM Employee E JOIN Department D\\n    ON D.id = E.departmentId\\n)\\nSELECT \\n    Employee, \\n    Salary,\\n    Department\\nFROM helper\\nWHERE rank < 4;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":111},{"id":1707069861,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 19\xc2\xa0hours","timestamp":1753179084,"status":10,"status_display":"Accepted","runtime":"768 ms","url":"/submissions/detail/1707069861/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(\\nselect *, dense_rank() over(partition by e.departmentId order by e.salary desc) as rn\\nfrom Employee e \\n)\\nselect d.name as Department , e.name as Employee , e.salary\\nfrom cte_ranked e\\njoin Department d on e.departmentId = d.id \\nwhere rn <= 3","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":110},{"id":1705582347,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 22\xc2\xa0hours","timestamp":1753080312,"status":10,"status_display":"Accepted","runtime":"394 ms","url":"/submissions/detail/1705582347/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 1\xc2\xa0hour","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1703090868,"question_id":178,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days","timestamp":1752902814,"status":10,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/1703090868/","is_pending":"Not Pending","title":"Rank Scores","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT SCORE, DENSE_RANK() OVER(ORDER BY SCORE DESC) AS RANK\\nFROM SCORES\\n","compare_result":"11111111111","title_slug":"rank-scores","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96}],"has_next":true,"last_key":""}'
2025-07-24 11:00:43,929 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:43,933 [INFO] __main__.py:245 - Writing game-play-analysis-i/2025-07-24 10.57.02 - Accepted - runtime 1294ms - memory 0.0B.sql
2025-07-24 11:00:43,939 [INFO] __main__.py:251 - game-play-analysis-i/2025-07-24 10.03.40 - Accepted - runtime 1290ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:44,374 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:44,379 [INFO] __main__.py:251 - trips-and-users/2025-07-23 15.09.19 - Accepted - runtime 351ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:44,381 [INFO] __main__.py:251 - trips-and-users/2025-07-23 15.04.58 - Accepted - runtime 483ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:44,807 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:44,812 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-22 15.42.14 - Accepted - runtime 459ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:44,812 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-22 15.41.24 - Accepted - runtime 768ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:45,259 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:45,263 [INFO] __main__.py:251 - department-highest-salary/2025-07-21 12.15.12 - Accepted - runtime 394ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:45,265 [INFO] __main__.py:251 - department-highest-salary/2025-07-21 09.48.07 - Accepted - runtime 420ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:46,737 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:46,737 [INFO] __main__.py:251 - rank-scores/2025-07-19 10.56.54 - Accepted - runtime 362ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:47,408 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:47,408 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:47,408 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:47,413 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:47,413 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:47,881 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:47,881 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:47,884 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:47,886 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:47,887 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:47,891 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:47,894 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:47,896 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:52,899 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-07-24 11:00:53,594 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-07-24 11:00:53,603 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76}],"has_next":true,"last_key":""}'
2025-07-24 11:00:53,604 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:53,607 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:53,607 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:54,076 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:54,383 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:54,842 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:54,854 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:56,145 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:56,247 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:56,838 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:56,841 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:57,940 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:57,947 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:57,949 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:57,949 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:57,949 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:58,465 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:58,469 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:58,469 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:58,469 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:58,905 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:58,907 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:58,907 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:00:59,347 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:59,351 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:00:59,874 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:00:59,879 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:00,854 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:00,858 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:00,860 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:05,869 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-07-24 11:01:06,334 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-07-24 11:01:06,364 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56}],"has_next":true,"last_key":""}'
2025-07-24 11:01:06,365 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:07,180 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:07,187 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:07,188 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:07,621 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:07,641 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:07,641 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:08,082 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:08,086 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:09,025 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:09,029 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:09,788 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:09,790 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:09,792 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:10,170 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:10,175 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:10,175 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:10,569 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:10,573 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:11,020 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:11,025 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:11,669 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:11,701 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:11,701 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:11,709 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:11,709 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:12,315 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:12,322 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:12,330 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:12,332 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:17,338 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-07-24 11:01:18,076 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-07-24 11:01:18,191 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36}],"has_next":true,"last_key":""}'
2025-07-24 11:01:18,616 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:18,621 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:19,089 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:19,089 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:20,689 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:20,692 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:21,926 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:21,930 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:21,932 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:22,613 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:22,614 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:22,616 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:23,218 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:23,223 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:23,908 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:23,912 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:25,083 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:25,084 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:25,476 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:25,482 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:25,882 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:25,884 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:26,941 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:26,943 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:27,429 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:27,433 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:27,831 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:27,837 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:28,389 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:28,391 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:28,393 [INFO] __main__.py:251 - average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:30,369 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:30,372 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:30,372 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:30,958 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:30,961 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:35,965 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-07-24 11:01:36,737 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-07-24 11:01:36,740 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1029511014,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792516,"status":10,"status_display":"Accepted","runtime":"1642 ms","url":"/submissions/detail/1029511014/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":16}],"has_next":true,"last_key":""}'
2025-07-24 11:01:37,277 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:37,281 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:38,859 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:38,866 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:39,561 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:39,567 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:39,569 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:39,987 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:39,991 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:40,531 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:40,531 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:40,979 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:40,988 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:41,677 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:41,682 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:42,135 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:42,136 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:42,803 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:42,806 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:43,417 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:43,423 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:44,824 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:44,826 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:45,361 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:45,362 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:45,813 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:45,816 [INFO] __main__.py:251 - customer-placing-the-largest-number-of-orders/2024-08-11 22.33.14 - Accepted - runtime 444ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:46,414 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:46,418 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2024-08-08 15.31.19 - Accepted - runtime 1265ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:46,843 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:46,846 [INFO] __main__.py:251 - top-travellers/2024-08-02 22.39.39 - Accepted - runtime 843ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:46,846 [INFO] __main__.py:251 - rising-temperature/2023-09-07 17.53.10 - Accepted - runtime 1344ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:46,846 [INFO] __main__.py:251 - rising-temperature/2023-09-07 17.48.36 - Runtime Error - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:46,846 [INFO] __main__.py:251 - second-highest-salary/2023-08-25 10.40.12 - Accepted - runtime 1338ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:46,851 [INFO] __main__.py:251 - second-highest-salary/2023-08-23 17.38.36 - Accepted - runtime 1642ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:51,857 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-07-24 11:01:52,491 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-07-24 11:01:52,492 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1029510363,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792466,"status":10,"status_display":"Accepted","runtime":"1053 ms","url":"/submissions/detail/1029510363/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1016455334,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573885,"status":10,"status_display":"Accepted","runtime":"1095 ms","url":"/submissions/detail/1016455334/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1016455058,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573858,"status":10,"status_display":"Accepted","runtime":"2190 ms","url":"/submissions/detail/1016455058/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1009234981,"question_id":183,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690881420,"status":10,"status_display":"Accepted","runtime":"724 ms","url":"/submissions/detail/1009234981/","is_pending":"Not Pending","title":"Customers Who Never Order","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as customers from Customers where id not in(select customerid from orders)","compare_result":"111111111111","title_slug":"customers-who-never-order","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1009161386,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874221,"status":10,"status_display":"Accepted","runtime":"875 ms","url":"/submissions/detail/1009161386/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1009161138,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874197,"status":10,"status_display":"Accepted","runtime":"1543 ms","url":"/submissions/detail/1009161138/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1004211677,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690353557,"status":10,"status_display":"Accepted","runtime":"981 ms","url":"/submissions/detail/1004211677/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as Employee from Employee e1 where salary > (select salary from Employee where id = e1.managerId)","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1004210595,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690353467,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1004210595/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\nselect * from Employee e1 where salary > (select salary from Emplpoyee where id = e1.managerId)","compare_result":"00000000000000","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1003745627,"question_id":175,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690304358,"status":10,"status_display":"Accepted","runtime":"1086 ms","url":"/submissions/detail/1003745627/","is_pending":"Not Pending","title":"Combine Two Tables","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect FirstName, LastName, city, state from person left join address \\r\\non person.personId = address.personId ","compare_result":"11111111","title_slug":"combine-two-tables","has_notes":false,"flag_type":1,"frontend_id":7},{"id":842546003,"question_id":327,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668329684,"status":10,"status_display":"Accepted","runtime":"2624 ms","url":"/submissions/detail/842546003/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"100.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} lower\\n * @param {number} upper\\n * @return {number}\\n */\\nvar countRangeSum = function(nums, lower, upper) {\\n    let preSum = Array(nums.length + 1).fill(0);\\n  let count = 0;\\n\\n  // create preSum array, use preSum to check the sum range\\n  for (let i = 0; i < nums.length; i++) {\\n      preSum[i + 1] = preSum[i] + nums[i];\\n  }\\n\\n  const sort = function(preSum) {\\n      if (preSum.length === 1) return preSum;\\n\\n      let mid = Math.floor(preSum.length / 2);\\n      let left = sort(preSum.slice(0, mid));\\n      let right = sort(preSum.slice(mid))\\n\\n      return merge(left, right);\\n  }\\n\\n  const merge = function(left, right) {\\n      let start = 0;\\n      let end = 0;\\n\\n      for (let i = 0; i < left.length; i++) {\\n          // all elements before start index, after subtracting left[i] are less than lower, which means all elements after start index are bigger or equal than lower\\n          while (start < right.length && right[start] - left[i] < lower) {\\n              start++;\\n          }\\n          // similarly, all elements before end index are less or euqal then upper\\n          while (end < right.length && right[end] - left[i] <= upper) {\\n              end++;\\n          }\\n\\n          // since the initial values of start and end are the same, and upper >= lower, so end will >= start too, which means the rest of the end minus start element difference will fall between [lower, upper].\\n          count += end - start;\\n      }\\n\\n      let sort = [];\\n      while (left.length && right.length) {\\n          if (left[0] <= right[0]) {\\n              sort.push(left.shift());\\n          } else {\\n              sort.push(right.shift());\\n          }\\n      }\\n\\n      return [...sort, ...left, ...right];\\n  }\\n\\n  sort(preSum);\\n  return count;\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1,"frontend_id":6},{"id":842024680,"question_id":2561,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668266557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/842024680/","is_pending":"Not Pending","title":"Number of Distinct Averages","memory":"N/A","code":"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    for(let i = 0; i < nums.length;i++)\\n    {\\n        let newnums = nums;\\n        let  res = [],max = Math.max(...nums), min = Math.min(...nums);   \\n        res[0] = min, res[1] = max\\n        let avg = (max+min)/2\\n    }\\n    \\n    \\n};","compare_result":"000000000000000000000000000000000000","title_slug":"number-of-distinct-averages","has_notes":false,"flag_type":1,"frontend_id":5},{"id":836960924,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591646,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/836960924/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"42.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":4},{"id":836960390,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591580,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/836960390/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"43 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":3},{"id":831406918,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666877523,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/831406918/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":2},{"id":831395512,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666876149,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/831395512/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-07-24 11:01:52,494 [INFO] __main__.py:251 - second-highest-salary/2023-08-23 17.37.46 - Accepted - runtime 1053ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:52,495 [INFO] __main__.py:251 - delete-duplicate-emails/2023-08-09 15.08.05 - Accepted - runtime 1095ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:52,496 [INFO] __main__.py:251 - delete-duplicate-emails/2023-08-09 15.07.38 - Accepted - runtime 2190ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:53,330 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:53,330 [INFO] __main__.py:251 - customers-who-never-order/2023-08-01 14.47.00 - Accepted - runtime 724ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:54,025 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:54,028 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.47.01 - Accepted - runtime 875ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:54,031 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.46.37 - Accepted - runtime 1543ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:54,031 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2023-07-26 12.09.17 - Accepted - runtime 981ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:54,031 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2023-07-26 12.07.47 - Runtime Error - runtime NA - memory NA.sql already exists, skipping it
2025-07-24 11:01:54,962 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:54,964 [INFO] __main__.py:251 - combine-two-tables/2023-07-25 22.29.18 - Accepted - runtime 1086ms - memory 0.0B.sql already exists, skipping it
2025-07-24 11:01:55,496 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:55,498 [INFO] __main__.py:251 - count-of-range-sum/2022-11-13 14.24.44 - Accepted - runtime 2624ms - memory 100.9MB.js already exists, skipping it
2025-07-24 11:01:56,406 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:56,406 [INFO] __main__.py:251 - number-of-distinct-averages/2022-11-12 20.52.37 - Wrong Answer - runtime NA - memory NA.js already exists, skipping it
2025-07-24 11:01:58,217 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:58,220 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.24.06 - Accepted - runtime 91ms - memory 42.9MB.js already exists, skipping it
2025-07-24 11:01:58,220 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.23.00 - Accepted - runtime 96ms - memory 43MB.js already exists, skipping it
2025-07-24 11:01:58,653 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-24 11:01:58,663 [INFO] __main__.py:251 - valid-anagram/2022-10-27 19.02.03 - Accepted - runtime 171ms - memory 49.4MB.js already exists, skipping it
2025-07-24 11:01:58,665 [INFO] __main__.py:251 - valid-anagram/2022-10-27 18.39.09 - Accepted - runtime 122ms - memory 49.4MB.js already exists, skipping it
2025-07-25 16:56:22,412 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-07-25 16:56:22,412 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-25 16:57:10,256 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-07-25 16:57:11,228 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-07-25 16:57:11,232 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1710846053,"question_id":601,"lang":"mssql","lang_name":"MS SQL Server","time":"1Â hour","timestamp":1753439210,"status":10,"status_display":"Accepted","runtime":"307 ms","url":"/submissions/detail/1710846053/","is_pending":"Not Pending","title":"Human Traffic of Stadium","memory":"0.0B","code":"with cte as\n(\n    select *, \n    id - row_number() over(order by id) as rnk\n    from stadium\n    where people >= 100\n)\nselect id, visit_date, people\nfrom cte\nwhere rnk in\n(select rnk from cte group by rnk having count(*) >= 3)","compare_result":"111111111111111","title_slug":"human-traffic-of-stadium","has_notes":false,"flag_type":1,"frontend_id":116}],"has_next":true,"last_key":""}
2025-07-25 16:57:12,238 [DEBUG] leetcode.py:112 - User is logged in
2025-07-25 16:57:12,238 [INFO] leetcode.py:95 - Cookie set successful
2025-07-25 16:57:12,238 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-07-25 16:57:13,000 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-07-25 16:57:13,233 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1710846053,"question_id":601,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0hour","timestamp":1753439210,"status":10,"status_display":"Accepted","runtime":"307 ms","url":"/submissions/detail/1710846053/","is_pending":"Not Pending","title":"Human Traffic of Stadium","memory":"0.0B","code":"with cte as\\n(\\n    select *, \\n    id - row_number() over(order by id) as rnk\\n    from stadium\\n    where people >= 100\\n)\\nselect id, visit_date, people\\nfrom cte\\nwhere rnk in\\n(select rnk from cte group by rnk having count(*) >= 3)","compare_result":"111111111111111","title_slug":"human-traffic-of-stadium","has_notes":false,"flag_type":1,"frontend_id":116},{"id":1709286509,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 6\xc2\xa0hours","timestamp":1753334822,"status":10,"status_display":"Accepted","runtime":"1294 ms","url":"/submissions/detail/1709286509/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect player_id , min(event_date ) as first_login \\nfrom Activity \\ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":115},{"id":1709236092,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 6\xc2\xa0hours","timestamp":1753331620,"status":10,"status_display":"Accepted","runtime":"1290 ms","url":"/submissions/detail/1709236092/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect player_id , min(event_date ) as first_login \\nfrom Activity \\ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":114},{"id":1708309019,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 1\xc2\xa0hour","timestamp":1753263559,"status":10,"status_display":"Accepted","runtime":"351 ms","url":"/submissions/detail/1708309019/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"SELECT\\n    request_at as Day,\\n    ROUND(SUM(CASE WHEN status LIKE \'cancelled%\' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) * 1.0, 2) as \'Cancellation Rate\'\\nFROM\\n    Trips t\\nJOIN Users uc\\n    ON t.client_id = uc.users_id\\nJOIN Users ud\\n    ON t.driver_id = ud.users_id\\nWHERE\\n    uc.banned = \'No\'\\n    AND ud. banned = \'No\'\\n    AND request_at BETWEEN \'2013-01-01\' AND \'2013-10-03\'\\nGROUP BY\\n    request_at\\nORDER BY\\n    request_at\\n\\n-- WITH cte_a AS (\\n--     -- Only include trips where both client and driver are not banned\\n--     SELECT * \\n--     FROM Trips\\n--     WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n--       AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n-- ), \\n-- cte_total_cnt AS (\\n--     -- Count total unbanned requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_total_request\\n--     FROM cte_a \\n--     GROUP BY request_at\\n-- ),\\n-- cte_cancelled_cnt AS (\\n--     -- Count unbanned cancelled requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_cancelled\\n--     FROM cte_a\\n--     WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n--     GROUP BY request_at\\n-- )\\n-- SELECT \\n--     t.request_at AS Day,\\n--     ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\n-- FROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\n-- ON t.request_at = c.request_at\\n-- WHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\n-- ORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":113},{"id":1708304798,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 1\xc2\xa0hour","timestamp":1753263298,"status":10,"status_display":"Accepted","runtime":"483 ms","url":"/submissions/detail/1708304798/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"WITH cte_a AS (\\n    -- Only include trips where both client and driver are not banned\\n    SELECT * \\n    FROM Trips\\n    WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n      AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n), \\ncte_total_cnt AS (\\n    -- Count total unbanned requests per day\\n    SELECT request_at, COUNT(*) AS cnt_total_request\\n    FROM cte_a \\n    GROUP BY request_at\\n),\\ncte_cancelled_cnt AS (\\n    -- Count unbanned cancelled requests per day\\n    SELECT request_at, COUNT(*) AS cnt_cancelled\\n    FROM cte_a\\n    WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n    GROUP BY request_at\\n)\\nSELECT \\n    t.request_at AS Day,\\n    ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\nFROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\nON t.request_at = c.request_at\\nWHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\nORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":112},{"id":1707070691,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 1\xc2\xa0hour","timestamp":1753179134,"status":10,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/1707070691/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"WITH helper AS\\n(\\n    SELECT \\n        E.name Employee, \\n        E.salary Salary,\\n        D.name Department,\\n        DENSE_RANK() OVER (PARTITION BY D.id ORDER BY salary DESC) rank\\n    FROM Employee E JOIN Department D\\n    ON D.id = E.departmentId\\n)\\nSELECT \\n    Employee, \\n    Salary,\\n    Department\\nFROM helper\\nWHERE rank < 4;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":111},{"id":1707069861,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 1\xc2\xa0hour","timestamp":1753179084,"status":10,"status_display":"Accepted","runtime":"768 ms","url":"/submissions/detail/1707069861/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(\\nselect *, dense_rank() over(partition by e.departmentId order by e.salary desc) as rn\\nfrom Employee e \\n)\\nselect d.name as Department , e.name as Employee , e.salary\\nfrom cte_ranked e\\njoin Department d on e.departmentId = d.id \\nwhere rn <= 3","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":110},{"id":1705582347,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 4\xc2\xa0hours","timestamp":1753080312,"status":10,"status_display":"Accepted","runtime":"394 ms","url":"/submissions/detail/1705582347/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 7\xc2\xa0hours","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1703090868,"question_id":178,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 6\xc2\xa0hours","timestamp":1752902814,"status":10,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/1703090868/","is_pending":"Not Pending","title":"Rank Scores","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT SCORE, DENSE_RANK() OVER(ORDER BY SCORE DESC) AS RANK\\nFROM SCORES\\n","compare_result":"11111111111","title_slug":"rank-scores","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97}],"has_next":true,"last_key":""}'
2025-07-25 16:57:13,847 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:13,861 [INFO] __main__.py:245 - Writing human-traffic-of-stadium/2025-07-25 15.56.50 - Accepted - runtime 307ms - memory 0.0B.sql
2025-07-25 16:57:14,473 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:14,545 [INFO] __main__.py:251 - game-play-analysis-i/2025-07-24 10.57.02 - Accepted - runtime 1294ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:14,547 [INFO] __main__.py:245 - Writing game-play-analysis-i/2025-07-24 10.03.40 - Accepted - runtime 1290ms - memory 0.0B.sql
2025-07-25 16:57:15,319 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:15,323 [INFO] __main__.py:251 - trips-and-users/2025-07-23 15.09.19 - Accepted - runtime 351ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:15,323 [INFO] __main__.py:245 - Writing trips-and-users/2025-07-23 15.04.58 - Accepted - runtime 483ms - memory 0.0B.sql
2025-07-25 16:57:16,161 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:16,163 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-22 15.42.14 - Accepted - runtime 459ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:16,165 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-22 15.41.24 - Accepted - runtime 768ms - memory 0.0B.sql
2025-07-25 16:57:17,124 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:17,126 [INFO] __main__.py:251 - department-highest-salary/2025-07-21 12.15.12 - Accepted - runtime 394ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:17,128 [INFO] __main__.py:245 - Writing department-highest-salary/2025-07-21 09.48.07 - Accepted - runtime 420ms - memory 0.0B.sql
2025-07-25 16:57:18,127 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:18,129 [INFO] __main__.py:251 - rank-scores/2025-07-19 10.56.54 - Accepted - runtime 362ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:19,115 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:19,117 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:19,119 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql
2025-07-25 16:57:19,127 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql
2025-07-25 16:57:19,131 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:20,337 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:20,352 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:20,354 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:20,357 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:20,361 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:20,373 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:20,377 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:25,386 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-07-25 16:57:25,928 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-07-25 16:57:25,948 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77}],"has_next":true,"last_key":""}'
2025-07-25 16:57:25,950 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:25,953 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:25,955 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:25,955 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:26,502 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:26,505 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:26,955 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:26,957 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:27,615 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:27,617 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:28,585 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:28,589 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:29,374 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:29,378 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:29,378 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:29,384 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:29,388 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:30,364 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:30,366 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:30,367 [INFO] __main__.py:245 - Writing fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:30,370 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql
2025-07-25 16:57:31,458 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:31,458 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:31,458 [INFO] __main__.py:245 - Writing investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:31,888 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:31,888 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:32,236 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:32,238 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:33,292 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:33,295 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:38,304 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-07-25 16:57:40,058 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-07-25 16:57:40,059 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57}],"has_next":true,"last_key":""}'
2025-07-25 16:57:40,060 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql
2025-07-25 16:57:40,063 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:41,775 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:41,791 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:41,791 [INFO] __main__.py:245 - Writing exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:42,451 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:42,459 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:42,461 [INFO] __main__.py:245 - Writing employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:42,841 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:42,844 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:43,345 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:43,348 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:43,698 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:43,704 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:43,705 [INFO] __main__.py:245 - Writing product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql
2025-07-25 16:57:44,672 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:44,926 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:44,929 [INFO] __main__.py:245 - Writing consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:46,675 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:46,687 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:47,150 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:47,152 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:47,817 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:47,822 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:47,822 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:47,822 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:47,825 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:49,056 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:49,056 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:49,064 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:54,081 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-07-25 16:57:54,706 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-07-25 16:57:54,708 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37}],"has_next":true,"last_key":""}'
2025-07-25 16:57:54,710 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:57:56,341 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:56,343 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:57,554 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:57,556 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:57:58,729 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:57:58,731 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:00,164 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:00,168 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:00,170 [INFO] __main__.py:245 - Writing product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:58:01,056 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:01,056 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:01,056 [INFO] __main__.py:245 - Writing user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:58:02,193 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:02,193 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:03,424 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:03,426 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:04,628 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:04,631 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:05,908 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:05,908 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:07,495 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:07,495 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:09,859 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:09,862 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:11,822 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:11,825 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:13,256 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:13,260 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:13,794 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:13,798 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:13,798 [INFO] __main__.py:245 - Writing average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql
2025-07-25 16:58:14,307 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:14,551 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:14,551 [INFO] __main__.py:245 - Writing confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:58:19,845 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-07-25 16:58:20,676 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-07-25 16:58:20,678 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 3\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17}],"has_next":true,"last_key":""}'
2025-07-25 16:58:21,112 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:21,121 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:21,651 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:21,653 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:22,401 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:22,403 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:23,174 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:23,176 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:23,178 [INFO] __main__.py:245 - Writing average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql
2025-07-25 16:58:23,681 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:23,683 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:24,392 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:24,394 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:24,890 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:24,943 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:25,912 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:26,127 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:26,778 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:26,780 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:27,405 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:27,406 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:28,076 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:28,078 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:28,835 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:28,836 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-07-25 16:58:29,500 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 16:58:29,500 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:05:18,374 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-07-25 17:05:18,376 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-25 17:06:20,539 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-07-25 17:06:21,979 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-07-25 17:06:21,989 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1710846053,"question_id":601,"lang":"mssql","lang_name":"MS SQL Server","time":"1Â hour, 9Â minutes","timestamp":1753439210,"status":10,"status_display":"Accepted","runtime":"307 ms","url":"/submissions/detail/1710846053/","is_pending":"Not Pending","title":"Human Traffic of Stadium","memory":"0.0B","code":"with cte as\n(\n    select *, \n    id - row_number() over(order by id) as rnk\n    from stadium\n    where people >= 100\n)\nselect id, visit_date, people\nfrom cte\nwhere rnk in\n(select rnk from cte group by rnk having count(*) >= 3)","compare_result":"111111111111111","title_slug":"human-traffic-of-stadium","has_notes":false,"flag_type":1,"frontend_id":116}],"has_next":true,"last_key":""}
2025-07-25 17:06:22,998 [DEBUG] leetcode.py:112 - User is logged in
2025-07-25 17:06:22,998 [INFO] leetcode.py:95 - Cookie set successful
2025-07-25 17:06:23,002 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-07-25 17:06:23,386 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-07-25 17:06:23,422 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1710846053,"question_id":601,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0hour, 9\xc2\xa0minutes","timestamp":1753439210,"status":10,"status_display":"Accepted","runtime":"307 ms","url":"/submissions/detail/1710846053/","is_pending":"Not Pending","title":"Human Traffic of Stadium","memory":"0.0B","code":"with cte as\\n(\\n    select *, \\n    id - row_number() over(order by id) as rnk\\n    from stadium\\n    where people >= 100\\n)\\nselect id, visit_date, people\\nfrom cte\\nwhere rnk in\\n(select rnk from cte group by rnk having count(*) >= 3)","compare_result":"111111111111111","title_slug":"human-traffic-of-stadium","has_notes":false,"flag_type":1,"frontend_id":116},{"id":1709286509,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 6\xc2\xa0hours","timestamp":1753334822,"status":10,"status_display":"Accepted","runtime":"1294 ms","url":"/submissions/detail/1709286509/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect player_id , min(event_date ) as first_login \\nfrom Activity \\ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":115},{"id":1709236092,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 7\xc2\xa0hours","timestamp":1753331620,"status":10,"status_display":"Accepted","runtime":"1290 ms","url":"/submissions/detail/1709236092/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect player_id , min(event_date ) as first_login \\nfrom Activity \\ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":114},{"id":1708309019,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 1\xc2\xa0hour","timestamp":1753263559,"status":10,"status_display":"Accepted","runtime":"351 ms","url":"/submissions/detail/1708309019/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"SELECT\\n    request_at as Day,\\n    ROUND(SUM(CASE WHEN status LIKE \'cancelled%\' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) * 1.0, 2) as \'Cancellation Rate\'\\nFROM\\n    Trips t\\nJOIN Users uc\\n    ON t.client_id = uc.users_id\\nJOIN Users ud\\n    ON t.driver_id = ud.users_id\\nWHERE\\n    uc.banned = \'No\'\\n    AND ud. banned = \'No\'\\n    AND request_at BETWEEN \'2013-01-01\' AND \'2013-10-03\'\\nGROUP BY\\n    request_at\\nORDER BY\\n    request_at\\n\\n-- WITH cte_a AS (\\n--     -- Only include trips where both client and driver are not banned\\n--     SELECT * \\n--     FROM Trips\\n--     WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n--       AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n-- ), \\n-- cte_total_cnt AS (\\n--     -- Count total unbanned requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_total_request\\n--     FROM cte_a \\n--     GROUP BY request_at\\n-- ),\\n-- cte_cancelled_cnt AS (\\n--     -- Count unbanned cancelled requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_cancelled\\n--     FROM cte_a\\n--     WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n--     GROUP BY request_at\\n-- )\\n-- SELECT \\n--     t.request_at AS Day,\\n--     ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\n-- FROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\n-- ON t.request_at = c.request_at\\n-- WHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\n-- ORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":113},{"id":1708304798,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 2\xc2\xa0hours","timestamp":1753263298,"status":10,"status_display":"Accepted","runtime":"483 ms","url":"/submissions/detail/1708304798/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"WITH cte_a AS (\\n    -- Only include trips where both client and driver are not banned\\n    SELECT * \\n    FROM Trips\\n    WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n      AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n), \\ncte_total_cnt AS (\\n    -- Count total unbanned requests per day\\n    SELECT request_at, COUNT(*) AS cnt_total_request\\n    FROM cte_a \\n    GROUP BY request_at\\n),\\ncte_cancelled_cnt AS (\\n    -- Count unbanned cancelled requests per day\\n    SELECT request_at, COUNT(*) AS cnt_cancelled\\n    FROM cte_a\\n    WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n    GROUP BY request_at\\n)\\nSELECT \\n    t.request_at AS Day,\\n    ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\nFROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\nON t.request_at = c.request_at\\nWHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\nORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":112},{"id":1707070691,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 1\xc2\xa0hour","timestamp":1753179134,"status":10,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/1707070691/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"WITH helper AS\\n(\\n    SELECT \\n        E.name Employee, \\n        E.salary Salary,\\n        D.name Department,\\n        DENSE_RANK() OVER (PARTITION BY D.id ORDER BY salary DESC) rank\\n    FROM Employee E JOIN Department D\\n    ON D.id = E.departmentId\\n)\\nSELECT \\n    Employee, \\n    Salary,\\n    Department\\nFROM helper\\nWHERE rank < 4;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":111},{"id":1707069861,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 1\xc2\xa0hour","timestamp":1753179084,"status":10,"status_display":"Accepted","runtime":"768 ms","url":"/submissions/detail/1707069861/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(\\nselect *, dense_rank() over(partition by e.departmentId order by e.salary desc) as rn\\nfrom Employee e \\n)\\nselect d.name as Department , e.name as Employee , e.salary\\nfrom cte_ranked e\\njoin Department d on e.departmentId = d.id \\nwhere rn <= 3","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":110},{"id":1705582347,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 4\xc2\xa0hours","timestamp":1753080312,"status":10,"status_display":"Accepted","runtime":"394 ms","url":"/submissions/detail/1705582347/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 7\xc2\xa0hours","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1703090868,"question_id":178,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 6\xc2\xa0hours","timestamp":1752902814,"status":10,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/1703090868/","is_pending":"Not Pending","title":"Rank Scores","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT SCORE, DENSE_RANK() OVER(ORDER BY SCORE DESC) AS RANK\\nFROM SCORES\\n","compare_result":"11111111111","title_slug":"rank-scores","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97}],"has_next":true,"last_key":""}'
2025-07-25 17:06:23,833 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:23,838 [INFO] __main__.py:251 - human-traffic-of-stadium/2025-07-25 15.56.50 - Accepted - runtime 307ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:24,232 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:24,239 [INFO] __main__.py:251 - game-play-analysis-i/2025-07-24 10.57.02 - Accepted - runtime 1294ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:24,241 [INFO] __main__.py:251 - game-play-analysis-i/2025-07-24 10.03.40 - Accepted - runtime 1290ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:24,975 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:24,977 [INFO] __main__.py:251 - trips-and-users/2025-07-23 15.09.19 - Accepted - runtime 351ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:24,979 [INFO] __main__.py:251 - trips-and-users/2025-07-23 15.04.58 - Accepted - runtime 483ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:25,393 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:25,397 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-22 15.42.14 - Accepted - runtime 459ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:25,397 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-22 15.41.24 - Accepted - runtime 768ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:26,150 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:26,172 [INFO] __main__.py:251 - department-highest-salary/2025-07-21 12.15.12 - Accepted - runtime 394ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:26,177 [INFO] __main__.py:251 - department-highest-salary/2025-07-21 09.48.07 - Accepted - runtime 420ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:26,764 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:26,771 [INFO] __main__.py:251 - rank-scores/2025-07-19 10.56.54 - Accepted - runtime 362ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:27,143 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:27,145 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:27,147 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:27,147 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:27,147 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:27,556 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:27,558 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:27,558 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:27,561 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:27,561 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:27,561 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:27,563 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:32,569 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-07-25 17:06:33,004 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-07-25 17:06:33,029 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77}],"has_next":true,"last_key":""}'
2025-07-25 17:06:33,031 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:33,033 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:33,042 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:33,044 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:33,488 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:33,517 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:33,907 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:33,907 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:34,288 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:34,290 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:34,676 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:34,678 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:35,250 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:35,253 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:35,253 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:35,255 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:35,258 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:35,632 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:35,636 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:35,636 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:35,636 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:36,024 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:36,026 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:36,026 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:36,417 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:36,427 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:37,383 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:37,398 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:37,774 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:38,030 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:43,045 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-07-25 17:06:44,692 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-07-25 17:06:44,701 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57}],"has_next":true,"last_key":""}'
2025-07-25 17:06:45,268 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:45,271 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:45,859 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:45,875 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:45,875 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:46,405 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:46,405 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:46,405 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:46,860 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:46,871 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:47,450 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:47,628 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:48,007 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:48,009 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:48,011 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:48,412 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:48,414 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:48,416 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:48,876 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:48,878 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:49,286 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:49,288 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:49,838 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:49,841 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:49,843 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:49,845 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:49,845 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:50,228 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:50,239 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:50,242 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:55,243 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-07-25 17:06:55,806 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-07-25 17:06:55,810 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37}],"has_next":true,"last_key":""}'
2025-07-25 17:06:55,814 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:56,435 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:56,438 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:56,883 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:56,887 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:57,697 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:57,699 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:58,140 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:58,142 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:58,144 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:59,122 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:59,132 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:59,132 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:06:59,554 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:59,554 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:06:59,980 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:06:59,984 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:00,387 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:00,397 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:00,796 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:00,807 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:01,294 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:01,296 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:01,909 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:01,924 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:02,829 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:02,834 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:03,631 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:03,875 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:04,657 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:04,732 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:04,732 [INFO] __main__.py:251 - average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:07:06,265 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:06,268 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:06,268 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:07:11,286 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-07-25 17:07:12,329 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-07-25 17:07:12,329 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 3\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17}],"has_next":true,"last_key":""}'
2025-07-25 17:07:13,450 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:13,451 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:14,586 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:14,588 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:15,647 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:15,655 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:16,408 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:16,411 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:16,411 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-25 17:07:17,549 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:17,549 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:18,364 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:18,364 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:19,009 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:19,011 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:20,938 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:20,940 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:21,593 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:21,596 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:22,177 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:22,207 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:22,830 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:22,835 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:23,303 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:23,304 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:23,703 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:23,705 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:24,824 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:24,827 [INFO] __main__.py:251 - customer-placing-the-largest-number-of-orders/2024-08-11 22.33.14 - Accepted - runtime 444ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:25,554 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:25,752 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2024-08-08 15.31.19 - Accepted - runtime 1265ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:26,194 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:26,196 [INFO] __main__.py:251 - top-travellers/2024-08-02 22.39.39 - Accepted - runtime 843ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:26,196 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.53.10 - Accepted - runtime 1344ms - memory 0.0B.sql
2025-07-25 17:07:26,811 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.48.36 - Runtime Error - runtime NA - memory NA.sql
2025-07-25 17:07:27,002 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-25 10.40.12 - Accepted - runtime 1338ms - memory 0.0B.sql
2025-07-25 17:07:32,316 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-07-25 17:07:33,577 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-07-25 17:07:33,677 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1029511014,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792516,"status":10,"status_display":"Accepted","runtime":"1642 ms","url":"/submissions/detail/1029511014/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1029510363,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792466,"status":10,"status_display":"Accepted","runtime":"1053 ms","url":"/submissions/detail/1029510363/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1016455334,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573885,"status":10,"status_display":"Accepted","runtime":"1095 ms","url":"/submissions/detail/1016455334/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1016455058,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573858,"status":10,"status_display":"Accepted","runtime":"2190 ms","url":"/submissions/detail/1016455058/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1009234981,"question_id":183,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690881420,"status":10,"status_display":"Accepted","runtime":"724 ms","url":"/submissions/detail/1009234981/","is_pending":"Not Pending","title":"Customers Who Never Order","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as customers from Customers where id not in(select customerid from orders)","compare_result":"111111111111","title_slug":"customers-who-never-order","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1009161386,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874221,"status":10,"status_display":"Accepted","runtime":"875 ms","url":"/submissions/detail/1009161386/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1009161138,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874197,"status":10,"status_display":"Accepted","runtime":"1543 ms","url":"/submissions/detail/1009161138/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1004211677,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690353557,"status":10,"status_display":"Accepted","runtime":"981 ms","url":"/submissions/detail/1004211677/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as Employee from Employee e1 where salary > (select salary from Employee where id = e1.managerId)","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1004210595,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690353467,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1004210595/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\nselect * from Employee e1 where salary > (select salary from Emplpoyee where id = e1.managerId)","compare_result":"00000000000000","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1003745627,"question_id":175,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690304358,"status":10,"status_display":"Accepted","runtime":"1086 ms","url":"/submissions/detail/1003745627/","is_pending":"Not Pending","title":"Combine Two Tables","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect FirstName, LastName, city, state from person left join address \\r\\non person.personId = address.personId ","compare_result":"11111111","title_slug":"combine-two-tables","has_notes":false,"flag_type":1,"frontend_id":7},{"id":842546003,"question_id":327,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668329684,"status":10,"status_display":"Accepted","runtime":"2624 ms","url":"/submissions/detail/842546003/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"100.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} lower\\n * @param {number} upper\\n * @return {number}\\n */\\nvar countRangeSum = function(nums, lower, upper) {\\n    let preSum = Array(nums.length + 1).fill(0);\\n  let count = 0;\\n\\n  // create preSum array, use preSum to check the sum range\\n  for (let i = 0; i < nums.length; i++) {\\n      preSum[i + 1] = preSum[i] + nums[i];\\n  }\\n\\n  const sort = function(preSum) {\\n      if (preSum.length === 1) return preSum;\\n\\n      let mid = Math.floor(preSum.length / 2);\\n      let left = sort(preSum.slice(0, mid));\\n      let right = sort(preSum.slice(mid))\\n\\n      return merge(left, right);\\n  }\\n\\n  const merge = function(left, right) {\\n      let start = 0;\\n      let end = 0;\\n\\n      for (let i = 0; i < left.length; i++) {\\n          // all elements before start index, after subtracting left[i] are less than lower, which means all elements after start index are bigger or equal than lower\\n          while (start < right.length && right[start] - left[i] < lower) {\\n              start++;\\n          }\\n          // similarly, all elements before end index are less or euqal then upper\\n          while (end < right.length && right[end] - left[i] <= upper) {\\n              end++;\\n          }\\n\\n          // since the initial values of start and end are the same, and upper >= lower, so end will >= start too, which means the rest of the end minus start element difference will fall between [lower, upper].\\n          count += end - start;\\n      }\\n\\n      let sort = [];\\n      while (left.length && right.length) {\\n          if (left[0] <= right[0]) {\\n              sort.push(left.shift());\\n          } else {\\n              sort.push(right.shift());\\n          }\\n      }\\n\\n      return [...sort, ...left, ...right];\\n  }\\n\\n  sort(preSum);\\n  return count;\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1,"frontend_id":6},{"id":842024680,"question_id":2561,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668266557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/842024680/","is_pending":"Not Pending","title":"Number of Distinct Averages","memory":"N/A","code":"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    for(let i = 0; i < nums.length;i++)\\n    {\\n        let newnums = nums;\\n        let  res = [],max = Math.max(...nums), min = Math.min(...nums);   \\n        res[0] = min, res[1] = max\\n        let avg = (max+min)/2\\n    }\\n    \\n    \\n};","compare_result":"000000000000000000000000000000000000","title_slug":"number-of-distinct-averages","has_notes":false,"flag_type":1,"frontend_id":5},{"id":836960924,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591646,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/836960924/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"42.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":4},{"id":836960390,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591580,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/836960390/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"43 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":3},{"id":831406918,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 9\xc2\xa0months","timestamp":1666877523,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/831406918/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":2},{"id":831395512,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 9\xc2\xa0months","timestamp":1666876149,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/831395512/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-07-25 17:07:33,679 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.38.36 - Accepted - runtime 1642ms - memory 0.0B.sql
2025-07-25 17:07:33,679 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.37.46 - Accepted - runtime 1053ms - memory 0.0B.sql
2025-07-25 17:07:33,683 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.08.05 - Accepted - runtime 1095ms - memory 0.0B.sql
2025-07-25 17:07:33,693 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.07.38 - Accepted - runtime 2190ms - memory 0.0B.sql
2025-07-25 17:07:34,847 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:34,851 [INFO] __main__.py:251 - customers-who-never-order/2023-08-01 14.47.00 - Accepted - runtime 724ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:36,352 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:36,354 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.47.01 - Accepted - runtime 875ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:36,358 [INFO] __main__.py:245 - Writing duplicate-emails/2023-08-01 12.46.37 - Accepted - runtime 1543ms - memory 0.0B.sql
2025-07-25 17:07:36,365 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.09.17 - Accepted - runtime 981ms - memory 0.0B.sql
2025-07-25 17:07:36,375 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.07.47 - Runtime Error - runtime NA - memory NA.sql
2025-07-25 17:07:38,556 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:38,560 [INFO] __main__.py:251 - combine-two-tables/2023-07-25 22.29.18 - Accepted - runtime 1086ms - memory 0.0B.sql already exists, skipping it
2025-07-25 17:07:39,932 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:39,934 [INFO] __main__.py:251 - count-of-range-sum/2022-11-13 14.24.44 - Accepted - runtime 2624ms - memory 100.9MB.js already exists, skipping it
2025-07-25 17:07:40,792 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:40,792 [INFO] __main__.py:251 - number-of-distinct-averages/2022-11-12 20.52.37 - Wrong Answer - runtime NA - memory NA.js already exists, skipping it
2025-07-25 17:07:41,787 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:41,791 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.24.06 - Accepted - runtime 91ms - memory 42.9MB.js already exists, skipping it
2025-07-25 17:07:41,791 [INFO] __main__.py:245 - Writing find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.23.00 - Accepted - runtime 96ms - memory 43MB.js
2025-07-25 17:07:42,189 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-25 17:07:42,191 [INFO] __main__.py:251 - valid-anagram/2022-10-27 19.02.03 - Accepted - runtime 171ms - memory 49.4MB.js already exists, skipping it
2025-07-25 17:07:42,191 [INFO] __main__.py:245 - Writing valid-anagram/2022-10-27 18.39.09 - Accepted - runtime 122ms - memory 49.4MB.js
2025-07-29 09:36:21,758 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-07-29 09:36:21,758 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-29 09:46:41,959 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-07-29 09:46:42,732 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-07-29 09:46:42,732 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1714062270,"question_id":607,"lang":"mssql","lang_name":"MS SQL Server","time":"23Â hours, 46Â minutes","timestamp":1753677036,"status":10,"status_display":"Accepted","runtime":"963 ms","url":"/submissions/detail/1714062270/","is_pending":"Not Pending","title":"Sales Person","memory":"0.0B","code":"/* Write your T-SQL query statement below */\nselect name\nfrom SalesPerson \nwhere sales_id not in (select sales_id from orders\nwhere com_id in (select com_id from Company where name = 'RED'))","compare_result":"111111111111111111111","title_slug":"sales-person","has_notes":false,"flag_type":1,"frontend_id":117}],"has_next":true,"last_key":""}
2025-07-29 09:46:43,737 [DEBUG] leetcode.py:112 - User is logged in
2025-07-29 09:46:43,738 [INFO] leetcode.py:95 - Cookie set successful
2025-07-29 09:46:43,740 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-07-29 09:46:44,312 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-07-29 09:46:44,334 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1714062270,"question_id":607,"lang":"mssql","lang_name":"MS SQL Server","time":"23\xc2\xa0hours, 46\xc2\xa0minutes","timestamp":1753677036,"status":10,"status_display":"Accepted","runtime":"963 ms","url":"/submissions/detail/1714062270/","is_pending":"Not Pending","title":"Sales Person","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name\\nfrom SalesPerson \\nwhere sales_id not in (select sales_id from orders\\nwhere com_id in (select com_id from Company where name = \'RED\'))","compare_result":"111111111111111111111","title_slug":"sales-person","has_notes":false,"flag_type":1,"frontend_id":117},{"id":1710846053,"question_id":601,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 17\xc2\xa0hours","timestamp":1753439210,"status":10,"status_display":"Accepted","runtime":"307 ms","url":"/submissions/detail/1710846053/","is_pending":"Not Pending","title":"Human Traffic of Stadium","memory":"0.0B","code":"with cte as\\n(\\n    select *, \\n    id - row_number() over(order by id) as rnk\\n    from stadium\\n    where people >= 100\\n)\\nselect id, visit_date, people\\nfrom cte\\nwhere rnk in\\n(select rnk from cte group by rnk having count(*) >= 3)","compare_result":"111111111111111","title_slug":"human-traffic-of-stadium","has_notes":false,"flag_type":1,"frontend_id":116},{"id":1709286509,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 22\xc2\xa0hours","timestamp":1753334822,"status":10,"status_display":"Accepted","runtime":"1294 ms","url":"/submissions/detail/1709286509/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect player_id , min(event_date ) as first_login \\nfrom Activity \\ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":115},{"id":1709236092,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 23\xc2\xa0hours","timestamp":1753331620,"status":10,"status_display":"Accepted","runtime":"1290 ms","url":"/submissions/detail/1709236092/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect player_id , min(event_date ) as first_login \\nfrom Activity \\ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":114},{"id":1708309019,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 18\xc2\xa0hours","timestamp":1753263559,"status":10,"status_display":"Accepted","runtime":"351 ms","url":"/submissions/detail/1708309019/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"SELECT\\n    request_at as Day,\\n    ROUND(SUM(CASE WHEN status LIKE \'cancelled%\' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) * 1.0, 2) as \'Cancellation Rate\'\\nFROM\\n    Trips t\\nJOIN Users uc\\n    ON t.client_id = uc.users_id\\nJOIN Users ud\\n    ON t.driver_id = ud.users_id\\nWHERE\\n    uc.banned = \'No\'\\n    AND ud. banned = \'No\'\\n    AND request_at BETWEEN \'2013-01-01\' AND \'2013-10-03\'\\nGROUP BY\\n    request_at\\nORDER BY\\n    request_at\\n\\n-- WITH cte_a AS (\\n--     -- Only include trips where both client and driver are not banned\\n--     SELECT * \\n--     FROM Trips\\n--     WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n--       AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n-- ), \\n-- cte_total_cnt AS (\\n--     -- Count total unbanned requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_total_request\\n--     FROM cte_a \\n--     GROUP BY request_at\\n-- ),\\n-- cte_cancelled_cnt AS (\\n--     -- Count unbanned cancelled requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_cancelled\\n--     FROM cte_a\\n--     WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n--     GROUP BY request_at\\n-- )\\n-- SELECT \\n--     t.request_at AS Day,\\n--     ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\n-- FROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\n-- ON t.request_at = c.request_at\\n-- WHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\n-- ORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":113},{"id":1708304798,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 18\xc2\xa0hours","timestamp":1753263298,"status":10,"status_display":"Accepted","runtime":"483 ms","url":"/submissions/detail/1708304798/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"WITH cte_a AS (\\n    -- Only include trips where both client and driver are not banned\\n    SELECT * \\n    FROM Trips\\n    WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n      AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n), \\ncte_total_cnt AS (\\n    -- Count total unbanned requests per day\\n    SELECT request_at, COUNT(*) AS cnt_total_request\\n    FROM cte_a \\n    GROUP BY request_at\\n),\\ncte_cancelled_cnt AS (\\n    -- Count unbanned cancelled requests per day\\n    SELECT request_at, COUNT(*) AS cnt_cancelled\\n    FROM cte_a\\n    WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n    GROUP BY request_at\\n)\\nSELECT \\n    t.request_at AS Day,\\n    ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\nFROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\nON t.request_at = c.request_at\\nWHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\nORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":112},{"id":1707070691,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 18\xc2\xa0hours","timestamp":1753179134,"status":10,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/1707070691/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"WITH helper AS\\n(\\n    SELECT \\n        E.name Employee, \\n        E.salary Salary,\\n        D.name Department,\\n        DENSE_RANK() OVER (PARTITION BY D.id ORDER BY salary DESC) rank\\n    FROM Employee E JOIN Department D\\n    ON D.id = E.departmentId\\n)\\nSELECT \\n    Employee, \\n    Salary,\\n    Department\\nFROM helper\\nWHERE rank < 4;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":111},{"id":1707069861,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 18\xc2\xa0hours","timestamp":1753179084,"status":10,"status_display":"Accepted","runtime":"768 ms","url":"/submissions/detail/1707069861/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(\\nselect *, dense_rank() over(partition by e.departmentId order by e.salary desc) as rn\\nfrom Employee e \\n)\\nselect d.name as Department , e.name as Employee , e.salary\\nfrom cte_ranked e\\njoin Department d on e.departmentId = d.id \\nwhere rn <= 3","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":110},{"id":1705582347,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1753080312,"status":10,"status_display":"Accepted","runtime":"394 ms","url":"/submissions/detail/1705582347/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1703090868,"question_id":178,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752902814,"status":10,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/1703090868/","is_pending":"Not Pending","title":"Rank Scores","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT SCORE, DENSE_RANK() OVER(ORDER BY SCORE DESC) AS RANK\\nFROM SCORES\\n","compare_result":"11111111111","title_slug":"rank-scores","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98}],"has_next":true,"last_key":""}'
2025-07-29 09:46:44,674 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:44,685 [INFO] __main__.py:245 - Writing sales-person/2025-07-28 10.00.36 - Accepted - runtime 963ms - memory 0.0B.sql
2025-07-29 09:46:45,628 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:45,630 [INFO] __main__.py:251 - human-traffic-of-stadium/2025-07-25 15.56.50 - Accepted - runtime 307ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:46,015 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:46,018 [INFO] __main__.py:251 - game-play-analysis-i/2025-07-24 10.57.02 - Accepted - runtime 1294ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:46,018 [INFO] __main__.py:245 - Writing game-play-analysis-i/2025-07-24 10.03.40 - Accepted - runtime 1290ms - memory 0.0B.sql
2025-07-29 09:46:47,057 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:47,059 [INFO] __main__.py:251 - trips-and-users/2025-07-23 15.09.19 - Accepted - runtime 351ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:47,059 [INFO] __main__.py:245 - Writing trips-and-users/2025-07-23 15.04.58 - Accepted - runtime 483ms - memory 0.0B.sql
2025-07-29 09:46:47,981 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:47,986 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-22 15.42.14 - Accepted - runtime 459ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:47,988 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-22 15.41.24 - Accepted - runtime 768ms - memory 0.0B.sql
2025-07-29 09:46:48,541 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:48,541 [INFO] __main__.py:251 - department-highest-salary/2025-07-21 12.15.12 - Accepted - runtime 394ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:48,544 [INFO] __main__.py:245 - Writing department-highest-salary/2025-07-21 09.48.07 - Accepted - runtime 420ms - memory 0.0B.sql
2025-07-29 09:46:48,945 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:48,947 [INFO] __main__.py:251 - rank-scores/2025-07-19 10.56.54 - Accepted - runtime 362ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:49,292 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:49,292 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:49,292 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql
2025-07-29 09:46:49,292 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql
2025-07-29 09:46:49,292 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:46:49,669 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:49,672 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:49,672 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:46:49,676 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:46:49,676 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:46:49,679 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:46:54,694 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-07-29 09:46:55,070 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-07-29 09:46:55,070 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78}],"has_next":true,"last_key":""}'
2025-07-29 09:46:55,070 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:46:55,070 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:46:55,082 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:46:55,082 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:46:55,092 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:46:55,408 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:55,412 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:56,372 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:56,374 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:56,860 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:56,862 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:57,206 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:57,208 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:57,585 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:57,781 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:57,783 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:46:57,784 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:46:57,784 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:46:58,136 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:58,140 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:58,140 [INFO] __main__.py:245 - Writing fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:46:58,457 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql
2025-07-29 09:46:59,134 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:46:59,135 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:46:59,138 [INFO] __main__.py:245 - Writing investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:47:00,318 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:00,319 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:00,678 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:00,680 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:05,696 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-07-29 09:47:06,071 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-07-29 09:47:06,082 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58}],"has_next":true,"last_key":""}'
2025-07-29 09:47:06,902 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:06,905 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:06,905 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql
2025-07-29 09:47:06,905 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:47:07,887 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:07,893 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:07,893 [INFO] __main__.py:245 - Writing exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:47:08,244 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:08,244 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:08,244 [INFO] __main__.py:245 - Writing employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:47:08,567 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:08,567 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:09,415 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:09,415 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:10,098 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:10,100 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:10,100 [INFO] __main__.py:245 - Writing product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql
2025-07-29 09:47:10,751 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:10,753 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:10,753 [INFO] __main__.py:245 - Writing consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:47:11,075 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:11,077 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:11,799 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:11,804 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:12,120 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:12,120 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:12,120 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:47:12,128 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:47:12,129 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:47:12,608 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:12,611 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:17,626 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-07-29 09:47:18,022 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-07-29 09:47:18,035 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38}],"has_next":true,"last_key":""}'
2025-07-29 09:47:18,035 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:47:18,041 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:47:20,146 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:20,146 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:20,542 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:20,542 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:20,998 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:21,002 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:21,871 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:21,887 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:21,887 [INFO] __main__.py:245 - Writing product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:47:22,263 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:22,280 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:22,280 [INFO] __main__.py:245 - Writing user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:47:22,770 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:22,770 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:23,136 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:23,139 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:24,100 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:24,104 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:25,079 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:25,082 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:25,420 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:25,420 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:26,409 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:26,414 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:26,848 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:26,848 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:27,173 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:27,183 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:27,496 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:27,496 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:27,496 [INFO] __main__.py:245 - Writing average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql
2025-07-29 09:47:28,436 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:28,436 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:33,442 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-07-29 09:47:34,226 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-07-29 09:47:34,239 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 3\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"12\xc2\xa0months","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18}],"has_next":true,"last_key":""}'
2025-07-29 09:47:34,241 [INFO] __main__.py:245 - Writing confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:47:34,589 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:34,593 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:34,934 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:34,935 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:36,814 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:36,825 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:37,177 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:37,182 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:37,185 [INFO] __main__.py:245 - Writing average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql
2025-07-29 09:47:38,049 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:38,051 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:38,461 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:38,477 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:39,666 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:39,673 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:41,172 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:41,176 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:41,495 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:41,495 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:42,381 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:42,389 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:42,722 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:42,724 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:43,058 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:43,061 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:43,477 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:43,479 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:44,496 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:44,500 [INFO] __main__.py:251 - customer-placing-the-largest-number-of-orders/2024-08-11 22.33.14 - Accepted - runtime 444ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:44,841 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:44,841 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2024-08-08 15.31.19 - Accepted - runtime 1265ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:45,195 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:45,196 [INFO] __main__.py:251 - top-travellers/2024-08-02 22.39.39 - Accepted - runtime 843ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:45,198 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.53.10 - Accepted - runtime 1344ms - memory 0.0B.sql
2025-07-29 09:47:45,199 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.48.36 - Runtime Error - runtime NA - memory NA.sql
2025-07-29 09:47:50,210 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-07-29 09:47:50,711 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-07-29 09:47:50,736 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1029511014,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792516,"status":10,"status_display":"Accepted","runtime":"1642 ms","url":"/submissions/detail/1029511014/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1029510363,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792466,"status":10,"status_display":"Accepted","runtime":"1053 ms","url":"/submissions/detail/1029510363/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1016455334,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573885,"status":10,"status_display":"Accepted","runtime":"1095 ms","url":"/submissions/detail/1016455334/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1016455058,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573858,"status":10,"status_display":"Accepted","runtime":"2190 ms","url":"/submissions/detail/1016455058/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1009234981,"question_id":183,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690881420,"status":10,"status_display":"Accepted","runtime":"724 ms","url":"/submissions/detail/1009234981/","is_pending":"Not Pending","title":"Customers Who Never Order","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as customers from Customers where id not in(select customerid from orders)","compare_result":"111111111111","title_slug":"customers-who-never-order","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1009161386,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690874221,"status":10,"status_display":"Accepted","runtime":"875 ms","url":"/submissions/detail/1009161386/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1009161138,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690874197,"status":10,"status_display":"Accepted","runtime":"1543 ms","url":"/submissions/detail/1009161138/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1004211677,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1690353557,"status":10,"status_display":"Accepted","runtime":"981 ms","url":"/submissions/detail/1004211677/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as Employee from Employee e1 where salary > (select salary from Employee where id = e1.managerId)","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1004210595,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1690353467,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1004210595/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\nselect * from Employee e1 where salary > (select salary from Emplpoyee where id = e1.managerId)","compare_result":"00000000000000","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1003745627,"question_id":175,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1690304358,"status":10,"status_display":"Accepted","runtime":"1086 ms","url":"/submissions/detail/1003745627/","is_pending":"Not Pending","title":"Combine Two Tables","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect FirstName, LastName, city, state from person left join address \\r\\non person.personId = address.personId ","compare_result":"11111111","title_slug":"combine-two-tables","has_notes":false,"flag_type":1,"frontend_id":7},{"id":842546003,"question_id":327,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668329684,"status":10,"status_display":"Accepted","runtime":"2624 ms","url":"/submissions/detail/842546003/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"100.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} lower\\n * @param {number} upper\\n * @return {number}\\n */\\nvar countRangeSum = function(nums, lower, upper) {\\n    let preSum = Array(nums.length + 1).fill(0);\\n  let count = 0;\\n\\n  // create preSum array, use preSum to check the sum range\\n  for (let i = 0; i < nums.length; i++) {\\n      preSum[i + 1] = preSum[i] + nums[i];\\n  }\\n\\n  const sort = function(preSum) {\\n      if (preSum.length === 1) return preSum;\\n\\n      let mid = Math.floor(preSum.length / 2);\\n      let left = sort(preSum.slice(0, mid));\\n      let right = sort(preSum.slice(mid))\\n\\n      return merge(left, right);\\n  }\\n\\n  const merge = function(left, right) {\\n      let start = 0;\\n      let end = 0;\\n\\n      for (let i = 0; i < left.length; i++) {\\n          // all elements before start index, after subtracting left[i] are less than lower, which means all elements after start index are bigger or equal than lower\\n          while (start < right.length && right[start] - left[i] < lower) {\\n              start++;\\n          }\\n          // similarly, all elements before end index are less or euqal then upper\\n          while (end < right.length && right[end] - left[i] <= upper) {\\n              end++;\\n          }\\n\\n          // since the initial values of start and end are the same, and upper >= lower, so end will >= start too, which means the rest of the end minus start element difference will fall between [lower, upper].\\n          count += end - start;\\n      }\\n\\n      let sort = [];\\n      while (left.length && right.length) {\\n          if (left[0] <= right[0]) {\\n              sort.push(left.shift());\\n          } else {\\n              sort.push(right.shift());\\n          }\\n      }\\n\\n      return [...sort, ...left, ...right];\\n  }\\n\\n  sort(preSum);\\n  return count;\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1,"frontend_id":6},{"id":842024680,"question_id":2561,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668266557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/842024680/","is_pending":"Not Pending","title":"Number of Distinct Averages","memory":"N/A","code":"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    for(let i = 0; i < nums.length;i++)\\n    {\\n        let newnums = nums;\\n        let  res = [],max = Math.max(...nums), min = Math.min(...nums);   \\n        res[0] = min, res[1] = max\\n        let avg = (max+min)/2\\n    }\\n    \\n    \\n};","compare_result":"000000000000000000000000000000000000","title_slug":"number-of-distinct-averages","has_notes":false,"flag_type":1,"frontend_id":5},{"id":836960924,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591646,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/836960924/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"42.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":4},{"id":836960390,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591580,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/836960390/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"43 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":3},{"id":831406918,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 9\xc2\xa0months","timestamp":1666877523,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/831406918/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":2},{"id":831395512,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 9\xc2\xa0months","timestamp":1666876149,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/831395512/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-07-29 09:47:50,738 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-25 10.40.12 - Accepted - runtime 1338ms - memory 0.0B.sql
2025-07-29 09:47:50,744 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.38.36 - Accepted - runtime 1642ms - memory 0.0B.sql
2025-07-29 09:47:50,746 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.37.46 - Accepted - runtime 1053ms - memory 0.0B.sql
2025-07-29 09:47:50,749 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.08.05 - Accepted - runtime 1095ms - memory 0.0B.sql
2025-07-29 09:47:50,752 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.07.38 - Accepted - runtime 2190ms - memory 0.0B.sql
2025-07-29 09:47:51,196 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:51,199 [INFO] __main__.py:251 - customers-who-never-order/2023-08-01 14.47.00 - Accepted - runtime 724ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:51,546 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:51,546 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.47.01 - Accepted - runtime 875ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:51,561 [INFO] __main__.py:245 - Writing duplicate-emails/2023-08-01 12.46.37 - Accepted - runtime 1543ms - memory 0.0B.sql
2025-07-29 09:47:51,562 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.09.17 - Accepted - runtime 981ms - memory 0.0B.sql
2025-07-29 09:47:51,566 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.07.47 - Runtime Error - runtime NA - memory NA.sql
2025-07-29 09:47:52,113 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:52,117 [INFO] __main__.py:251 - combine-two-tables/2023-07-25 22.29.18 - Accepted - runtime 1086ms - memory 0.0B.sql already exists, skipping it
2025-07-29 09:47:52,973 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:52,979 [INFO] __main__.py:251 - count-of-range-sum/2022-11-13 14.24.44 - Accepted - runtime 2624ms - memory 100.9MB.js already exists, skipping it
2025-07-29 09:47:53,330 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:53,332 [INFO] __main__.py:251 - number-of-distinct-averages/2022-11-12 20.52.37 - Wrong Answer - runtime NA - memory NA.js already exists, skipping it
2025-07-29 09:47:54,002 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:54,012 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.24.06 - Accepted - runtime 91ms - memory 42.9MB.js already exists, skipping it
2025-07-29 09:47:54,014 [INFO] __main__.py:245 - Writing find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.23.00 - Accepted - runtime 96ms - memory 43MB.js
2025-07-29 09:47:54,435 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-29 09:47:54,435 [INFO] __main__.py:251 - valid-anagram/2022-10-27 19.02.03 - Accepted - runtime 171ms - memory 49.4MB.js already exists, skipping it
2025-07-29 09:47:54,440 [INFO] __main__.py:245 - Writing valid-anagram/2022-10-27 18.39.09 - Accepted - runtime 122ms - memory 49.4MB.js
2025-08-14 14:55:26,697 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-08-14 14:55:26,700 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-08-14 14:59:26,446 [ERROR] leetcode.py:88 - Cookie format not valid. Expected: 'csrftoken=value1;LEETCODE_SESSION=value2;...'
2025-08-14 14:59:26,473 [ERROR] __main__.py:160 - Cookies not valid. Copy them from the Network tab of your browser by clicking on any leetcode.com request and going in Request Headers > cookie. Check README.md file for more information
2025-08-14 15:37:22,645 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-08-14 15:37:22,645 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-08-14 15:37:24,726 [ERROR] leetcode.py:88 - Cookie format not valid. Expected: 'csrftoken=value1;LEETCODE_SESSION=value2;...'
2025-08-14 15:37:24,728 [ERROR] __main__.py:160 - Cookies not valid. Copy them from the Network tab of your browser by clicking on any leetcode.com request and going in Request Headers > cookie. Check README.md file for more information
2025-08-19 16:19:57,174 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-08-19 16:19:57,174 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-08-19 16:20:00,840 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-08-19 16:20:01,601 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-08-19 16:20:01,606 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1740548024,"question_id":1892,"lang":"mssql","lang_name":"MS SQL Server","time":"3Â hours, 22Â minutes","timestamp":1755588470,"status":10,"status_display":"Accepted","runtime":"348 ms","url":"/submissions/detail/1740548024/","is_pending":"Not Pending","title":"Find Total Time Spent by Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\n/*\nwith cte_total as\n(\n    select emp_id, event_day, sum(in_time) tit, sum(out_time) tot\n    from employees\n    group by emp_id,event_day\n)\nselect event_day as [day], emp_id, tot - tit as total_time\nfrom cte_total\n*/\n\nselect event_day as day, emp_id, sum(out_time-in_time) as total_time\nfrom employees\ngroup by event_day, emp_id\n","compare_result":"1111111111111111111111","title_slug":"find-total-time-spent-by-each-employee","has_notes":false,"flag_type":1,"frontend_id":131}],"has_next":true,"last_key":""}
2025-08-19 16:20:02,613 [DEBUG] leetcode.py:112 - User is logged in
2025-08-19 16:20:02,613 [INFO] leetcode.py:95 - Cookie set successful
2025-08-19 16:20:02,614 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-08-19 16:20:03,190 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-08-19 16:20:03,193 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1740548024,"question_id":1892,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0hours, 22\xc2\xa0minutes","timestamp":1755588470,"status":10,"status_display":"Accepted","runtime":"348 ms","url":"/submissions/detail/1740548024/","is_pending":"Not Pending","title":"Find Total Time Spent by Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n/*\\nwith cte_total as\\n(\\n    select emp_id, event_day, sum(in_time) tit, sum(out_time) tot\\n    from employees\\n    group by emp_id,event_day\\n)\\nselect event_day as [day], emp_id, tot - tit as total_time\\nfrom cte_total\\n*/\\n\\nselect event_day as day, emp_id, sum(out_time-in_time) as total_time\\nfrom employees\\ngroup by event_day, emp_id\\n","compare_result":"1111111111111111111111","title_slug":"find-total-time-spent-by-each-employee","has_notes":false,"flag_type":1,"frontend_id":131},{"id":1740547461,"question_id":1892,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0hours, 22\xc2\xa0minutes","timestamp":1755588431,"status":10,"status_display":"Accepted","runtime":"402 ms","url":"/submissions/detail/1740547461/","is_pending":"Not Pending","title":"Find Total Time Spent by Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_total as\\n(\\n    select emp_id, event_day, sum(in_time) tit, sum(out_time) tot\\n    from employees\\n    group by emp_id,event_day\\n)\\nselect event_day as [day], emp_id, tot - tit as total_time\\nfrom cte_total\\n","compare_result":"1111111111111111111111","title_slug":"find-total-time-spent-by-each-employee","has_notes":false,"flag_type":1,"frontend_id":130},{"id":1734796093,"question_id":1734,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days","timestamp":1755165918,"status":10,"status_display":"Accepted","runtime":"370 ms","url":"/submissions/detail/1734796093/","is_pending":"Not Pending","title":"Bank Account Summary II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name as name, sum(t.amount) as balance\\nfrom Users u inner join Transactions t on u.account = t.account \\ngroup by u.name\\nhaving sum(t.amount) > 10000\\n\\n\\n\\n\\n","compare_result":"111111111111111111","title_slug":"bank-account-summary-ii","has_notes":false,"flag_type":1,"frontend_id":129},{"id":1734795005,"question_id":1734,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days","timestamp":1755165844,"status":10,"status_display":"Accepted","runtime":"542 ms","url":"/submissions/detail/1734795005/","is_pending":"Not Pending","title":"Bank Account Summary II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name as name, sum(t.amount) as balance\\nfrom Users u join Transactions t on u.account = t.account \\ngroup by u.name\\nhaving sum(t.amount) > 10000\\n\\n\\n\\n\\n","compare_result":"111111111111111111","title_slug":"bank-account-summary-ii","has_notes":false,"flag_type":1,"frontend_id":128},{"id":1727850571,"question_id":1523,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754649539,"status":10,"status_display":"Accepted","runtime":"778 ms","url":"/submissions/detail/1727850571/","is_pending":"Not Pending","title":"Capital Gain/Loss","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect stock_name, \\nsum(case when operation = \'Sell\' then price\\n    when operation = \'Buy\' then -price\\n    end \\n    ) as capital_gain_loss \\nfrom stocks \\ngroup by stock_name   \\norder by 2 desc","compare_result":"111111111111111111","title_slug":"capital-gainloss","has_notes":false,"flag_type":1,"frontend_id":127},{"id":1727783335,"question_id":1523,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1754644658,"status":10,"status_display":"Accepted","runtime":"747 ms","url":"/submissions/detail/1727783335/","is_pending":"Not Pending","title":"Capital Gain/Loss","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect stock_name, \\nsum(case when operation = \'Sell\' then price\\n    when operation = \'Buy\' then -price\\n    end \\n    ) as capital_gain_loss \\nfrom stocks \\ngroup by stock_name   \\norder by 2 desc","compare_result":"111111111111111111","title_slug":"capital-gainloss","has_notes":false,"flag_type":1,"frontend_id":126},{"id":1720388092,"question_id":1301,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754124205,"status":10,"status_display":"Accepted","runtime":"1001 ms","url":"/submissions/detail/1720388092/","is_pending":"Not Pending","title":"Reformat Department Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- SELECT ID,\\n-- sum(case when month = \'Jan\' then revenue end) Jan_Revenue,\\n-- sum(case when month = \'Feb\' then revenue end) Feb_Revenue,\\n-- sum(case when month = \'Mar\' then revenue end) Mar_Revenue,-- \\"Mar\\",\\n-- sum(case when month = \'Apr\' then revenue end) Apr_Revenue,-- \\"Apr\\",\\n-- sum(case when month = \'May\' then revenue end) May_Revenue,-- \\"May\\",\\n-- sum(case when month = \'Jun\' then revenue end) Jun_Revenue,-- \\"Jun\\",\\n-- sum(case when month = \'Jul\' then revenue end) Jul_Revenue,-- \\"Jul\\",\\n-- sum(case when month = \'Aug\' then revenue end) Aug_Revenue,-- \\"Aug\\",\\n-- sum(case when month = \'Sep\' then revenue end) Sep_Revenue,-- \\"Sep\\",\\n-- sum(case when month = \'Oct\' then revenue end) Oct_Revenue,-- \\"Oct\\",\\n-- sum(case when month = \'Nov\' then revenue end) Nov_Revenue,-- \\"Nov\\",\\n-- sum(case when month = \'Dec\' then revenue end) Dec_Revenue-- \\"Dec\\"]\\n-- from Department \\n-- group by id\\n-- order by 1\\n\\n--using pivot\\nselect  id,\\n    [Jan] AS Jan_Revenue,\\n    [Feb] AS Feb_Revenue,\\n    [Mar] AS Mar_Revenue,\\n    [Apr] AS Apr_Revenue,\\n    [May] AS May_Revenue,\\n    [Jun] AS Jun_Revenue,\\n    [Jul] AS Jul_Revenue,\\n    [Aug] AS Aug_Revenue,\\n    [Sep] AS Sep_Revenue,\\n    [Oct] AS Oct_Revenue,\\n    [Nov] AS Nov_Revenue,\\n    [Dec] AS Dec_Revenue\\nfrom\\n(\\n    select id,revenue,month from Department \\n) as st\\npivot\\n(\\n    sum(revenue) for month in\\n    ([Jan],[Feb],[Mar],[Apr], [May], [Jun],[Jul], [Aug], [Sep], [Oct], [Nov],[Dec])\\n) as pt","compare_result":"11111111111111111","title_slug":"reformat-department-table","has_notes":false,"flag_type":1,"frontend_id":125},{"id":1720381394,"question_id":1301,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754123726,"status":10,"status_display":"Accepted","runtime":"803 ms","url":"/submissions/detail/1720381394/","is_pending":"Not Pending","title":"Reformat Department Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT ID,\\nsum(case when month = \'Jan\' then revenue end) Jan_Revenue,\\nsum(case when month = \'Feb\' then revenue end) Feb_Revenue,\\nsum(case when month = \'Mar\' then revenue end) Mar_Revenue,-- \\"Mar\\",\\nsum(case when month = \'Apr\' then revenue end) Apr_Revenue,-- \\"Apr\\",\\nsum(case when month = \'May\' then revenue end) May_Revenue,-- \\"May\\",\\nsum(case when month = \'Jun\' then revenue end) Jun_Revenue,-- \\"Jun\\",\\nsum(case when month = \'Jul\' then revenue end) Jul_Revenue,-- \\"Jul\\",\\nsum(case when month = \'Aug\' then revenue end) Aug_Revenue,-- \\"Aug\\",\\nsum(case when month = \'Sep\' then revenue end) Sep_Revenue,-- \\"Sep\\",\\nsum(case when month = \'Oct\' then revenue end) Oct_Revenue,-- \\"Oct\\",\\nsum(case when month = \'Nov\' then revenue end) Nov_Revenue,-- \\"Nov\\",\\nsum(case when month = \'Dec\' then revenue end) Dec_Revenue-- \\"Dec\\"]\\nfrom Department \\ngroup by id\\norder by 1\\n","compare_result":"11111111111111111","title_slug":"reformat-department-table","has_notes":false,"flag_type":1,"frontend_id":124},{"id":1720320685,"question_id":1268,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754119366,"status":10,"status_display":"Accepted","runtime":"1276 ms","url":"/submissions/detail/1720320685/","is_pending":"Not Pending","title":"Market Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect U.user_id AS buyer_id , U.join_date, ISNULL(COUNT(O.order_id),0) AS orders_in_2019\\nFROM Users U LEFT JOIN Orders O ON U.user_id = O.buyer_id \\nAND YEAR(order_date) = \'2019\'\\nGROUP BY U.user_id, U.join_date","compare_result":"1111111111111111","title_slug":"market-analysis-i","has_notes":false,"flag_type":1,"frontend_id":123},{"id":1720256841,"question_id":1174,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754115581,"status":10,"status_display":"Accepted","runtime":"2679 ms","url":"/submissions/detail/1720256841/","is_pending":"Not Pending","title":"Sales Analysis III","memory":"0.0B","code":"select product_id, product_name from product p\\nwhere exists(\\n    SELECT 1 \\n    FROM Sales s\\n    where s.product_id = p.product_id \\n    and  s.sale_date BETWEEN \'2019-01-01\' AND \'2019-03-31\'\\n)\\nand not exists(\\n    SELECT 1 \\n    FROM Sales s\\n    where s.product_id = p.product_id \\n    and  s.sale_date not BETWEEN \'2019-01-01\' AND \'2019-03-31\'\\n)\\n","compare_result":"111111111111111","title_slug":"sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":122},{"id":1720248662,"question_id":1174,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754115114,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1720248662/","is_pending":"Not Pending","title":"Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect p.product_id  ,p.product_name \\nfrom Product p join Sales s\\non p.product_id = s.product_id\\nwhere sale_date between \'2019-01-01\' and \'2019-03-31\'\\nand p.product_id not in (select distinct product_id from sales where sale_date not between \'2019-01-01\' and \'2019-03-31\')","compare_result":"111100000000011","title_slug":"sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":121},{"id":1720218858,"question_id":1136,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754113338,"status":10,"status_display":"Accepted","runtime":"667 ms","url":"/submissions/detail/1720218858/","is_pending":"Not Pending","title":"Actors and Directors Who Cooperated At Least Three Times","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect actor_id,director_id \\nfrom ActorDirector  \\ngroup by actor_id,director_id\\nhaving count(*) >= 3","compare_result":"111111111111","title_slug":"actors-and-directors-who-cooperated-at-least-three-times","has_notes":false,"flag_type":1,"frontend_id":120},{"id":1717848521,"question_id":627,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1753936087,"status":10,"status_display":"Accepted","runtime":"297 ms","url":"/submissions/detail/1717848521/","is_pending":"Not Pending","title":"Swap Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nupdate Salary\\nset sex = case\\n        when sex = \'m\' then \'f\'\\n        when sex = \'f\' then \'m\'\\n    end \\n\\n","compare_result":"11111111","title_slug":"swap-salary","has_notes":false,"flag_type":1,"frontend_id":119},{"id":1716590365,"question_id":608,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1753849899,"status":10,"status_display":"Accepted","runtime":"340 ms","url":"/submissions/detail/1716590365/","is_pending":"Not Pending","title":"Tree Node","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect id,\\ncase when p_id is null then \'Root\' \\n     when exists(select 1 from tree b where b.p_id = a.id) then \'Inner\'\\n     -- checks if id is present in p_id as parent.\\n     else \'Leaf\'\\nend as \'type\' \\nfrom tree a","compare_result":"11111111111111111111","title_slug":"tree-node","has_notes":false,"flag_type":1,"frontend_id":118},{"id":1714062270,"question_id":607,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1753677036,"status":10,"status_display":"Accepted","runtime":"963 ms","url":"/submissions/detail/1714062270/","is_pending":"Not Pending","title":"Sales Person","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name\\nfrom SalesPerson \\nwhere sales_id not in (select sales_id from orders\\nwhere com_id in (select com_id from Company where name = \'RED\'))","compare_result":"111111111111111111111","title_slug":"sales-person","has_notes":false,"flag_type":1,"frontend_id":117},{"id":1710846053,"question_id":601,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0weeks, 4\xc2\xa0days","timestamp":1753439210,"status":10,"status_display":"Accepted","runtime":"307 ms","url":"/submissions/detail/1710846053/","is_pending":"Not Pending","title":"Human Traffic of Stadium","memory":"0.0B","code":"with cte as\\n(\\n    select *, \\n    id - row_number() over(order by id) as rnk\\n    from stadium\\n    where people >= 100\\n)\\nselect id, visit_date, people\\nfrom cte\\nwhere rnk in\\n(select rnk from cte group by rnk having count(*) >= 3)","compare_result":"111111111111111","title_slug":"human-traffic-of-stadium","has_notes":false,"flag_type":1,"frontend_id":116},{"id":1709286509,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1753334822,"status":10,"status_display":"Accepted","runtime":"1294 ms","url":"/submissions/detail/1709286509/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect player_id , min(event_date ) as first_login \\nfrom Activity \\ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":115},{"id":1709236092,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1753331620,"status":10,"status_display":"Accepted","runtime":"1290 ms","url":"/submissions/detail/1709236092/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect player_id , min(event_date ) as first_login \\nfrom Activity \\ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":114},{"id":1708309019,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1753263559,"status":10,"status_display":"Accepted","runtime":"351 ms","url":"/submissions/detail/1708309019/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"SELECT\\n    request_at as Day,\\n    ROUND(SUM(CASE WHEN status LIKE \'cancelled%\' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) * 1.0, 2) as \'Cancellation Rate\'\\nFROM\\n    Trips t\\nJOIN Users uc\\n    ON t.client_id = uc.users_id\\nJOIN Users ud\\n    ON t.driver_id = ud.users_id\\nWHERE\\n    uc.banned = \'No\'\\n    AND ud. banned = \'No\'\\n    AND request_at BETWEEN \'2013-01-01\' AND \'2013-10-03\'\\nGROUP BY\\n    request_at\\nORDER BY\\n    request_at\\n\\n-- WITH cte_a AS (\\n--     -- Only include trips where both client and driver are not banned\\n--     SELECT * \\n--     FROM Trips\\n--     WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n--       AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n-- ), \\n-- cte_total_cnt AS (\\n--     -- Count total unbanned requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_total_request\\n--     FROM cte_a \\n--     GROUP BY request_at\\n-- ),\\n-- cte_cancelled_cnt AS (\\n--     -- Count unbanned cancelled requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_cancelled\\n--     FROM cte_a\\n--     WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n--     GROUP BY request_at\\n-- )\\n-- SELECT \\n--     t.request_at AS Day,\\n--     ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\n-- FROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\n-- ON t.request_at = c.request_at\\n-- WHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\n-- ORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":113},{"id":1708304798,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1753263298,"status":10,"status_display":"Accepted","runtime":"483 ms","url":"/submissions/detail/1708304798/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"WITH cte_a AS (\\n    -- Only include trips where both client and driver are not banned\\n    SELECT * \\n    FROM Trips\\n    WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n      AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n), \\ncte_total_cnt AS (\\n    -- Count total unbanned requests per day\\n    SELECT request_at, COUNT(*) AS cnt_total_request\\n    FROM cte_a \\n    GROUP BY request_at\\n),\\ncte_cancelled_cnt AS (\\n    -- Count unbanned cancelled requests per day\\n    SELECT request_at, COUNT(*) AS cnt_cancelled\\n    FROM cte_a\\n    WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n    GROUP BY request_at\\n)\\nSELECT \\n    t.request_at AS Day,\\n    ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\nFROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\nON t.request_at = c.request_at\\nWHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\nORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":112}],"has_next":true,"last_key":""}'
2025-08-19 16:20:03,821 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:03,828 [INFO] __main__.py:245 - Writing find-total-time-spent-by-each-employee/2025-08-19 12.57.50 - Accepted - runtime 348ms - memory 0.0B.sql
2025-08-19 16:20:03,830 [INFO] __main__.py:245 - Writing find-total-time-spent-by-each-employee/2025-08-19 12.57.11 - Accepted - runtime 402ms - memory 0.0B.sql
2025-08-19 16:20:04,171 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:04,176 [INFO] __main__.py:245 - Writing bank-account-summary-ii/2025-08-14 15.35.18 - Accepted - runtime 370ms - memory 0.0B.sql
2025-08-19 16:20:04,178 [INFO] __main__.py:245 - Writing bank-account-summary-ii/2025-08-14 15.34.04 - Accepted - runtime 542ms - memory 0.0B.sql
2025-08-19 16:20:04,504 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:04,509 [INFO] __main__.py:245 - Writing capital-gainloss/2025-08-08 16.08.59 - Accepted - runtime 778ms - memory 0.0B.sql
2025-08-19 16:20:04,511 [INFO] __main__.py:245 - Writing capital-gainloss/2025-08-08 14.47.38 - Accepted - runtime 747ms - memory 0.0B.sql
2025-08-19 16:20:04,877 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:04,883 [INFO] __main__.py:245 - Writing reformat-department-table/2025-08-02 14.13.25 - Accepted - runtime 1001ms - memory 0.0B.sql
2025-08-19 16:20:04,885 [INFO] __main__.py:245 - Writing reformat-department-table/2025-08-02 14.05.26 - Accepted - runtime 803ms - memory 0.0B.sql
2025-08-19 16:20:05,210 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:05,216 [INFO] __main__.py:245 - Writing market-analysis-i/2025-08-02 12.52.46 - Accepted - runtime 1276ms - memory 0.0B.sql
2025-08-19 16:20:05,608 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:05,611 [INFO] __main__.py:245 - Writing sales-analysis-iii/2025-08-02 11.49.41 - Accepted - runtime 2679ms - memory 0.0B.sql
2025-08-19 16:20:05,613 [INFO] __main__.py:245 - Writing sales-analysis-iii/2025-08-02 11.41.54 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:06,104 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:06,113 [INFO] __main__.py:245 - Writing actors-and-directors-who-cooperated-at-least-three-times/2025-08-02 11.12.18 - Accepted - runtime 667ms - memory 0.0B.sql
2025-08-19 16:20:07,610 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:07,613 [INFO] __main__.py:245 - Writing swap-salary/2025-07-31 09.58.07 - Accepted - runtime 297ms - memory 0.0B.sql
2025-08-19 16:20:08,621 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:08,630 [INFO] __main__.py:245 - Writing tree-node/2025-07-30 10.01.39 - Accepted - runtime 340ms - memory 0.0B.sql
2025-08-19 16:20:08,990 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:08,990 [INFO] __main__.py:251 - sales-person/2025-07-28 10.00.36 - Accepted - runtime 963ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:09,505 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:09,509 [INFO] __main__.py:251 - human-traffic-of-stadium/2025-07-25 15.56.50 - Accepted - runtime 307ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:10,340 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:10,346 [INFO] __main__.py:251 - game-play-analysis-i/2025-07-24 10.57.02 - Accepted - runtime 1294ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:10,348 [INFO] __main__.py:245 - Writing game-play-analysis-i/2025-07-24 10.03.40 - Accepted - runtime 1290ms - memory 0.0B.sql
2025-08-19 16:20:10,765 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:10,769 [INFO] __main__.py:251 - trips-and-users/2025-07-23 15.09.19 - Accepted - runtime 351ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:10,772 [INFO] __main__.py:245 - Writing trips-and-users/2025-07-23 15.04.58 - Accepted - runtime 483ms - memory 0.0B.sql
2025-08-19 16:20:15,775 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-08-19 16:20:16,575 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-08-19 16:20:16,577 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1707070691,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1753179134,"status":10,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/1707070691/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"WITH helper AS\\n(\\n    SELECT \\n        E.name Employee, \\n        E.salary Salary,\\n        D.name Department,\\n        DENSE_RANK() OVER (PARTITION BY D.id ORDER BY salary DESC) rank\\n    FROM Employee E JOIN Department D\\n    ON D.id = E.departmentId\\n)\\nSELECT \\n    Employee, \\n    Salary,\\n    Department\\nFROM helper\\nWHERE rank < 4;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":111},{"id":1707069861,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1753179084,"status":10,"status_display":"Accepted","runtime":"768 ms","url":"/submissions/detail/1707069861/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(\\nselect *, dense_rank() over(partition by e.departmentId order by e.salary desc) as rn\\nfrom Employee e \\n)\\nselect d.name as Department , e.name as Employee , e.salary\\nfrom cte_ranked e\\njoin Department d on e.departmentId = d.id \\nwhere rn <= 3","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":110},{"id":1705582347,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1753080312,"status":10,"status_display":"Accepted","runtime":"394 ms","url":"/submissions/detail/1705582347/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1703090868,"question_id":178,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752902814,"status":10,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/1703090868/","is_pending":"Not Pending","title":"Rank Scores","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT SCORE, DENSE_RANK() OVER(ORDER BY SCORE DESC) AS RANK\\nFROM SCORES\\n","compare_result":"11111111111","title_slug":"rank-scores","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92}],"has_next":true,"last_key":""}'
2025-08-19 16:20:16,949 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:16,951 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-22 15.42.14 - Accepted - runtime 459ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:16,953 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-22 15.41.24 - Accepted - runtime 768ms - memory 0.0B.sql
2025-08-19 16:20:17,319 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:17,323 [INFO] __main__.py:251 - department-highest-salary/2025-07-21 12.15.12 - Accepted - runtime 394ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:17,331 [INFO] __main__.py:245 - Writing department-highest-salary/2025-07-21 09.48.07 - Accepted - runtime 420ms - memory 0.0B.sql
2025-08-19 16:20:17,952 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:17,956 [INFO] __main__.py:251 - rank-scores/2025-07-19 10.56.54 - Accepted - runtime 362ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:18,307 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:18,310 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:18,313 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql
2025-08-19 16:20:18,319 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql
2025-08-19 16:20:18,331 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:18,715 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:18,731 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:18,735 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:18,753 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:18,763 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:18,784 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:18,802 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:18,814 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:18,819 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:18,824 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:18,829 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:19,238 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:19,248 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:24,259 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-08-19 16:20:24,798 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-08-19 16:20:24,800 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72}],"has_next":true,"last_key":""}'
2025-08-19 16:20:25,193 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:25,193 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:25,586 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:25,587 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:26,214 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:26,218 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:26,561 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:26,567 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:26,569 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:26,573 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:26,579 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:27,018 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:27,019 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:27,021 [INFO] __main__.py:245 - Writing fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:27,024 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql
2025-08-19 16:20:27,445 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:27,449 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:27,452 [INFO] __main__.py:245 - Writing investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:29,396 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:29,404 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:29,820 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:29,824 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:30,206 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:30,210 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:30,212 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql
2025-08-19 16:20:30,218 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:30,567 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:30,571 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:30,577 [INFO] __main__.py:245 - Writing exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:30,930 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:30,934 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:35,939 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-08-19 16:20:36,354 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-08-19 16:20:36,364 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52}],"has_next":true,"last_key":""}'
2025-08-19 16:20:36,368 [INFO] __main__.py:245 - Writing employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:36,780 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:36,786 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:37,250 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:37,252 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:37,577 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:37,583 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:37,585 [INFO] __main__.py:245 - Writing product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql
2025-08-19 16:20:37,930 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:37,937 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:37,937 [INFO] __main__.py:245 - Writing consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:38,444 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:38,449 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:38,840 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:38,846 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:39,370 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:39,376 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:39,376 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:39,380 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:39,382 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:39,786 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:39,794 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:39,794 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:39,803 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:40,190 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:40,195 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:40,598 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:40,602 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:41,059 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:41,063 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:41,556 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:41,561 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:46,575 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-08-19 16:20:47,119 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-08-19 16:20:47,127 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32}],"has_next":true,"last_key":""}'
2025-08-19 16:20:47,129 [INFO] __main__.py:245 - Writing product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:47,645 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:47,649 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:47,659 [INFO] __main__.py:245 - Writing user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:48,894 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:48,900 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:49,314 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:49,316 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:49,724 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:49,728 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:50,927 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:50,931 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:51,334 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:51,338 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:51,848 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:51,852 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:52,229 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:52,239 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:52,679 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:52,698 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:53,081 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:53,159 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:53,164 [INFO] __main__.py:245 - Writing average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql
2025-08-19 16:20:53,515 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:53,556 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:53,560 [INFO] __main__.py:245 - Writing confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:20:54,056 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:54,059 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:54,410 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:54,414 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:55,204 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:55,209 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:55,579 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:20:55,581 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:20:55,583 [INFO] __main__.py:245 - Writing average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql
2025-08-19 16:21:00,610 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-08-19 16:21:01,574 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-08-19 16:21:01,577 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1029511014,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1692792516,"status":10,"status_display":"Accepted","runtime":"1642 ms","url":"/submissions/detail/1029511014/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1029510363,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1692792466,"status":10,"status_display":"Accepted","runtime":"1053 ms","url":"/submissions/detail/1029510363/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1016455334,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1691573885,"status":10,"status_display":"Accepted","runtime":"1095 ms","url":"/submissions/detail/1016455334/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1016455058,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1691573858,"status":10,"status_display":"Accepted","runtime":"2190 ms","url":"/submissions/detail/1016455058/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1009234981,"question_id":183,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1690881420,"status":10,"status_display":"Accepted","runtime":"724 ms","url":"/submissions/detail/1009234981/","is_pending":"Not Pending","title":"Customers Who Never Order","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as customers from Customers where id not in(select customerid from orders)","compare_result":"111111111111","title_slug":"customers-who-never-order","has_notes":false,"flag_type":1,"frontend_id":12}],"has_next":true,"last_key":""}'
2025-08-19 16:21:02,300 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:02,884 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:03,826 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:04,115 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:05,096 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:05,098 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:06,047 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:06,052 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:06,791 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:07,569 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:08,464 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:08,469 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:09,125 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:09,138 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:09,876 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:10,038 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:10,510 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:10,637 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:11,140 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:11,142 [INFO] __main__.py:251 - customer-placing-the-largest-number-of-orders/2024-08-11 22.33.14 - Accepted - runtime 444ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:12,385 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:12,547 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2024-08-08 15.31.19 - Accepted - runtime 1265ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:12,942 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:13,091 [INFO] __main__.py:251 - top-travellers/2024-08-02 22.39.39 - Accepted - runtime 843ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:13,093 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.53.10 - Accepted - runtime 1344ms - memory 0.0B.sql
2025-08-19 16:21:13,096 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.48.36 - Runtime Error - runtime NA - memory NA.sql
2025-08-19 16:21:13,098 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-25 10.40.12 - Accepted - runtime 1338ms - memory 0.0B.sql
2025-08-19 16:21:14,044 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.38.36 - Accepted - runtime 1642ms - memory 0.0B.sql
2025-08-19 16:21:14,048 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.37.46 - Accepted - runtime 1053ms - memory 0.0B.sql
2025-08-19 16:21:14,049 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.08.05 - Accepted - runtime 1095ms - memory 0.0B.sql
2025-08-19 16:21:14,054 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.07.38 - Accepted - runtime 2190ms - memory 0.0B.sql
2025-08-19 16:21:14,940 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:15,464 [INFO] __main__.py:251 - customers-who-never-order/2023-08-01 14.47.00 - Accepted - runtime 724ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:20,466 [DEBUG] leetcode.py:150 - Exporting submissions from 120 to 140
2025-08-19 16:21:21,032 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=120&limit=20 HTTP/1.1" 200 None
2025-08-19 16:21:21,034 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1009161386,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1690874221,"status":10,"status_display":"Accepted","runtime":"875 ms","url":"/submissions/detail/1009161386/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1009161138,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1690874197,"status":10,"status_display":"Accepted","runtime":"1543 ms","url":"/submissions/detail/1009161138/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1004211677,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1690353557,"status":10,"status_display":"Accepted","runtime":"981 ms","url":"/submissions/detail/1004211677/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as Employee from Employee e1 where salary > (select salary from Employee where id = e1.managerId)","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1004210595,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1690353467,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1004210595/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\nselect * from Employee e1 where salary > (select salary from Emplpoyee where id = e1.managerId)","compare_result":"00000000000000","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1003745627,"question_id":175,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1690304358,"status":10,"status_display":"Accepted","runtime":"1086 ms","url":"/submissions/detail/1003745627/","is_pending":"Not Pending","title":"Combine Two Tables","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect FirstName, LastName, city, state from person left join address \\r\\non person.personId = address.personId ","compare_result":"11111111","title_slug":"combine-two-tables","has_notes":false,"flag_type":1,"frontend_id":7},{"id":842546003,"question_id":327,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 9\xc2\xa0months","timestamp":1668329684,"status":10,"status_display":"Accepted","runtime":"2624 ms","url":"/submissions/detail/842546003/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"100.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} lower\\n * @param {number} upper\\n * @return {number}\\n */\\nvar countRangeSum = function(nums, lower, upper) {\\n    let preSum = Array(nums.length + 1).fill(0);\\n  let count = 0;\\n\\n  // create preSum array, use preSum to check the sum range\\n  for (let i = 0; i < nums.length; i++) {\\n      preSum[i + 1] = preSum[i] + nums[i];\\n  }\\n\\n  const sort = function(preSum) {\\n      if (preSum.length === 1) return preSum;\\n\\n      let mid = Math.floor(preSum.length / 2);\\n      let left = sort(preSum.slice(0, mid));\\n      let right = sort(preSum.slice(mid))\\n\\n      return merge(left, right);\\n  }\\n\\n  const merge = function(left, right) {\\n      let start = 0;\\n      let end = 0;\\n\\n      for (let i = 0; i < left.length; i++) {\\n          // all elements before start index, after subtracting left[i] are less than lower, which means all elements after start index are bigger or equal than lower\\n          while (start < right.length && right[start] - left[i] < lower) {\\n              start++;\\n          }\\n          // similarly, all elements before end index are less or euqal then upper\\n          while (end < right.length && right[end] - left[i] <= upper) {\\n              end++;\\n          }\\n\\n          // since the initial values of start and end are the same, and upper >= lower, so end will >= start too, which means the rest of the end minus start element difference will fall between [lower, upper].\\n          count += end - start;\\n      }\\n\\n      let sort = [];\\n      while (left.length && right.length) {\\n          if (left[0] <= right[0]) {\\n              sort.push(left.shift());\\n          } else {\\n              sort.push(right.shift());\\n          }\\n      }\\n\\n      return [...sort, ...left, ...right];\\n  }\\n\\n  sort(preSum);\\n  return count;\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1,"frontend_id":6},{"id":842024680,"question_id":2561,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 9\xc2\xa0months","timestamp":1668266557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/842024680/","is_pending":"Not Pending","title":"Number of Distinct Averages","memory":"N/A","code":"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    for(let i = 0; i < nums.length;i++)\\n    {\\n        let newnums = nums;\\n        let  res = [],max = Math.max(...nums), min = Math.min(...nums);   \\n        res[0] = min, res[1] = max\\n        let avg = (max+min)/2\\n    }\\n    \\n    \\n};","compare_result":"000000000000000000000000000000000000","title_slug":"number-of-distinct-averages","has_notes":false,"flag_type":1,"frontend_id":5},{"id":836960924,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 9\xc2\xa0months","timestamp":1667591646,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/836960924/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"42.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":4},{"id":836960390,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 9\xc2\xa0months","timestamp":1667591580,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/836960390/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"43 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":3},{"id":831406918,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 9\xc2\xa0months","timestamp":1666877523,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/831406918/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":2},{"id":831395512,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 9\xc2\xa0months","timestamp":1666876149,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/831395512/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-08-19 16:21:21,854 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:21,858 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.47.01 - Accepted - runtime 875ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:21,860 [INFO] __main__.py:245 - Writing duplicate-emails/2023-08-01 12.46.37 - Accepted - runtime 1543ms - memory 0.0B.sql
2025-08-19 16:21:21,864 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.09.17 - Accepted - runtime 981ms - memory 0.0B.sql
2025-08-19 16:21:21,866 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.07.47 - Runtime Error - runtime NA - memory NA.sql
2025-08-19 16:21:26,870 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:26,874 [INFO] __main__.py:251 - combine-two-tables/2023-07-25 22.29.18 - Accepted - runtime 1086ms - memory 0.0B.sql already exists, skipping it
2025-08-19 16:21:27,541 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:29,394 [INFO] __main__.py:251 - count-of-range-sum/2022-11-13 14.24.44 - Accepted - runtime 2624ms - memory 100.9MB.js already exists, skipping it
2025-08-19 16:21:30,041 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:30,444 [INFO] __main__.py:251 - number-of-distinct-averages/2022-11-12 20.52.37 - Wrong Answer - runtime NA - memory NA.js already exists, skipping it
2025-08-19 16:21:31,041 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:31,049 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.24.06 - Accepted - runtime 91ms - memory 42.9MB.js already exists, skipping it
2025-08-19 16:21:31,049 [INFO] __main__.py:245 - Writing find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.23.00 - Accepted - runtime 96ms - memory 43MB.js
2025-08-19 16:21:32,896 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-19 16:21:33,019 [INFO] __main__.py:251 - valid-anagram/2022-10-27 19.02.03 - Accepted - runtime 171ms - memory 49.4MB.js already exists, skipping it
2025-08-19 16:21:33,021 [INFO] __main__.py:245 - Writing valid-anagram/2022-10-27 18.39.09 - Accepted - runtime 122ms - memory 49.4MB.js
2025-08-26 11:54:00,310 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-08-26 11:54:00,312 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-08-26 11:55:42,020 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-08-26 11:55:43,499 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-08-26 11:55:43,503 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1748633428,"question_id":1948,"lang":"mssql","lang_name":"MS SQL Server","time":"6Â minutes","timestamp":1756189167,"status":10,"status_display":"Accepted","runtime":"339 ms","url":"/submissions/detail/1748633428/","is_pending":"Not Pending","title":"Rearrange Products Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\nselect product_id ,store  , price \nfrom products as p\nunpivot\n(price for store in (store1,store2, store3))\nas unpivotproducts","compare_result":"1111111111111111111111","title_slug":"rearrange-products-table","has_notes":false,"flag_type":1,"frontend_id":132}],"has_next":true,"last_key":""}
2025-08-26 11:55:44,507 [DEBUG] leetcode.py:112 - User is logged in
2025-08-26 11:55:44,507 [INFO] leetcode.py:95 - Cookie set successful
2025-08-26 11:55:44,507 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-08-26 11:55:45,672 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-08-26 11:55:45,674 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1748633428,"question_id":1948,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0minutes","timestamp":1756189167,"status":10,"status_display":"Accepted","runtime":"339 ms","url":"/submissions/detail/1748633428/","is_pending":"Not Pending","title":"Rearrange Products Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id ,store  , price \\nfrom products as p\\nunpivot\\n(price for store in (store1,store2, store3))\\nas unpivotproducts","compare_result":"1111111111111111111111","title_slug":"rearrange-products-table","has_notes":false,"flag_type":1,"frontend_id":132},{"id":1740548024,"question_id":1892,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1755588470,"status":10,"status_display":"Accepted","runtime":"348 ms","url":"/submissions/detail/1740548024/","is_pending":"Not Pending","title":"Find Total Time Spent by Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n/*\\nwith cte_total as\\n(\\n    select emp_id, event_day, sum(in_time) tit, sum(out_time) tot\\n    from employees\\n    group by emp_id,event_day\\n)\\nselect event_day as [day], emp_id, tot - tit as total_time\\nfrom cte_total\\n*/\\n\\nselect event_day as day, emp_id, sum(out_time-in_time) as total_time\\nfrom employees\\ngroup by event_day, emp_id\\n","compare_result":"1111111111111111111111","title_slug":"find-total-time-spent-by-each-employee","has_notes":false,"flag_type":1,"frontend_id":131},{"id":1740547461,"question_id":1892,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 22\xc2\xa0hours","timestamp":1755588431,"status":10,"status_display":"Accepted","runtime":"402 ms","url":"/submissions/detail/1740547461/","is_pending":"Not Pending","title":"Find Total Time Spent by Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_total as\\n(\\n    select emp_id, event_day, sum(in_time) tit, sum(out_time) tot\\n    from employees\\n    group by emp_id,event_day\\n)\\nselect event_day as [day], emp_id, tot - tit as total_time\\nfrom cte_total\\n","compare_result":"1111111111111111111111","title_slug":"find-total-time-spent-by-each-employee","has_notes":false,"flag_type":1,"frontend_id":130},{"id":1734796093,"question_id":1734,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1755165918,"status":10,"status_display":"Accepted","runtime":"370 ms","url":"/submissions/detail/1734796093/","is_pending":"Not Pending","title":"Bank Account Summary II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name as name, sum(t.amount) as balance\\nfrom Users u inner join Transactions t on u.account = t.account \\ngroup by u.name\\nhaving sum(t.amount) > 10000\\n\\n\\n\\n\\n","compare_result":"111111111111111111","title_slug":"bank-account-summary-ii","has_notes":false,"flag_type":1,"frontend_id":129},{"id":1734795005,"question_id":1734,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1755165844,"status":10,"status_display":"Accepted","runtime":"542 ms","url":"/submissions/detail/1734795005/","is_pending":"Not Pending","title":"Bank Account Summary II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name as name, sum(t.amount) as balance\\nfrom Users u join Transactions t on u.account = t.account \\ngroup by u.name\\nhaving sum(t.amount) > 10000\\n\\n\\n\\n\\n","compare_result":"111111111111111111","title_slug":"bank-account-summary-ii","has_notes":false,"flag_type":1,"frontend_id":128},{"id":1727850571,"question_id":1523,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754649539,"status":10,"status_display":"Accepted","runtime":"778 ms","url":"/submissions/detail/1727850571/","is_pending":"Not Pending","title":"Capital Gain/Loss","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect stock_name, \\nsum(case when operation = \'Sell\' then price\\n    when operation = \'Buy\' then -price\\n    end \\n    ) as capital_gain_loss \\nfrom stocks \\ngroup by stock_name   \\norder by 2 desc","compare_result":"111111111111111111","title_slug":"capital-gainloss","has_notes":false,"flag_type":1,"frontend_id":127},{"id":1727783335,"question_id":1523,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754644658,"status":10,"status_display":"Accepted","runtime":"747 ms","url":"/submissions/detail/1727783335/","is_pending":"Not Pending","title":"Capital Gain/Loss","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect stock_name, \\nsum(case when operation = \'Sell\' then price\\n    when operation = \'Buy\' then -price\\n    end \\n    ) as capital_gain_loss \\nfrom stocks \\ngroup by stock_name   \\norder by 2 desc","compare_result":"111111111111111111","title_slug":"capital-gainloss","has_notes":false,"flag_type":1,"frontend_id":126},{"id":1720388092,"question_id":1301,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754124205,"status":10,"status_display":"Accepted","runtime":"1001 ms","url":"/submissions/detail/1720388092/","is_pending":"Not Pending","title":"Reformat Department Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- SELECT ID,\\n-- sum(case when month = \'Jan\' then revenue end) Jan_Revenue,\\n-- sum(case when month = \'Feb\' then revenue end) Feb_Revenue,\\n-- sum(case when month = \'Mar\' then revenue end) Mar_Revenue,-- \\"Mar\\",\\n-- sum(case when month = \'Apr\' then revenue end) Apr_Revenue,-- \\"Apr\\",\\n-- sum(case when month = \'May\' then revenue end) May_Revenue,-- \\"May\\",\\n-- sum(case when month = \'Jun\' then revenue end) Jun_Revenue,-- \\"Jun\\",\\n-- sum(case when month = \'Jul\' then revenue end) Jul_Revenue,-- \\"Jul\\",\\n-- sum(case when month = \'Aug\' then revenue end) Aug_Revenue,-- \\"Aug\\",\\n-- sum(case when month = \'Sep\' then revenue end) Sep_Revenue,-- \\"Sep\\",\\n-- sum(case when month = \'Oct\' then revenue end) Oct_Revenue,-- \\"Oct\\",\\n-- sum(case when month = \'Nov\' then revenue end) Nov_Revenue,-- \\"Nov\\",\\n-- sum(case when month = \'Dec\' then revenue end) Dec_Revenue-- \\"Dec\\"]\\n-- from Department \\n-- group by id\\n-- order by 1\\n\\n--using pivot\\nselect  id,\\n    [Jan] AS Jan_Revenue,\\n    [Feb] AS Feb_Revenue,\\n    [Mar] AS Mar_Revenue,\\n    [Apr] AS Apr_Revenue,\\n    [May] AS May_Revenue,\\n    [Jun] AS Jun_Revenue,\\n    [Jul] AS Jul_Revenue,\\n    [Aug] AS Aug_Revenue,\\n    [Sep] AS Sep_Revenue,\\n    [Oct] AS Oct_Revenue,\\n    [Nov] AS Nov_Revenue,\\n    [Dec] AS Dec_Revenue\\nfrom\\n(\\n    select id,revenue,month from Department \\n) as st\\npivot\\n(\\n    sum(revenue) for month in\\n    ([Jan],[Feb],[Mar],[Apr], [May], [Jun],[Jul], [Aug], [Sep], [Oct], [Nov],[Dec])\\n) as pt","compare_result":"11111111111111111","title_slug":"reformat-department-table","has_notes":false,"flag_type":1,"frontend_id":125},{"id":1720381394,"question_id":1301,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754123726,"status":10,"status_display":"Accepted","runtime":"803 ms","url":"/submissions/detail/1720381394/","is_pending":"Not Pending","title":"Reformat Department Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT ID,\\nsum(case when month = \'Jan\' then revenue end) Jan_Revenue,\\nsum(case when month = \'Feb\' then revenue end) Feb_Revenue,\\nsum(case when month = \'Mar\' then revenue end) Mar_Revenue,-- \\"Mar\\",\\nsum(case when month = \'Apr\' then revenue end) Apr_Revenue,-- \\"Apr\\",\\nsum(case when month = \'May\' then revenue end) May_Revenue,-- \\"May\\",\\nsum(case when month = \'Jun\' then revenue end) Jun_Revenue,-- \\"Jun\\",\\nsum(case when month = \'Jul\' then revenue end) Jul_Revenue,-- \\"Jul\\",\\nsum(case when month = \'Aug\' then revenue end) Aug_Revenue,-- \\"Aug\\",\\nsum(case when month = \'Sep\' then revenue end) Sep_Revenue,-- \\"Sep\\",\\nsum(case when month = \'Oct\' then revenue end) Oct_Revenue,-- \\"Oct\\",\\nsum(case when month = \'Nov\' then revenue end) Nov_Revenue,-- \\"Nov\\",\\nsum(case when month = \'Dec\' then revenue end) Dec_Revenue-- \\"Dec\\"]\\nfrom Department \\ngroup by id\\norder by 1\\n","compare_result":"11111111111111111","title_slug":"reformat-department-table","has_notes":false,"flag_type":1,"frontend_id":124},{"id":1720320685,"question_id":1268,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0weeks, 2\xc2\xa0days","timestamp":1754119366,"status":10,"status_display":"Accepted","runtime":"1276 ms","url":"/submissions/detail/1720320685/","is_pending":"Not Pending","title":"Market Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect U.user_id AS buyer_id , U.join_date, ISNULL(COUNT(O.order_id),0) AS orders_in_2019\\nFROM Users U LEFT JOIN Orders O ON U.user_id = O.buyer_id \\nAND YEAR(order_date) = \'2019\'\\nGROUP BY U.user_id, U.join_date","compare_result":"1111111111111111","title_slug":"market-analysis-i","has_notes":false,"flag_type":1,"frontend_id":123},{"id":1720256841,"question_id":1174,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754115581,"status":10,"status_display":"Accepted","runtime":"2679 ms","url":"/submissions/detail/1720256841/","is_pending":"Not Pending","title":"Sales Analysis III","memory":"0.0B","code":"select product_id, product_name from product p\\nwhere exists(\\n    SELECT 1 \\n    FROM Sales s\\n    where s.product_id = p.product_id \\n    and  s.sale_date BETWEEN \'2019-01-01\' AND \'2019-03-31\'\\n)\\nand not exists(\\n    SELECT 1 \\n    FROM Sales s\\n    where s.product_id = p.product_id \\n    and  s.sale_date not BETWEEN \'2019-01-01\' AND \'2019-03-31\'\\n)\\n","compare_result":"111111111111111","title_slug":"sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":122},{"id":1720248662,"question_id":1174,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754115114,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1720248662/","is_pending":"Not Pending","title":"Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect p.product_id  ,p.product_name \\nfrom Product p join Sales s\\non p.product_id = s.product_id\\nwhere sale_date between \'2019-01-01\' and \'2019-03-31\'\\nand p.product_id not in (select distinct product_id from sales where sale_date not between \'2019-01-01\' and \'2019-03-31\')","compare_result":"111100000000011","title_slug":"sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":121},{"id":1720218858,"question_id":1136,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0weeks, 3\xc2\xa0days","timestamp":1754113338,"status":10,"status_display":"Accepted","runtime":"667 ms","url":"/submissions/detail/1720218858/","is_pending":"Not Pending","title":"Actors and Directors Who Cooperated At Least Three Times","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect actor_id,director_id \\nfrom ActorDirector  \\ngroup by actor_id,director_id\\nhaving count(*) >= 3","compare_result":"111111111111","title_slug":"actors-and-directors-who-cooperated-at-least-three-times","has_notes":false,"flag_type":1,"frontend_id":120},{"id":1717848521,"question_id":627,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0weeks, 5\xc2\xa0days","timestamp":1753936087,"status":10,"status_display":"Accepted","runtime":"297 ms","url":"/submissions/detail/1717848521/","is_pending":"Not Pending","title":"Swap Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nupdate Salary\\nset sex = case\\n        when sex = \'m\' then \'f\'\\n        when sex = \'f\' then \'m\'\\n    end \\n\\n","compare_result":"11111111","title_slug":"swap-salary","has_notes":false,"flag_type":1,"frontend_id":119},{"id":1716590365,"question_id":608,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0weeks, 6\xc2\xa0days","timestamp":1753849899,"status":10,"status_display":"Accepted","runtime":"340 ms","url":"/submissions/detail/1716590365/","is_pending":"Not Pending","title":"Tree Node","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect id,\\ncase when p_id is null then \'Root\' \\n     when exists(select 1 from tree b where b.p_id = a.id) then \'Inner\'\\n     -- checks if id is present in p_id as parent.\\n     else \'Leaf\'\\nend as \'type\' \\nfrom tree a","compare_result":"11111111111111111111","title_slug":"tree-node","has_notes":false,"flag_type":1,"frontend_id":118},{"id":1714062270,"question_id":607,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1753677036,"status":10,"status_display":"Accepted","runtime":"963 ms","url":"/submissions/detail/1714062270/","is_pending":"Not Pending","title":"Sales Person","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name\\nfrom SalesPerson \\nwhere sales_id not in (select sales_id from orders\\nwhere com_id in (select com_id from Company where name = \'RED\'))","compare_result":"111111111111111111111","title_slug":"sales-person","has_notes":false,"flag_type":1,"frontend_id":117},{"id":1710846053,"question_id":601,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1753439210,"status":10,"status_display":"Accepted","runtime":"307 ms","url":"/submissions/detail/1710846053/","is_pending":"Not Pending","title":"Human Traffic of Stadium","memory":"0.0B","code":"with cte as\\n(\\n    select *, \\n    id - row_number() over(order by id) as rnk\\n    from stadium\\n    where people >= 100\\n)\\nselect id, visit_date, people\\nfrom cte\\nwhere rnk in\\n(select rnk from cte group by rnk having count(*) >= 3)","compare_result":"111111111111111","title_slug":"human-traffic-of-stadium","has_notes":false,"flag_type":1,"frontend_id":116},{"id":1709286509,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1753334822,"status":10,"status_display":"Accepted","runtime":"1294 ms","url":"/submissions/detail/1709286509/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect player_id , min(event_date ) as first_login \\nfrom Activity \\ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":115},{"id":1709236092,"question_id":1179,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1753331620,"status":10,"status_display":"Accepted","runtime":"1290 ms","url":"/submissions/detail/1709236092/","is_pending":"Not Pending","title":"Game Play Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect player_id , min(event_date ) as first_login \\nfrom Activity \\ngroup by player_id ","compare_result":"111111111111","title_slug":"game-play-analysis-i","has_notes":false,"flag_type":1,"frontend_id":114},{"id":1708309019,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1753263559,"status":10,"status_display":"Accepted","runtime":"351 ms","url":"/submissions/detail/1708309019/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"SELECT\\n    request_at as Day,\\n    ROUND(SUM(CASE WHEN status LIKE \'cancelled%\' THEN 1 ELSE 0 END) * 1.0 / COUNT(*) * 1.0, 2) as \'Cancellation Rate\'\\nFROM\\n    Trips t\\nJOIN Users uc\\n    ON t.client_id = uc.users_id\\nJOIN Users ud\\n    ON t.driver_id = ud.users_id\\nWHERE\\n    uc.banned = \'No\'\\n    AND ud. banned = \'No\'\\n    AND request_at BETWEEN \'2013-01-01\' AND \'2013-10-03\'\\nGROUP BY\\n    request_at\\nORDER BY\\n    request_at\\n\\n-- WITH cte_a AS (\\n--     -- Only include trips where both client and driver are not banned\\n--     SELECT * \\n--     FROM Trips\\n--     WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n--       AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n-- ), \\n-- cte_total_cnt AS (\\n--     -- Count total unbanned requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_total_request\\n--     FROM cte_a \\n--     GROUP BY request_at\\n-- ),\\n-- cte_cancelled_cnt AS (\\n--     -- Count unbanned cancelled requests per day\\n--     SELECT request_at, COUNT(*) AS cnt_cancelled\\n--     FROM cte_a\\n--     WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n--     GROUP BY request_at\\n-- )\\n-- SELECT \\n--     t.request_at AS Day,\\n--     ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\n-- FROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\n-- ON t.request_at = c.request_at\\n-- WHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\n-- ORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":113}],"has_next":true,"last_key":""}'
2025-08-26 11:55:46,169 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:55:46,180 [INFO] __main__.py:245 - Writing rearrange-products-table/2025-08-26 11.49.27 - Accepted - runtime 339ms - memory 0.0B.sql
2025-08-26 11:55:47,323 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:55:47,327 [INFO] __main__.py:251 - find-total-time-spent-by-each-employee/2025-08-19 12.57.50 - Accepted - runtime 348ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:55:47,327 [INFO] __main__.py:245 - Writing find-total-time-spent-by-each-employee/2025-08-19 12.57.11 - Accepted - runtime 402ms - memory 0.0B.sql
2025-08-26 11:55:47,884 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:55:47,893 [INFO] __main__.py:251 - bank-account-summary-ii/2025-08-14 15.35.18 - Accepted - runtime 370ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:55:47,896 [INFO] __main__.py:245 - Writing bank-account-summary-ii/2025-08-14 15.34.04 - Accepted - runtime 542ms - memory 0.0B.sql
2025-08-26 11:55:48,452 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:55:48,453 [INFO] __main__.py:251 - capital-gainloss/2025-08-08 16.08.59 - Accepted - runtime 778ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:55:48,453 [INFO] __main__.py:245 - Writing capital-gainloss/2025-08-08 14.47.38 - Accepted - runtime 747ms - memory 0.0B.sql
2025-08-26 11:55:48,850 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:55:48,895 [INFO] __main__.py:251 - reformat-department-table/2025-08-02 14.13.25 - Accepted - runtime 1001ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:55:48,895 [INFO] __main__.py:245 - Writing reformat-department-table/2025-08-02 14.05.26 - Accepted - runtime 803ms - memory 0.0B.sql
2025-08-26 11:55:49,466 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:55:49,466 [INFO] __main__.py:251 - market-analysis-i/2025-08-02 12.52.46 - Accepted - runtime 1276ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:55:50,128 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:55:50,130 [INFO] __main__.py:251 - sales-analysis-iii/2025-08-02 11.49.41 - Accepted - runtime 2679ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:55:50,132 [INFO] __main__.py:245 - Writing sales-analysis-iii/2025-08-02 11.41.54 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:55:50,613 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:55:50,692 [INFO] __main__.py:251 - actors-and-directors-who-cooperated-at-least-three-times/2025-08-02 11.12.18 - Accepted - runtime 667ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:55:51,415 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:55:51,416 [INFO] __main__.py:251 - swap-salary/2025-07-31 09.58.07 - Accepted - runtime 297ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:55:51,745 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:55:51,745 [INFO] __main__.py:251 - tree-node/2025-07-30 10.01.39 - Accepted - runtime 340ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:55:52,247 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:55:52,249 [INFO] __main__.py:251 - sales-person/2025-07-28 10.00.36 - Accepted - runtime 963ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:55:52,818 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:55:52,820 [INFO] __main__.py:251 - human-traffic-of-stadium/2025-07-25 15.56.50 - Accepted - runtime 307ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:55:53,486 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:55:53,490 [INFO] __main__.py:251 - game-play-analysis-i/2025-07-24 10.57.02 - Accepted - runtime 1294ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:55:53,490 [INFO] __main__.py:245 - Writing game-play-analysis-i/2025-07-24 10.03.40 - Accepted - runtime 1290ms - memory 0.0B.sql
2025-08-26 11:55:54,186 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:55:54,188 [INFO] __main__.py:251 - trips-and-users/2025-07-23 15.09.19 - Accepted - runtime 351ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:55:59,203 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-08-26 11:56:00,193 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-08-26 11:56:00,199 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1708304798,"question_id":262,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1753263298,"status":10,"status_display":"Accepted","runtime":"483 ms","url":"/submissions/detail/1708304798/","is_pending":"Not Pending","title":"Trips and Users","memory":"0.0B","code":"WITH cte_a AS (\\n    -- Only include trips where both client and driver are not banned\\n    SELECT * \\n    FROM Trips\\n    WHERE client_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n      AND driver_id NOT IN (SELECT users_id FROM Users WHERE banned = \'Yes\')\\n), \\ncte_total_cnt AS (\\n    -- Count total unbanned requests per day\\n    SELECT request_at, COUNT(*) AS cnt_total_request\\n    FROM cte_a \\n    GROUP BY request_at\\n),\\ncte_cancelled_cnt AS (\\n    -- Count unbanned cancelled requests per day\\n    SELECT request_at, COUNT(*) AS cnt_cancelled\\n    FROM cte_a\\n    WHERE status IN (\'cancelled_by_driver\', \'cancelled_by_client\')\\n    GROUP BY request_at\\n)\\nSELECT \\n    t.request_at AS Day,\\n    ROUND(1.0 * ISNULL(c.cnt_cancelled, 0) / t.cnt_total_request, 2) AS [Cancellation Rate]\\nFROM cte_total_cnt t LEFT JOIN cte_cancelled_cnt c \\nON t.request_at = c.request_at\\nWHERE t.request_at BETWEEN \'2013-10-01\' AND \'2013-10-03\'\\nORDER BY t.request_at;\\n","compare_result":"111111111111","title_slug":"trips-and-users","has_notes":false,"flag_type":1,"frontend_id":112},{"id":1707070691,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1753179134,"status":10,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/1707070691/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"WITH helper AS\\n(\\n    SELECT \\n        E.name Employee, \\n        E.salary Salary,\\n        D.name Department,\\n        DENSE_RANK() OVER (PARTITION BY D.id ORDER BY salary DESC) rank\\n    FROM Employee E JOIN Department D\\n    ON D.id = E.departmentId\\n)\\nSELECT \\n    Employee, \\n    Salary,\\n    Department\\nFROM helper\\nWHERE rank < 4;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":111},{"id":1707069861,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1753179084,"status":10,"status_display":"Accepted","runtime":"768 ms","url":"/submissions/detail/1707069861/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(\\nselect *, dense_rank() over(partition by e.departmentId order by e.salary desc) as rn\\nfrom Employee e \\n)\\nselect d.name as Department , e.name as Employee , e.salary\\nfrom cte_ranked e\\njoin Department d on e.departmentId = d.id \\nwhere rn <= 3","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":110},{"id":1705582347,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1753080312,"status":10,"status_display":"Accepted","runtime":"394 ms","url":"/submissions/detail/1705582347/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1703090868,"question_id":178,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752902814,"status":10,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/1703090868/","is_pending":"Not Pending","title":"Rank Scores","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT SCORE, DENSE_RANK() OVER(ORDER BY SCORE DESC) AS RANK\\nFROM SCORES\\n","compare_result":"11111111111","title_slug":"rank-scores","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93}],"has_next":true,"last_key":""}'
2025-08-26 11:56:00,201 [INFO] __main__.py:245 - Writing trips-and-users/2025-07-23 15.04.58 - Accepted - runtime 483ms - memory 0.0B.sql
2025-08-26 11:56:01,102 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:01,102 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-22 15.42.14 - Accepted - runtime 459ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:01,102 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-22 15.41.24 - Accepted - runtime 768ms - memory 0.0B.sql
2025-08-26 11:56:01,653 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:01,653 [INFO] __main__.py:251 - department-highest-salary/2025-07-21 12.15.12 - Accepted - runtime 394ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:01,653 [INFO] __main__.py:245 - Writing department-highest-salary/2025-07-21 09.48.07 - Accepted - runtime 420ms - memory 0.0B.sql
2025-08-26 11:56:01,996 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:01,998 [INFO] __main__.py:251 - rank-scores/2025-07-19 10.56.54 - Accepted - runtime 362ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:02,375 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:02,377 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:02,377 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql
2025-08-26 11:56:02,384 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql
2025-08-26 11:56:02,400 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:02,841 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:02,843 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:02,845 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:02,855 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:02,862 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:02,911 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:02,941 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:03,021 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:03,052 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:03,094 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:03,150 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:08,258 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-08-26 11:56:08,835 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-08-26 11:56:08,837 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73}],"has_next":true,"last_key":""}'
2025-08-26 11:56:09,287 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:09,289 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:10,116 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:10,118 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:10,633 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:10,636 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:11,212 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:11,216 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:11,697 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:11,700 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:11,701 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:11,719 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:11,745 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:12,409 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:12,414 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:12,416 [INFO] __main__.py:245 - Writing fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:12,420 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql
2025-08-26 11:56:13,276 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:13,280 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:13,281 [INFO] __main__.py:245 - Writing investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:13,640 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:13,642 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:14,012 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:14,014 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:14,365 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:14,366 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:14,368 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql
2025-08-26 11:56:14,368 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:14,738 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:14,741 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:14,741 [INFO] __main__.py:245 - Writing exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:19,745 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-08-26 11:56:21,136 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-08-26 11:56:21,138 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53}],"has_next":true,"last_key":""}'
2025-08-26 11:56:21,824 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:21,832 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:21,834 [INFO] __main__.py:245 - Writing employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:22,347 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:22,350 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:23,379 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:23,381 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:23,951 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:23,984 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:23,986 [INFO] __main__.py:245 - Writing product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql
2025-08-26 11:56:24,626 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:24,646 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:24,648 [INFO] __main__.py:245 - Writing consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:25,325 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:25,334 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:25,976 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:25,980 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:26,639 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:26,641 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:26,649 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:26,664 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:26,677 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:27,339 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:27,341 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:27,343 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:27,345 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:28,104 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:28,113 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:28,813 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:28,817 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:29,742 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:29,744 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:34,795 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-08-26 11:56:35,272 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-08-26 11:56:35,273 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33}],"has_next":true,"last_key":""}'
2025-08-26 11:56:35,717 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:35,721 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:35,723 [INFO] __main__.py:245 - Writing product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:36,266 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:36,266 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:36,266 [INFO] __main__.py:245 - Writing user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:36,838 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:36,838 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:37,553 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:37,555 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:37,948 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:37,952 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:38,673 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:38,673 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:39,027 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:39,027 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:39,350 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:39,365 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:39,682 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:39,686 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:40,980 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:40,981 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:41,313 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:41,313 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:41,321 [INFO] __main__.py:245 - Writing average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql
2025-08-26 11:56:41,923 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:41,926 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:41,926 [INFO] __main__.py:245 - Writing confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:42,563 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:42,629 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:43,406 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:43,417 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:44,068 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:44,074 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:44,530 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:44,532 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:49,540 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-08-26 11:56:50,301 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-08-26 11:56:50,306 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 1\xc2\xa0week","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1029511014,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1692792516,"status":10,"status_display":"Accepted","runtime":"1642 ms","url":"/submissions/detail/1029511014/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1029510363,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1692792466,"status":10,"status_display":"Accepted","runtime":"1053 ms","url":"/submissions/detail/1029510363/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1016455334,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1691573885,"status":10,"status_display":"Accepted","runtime":"1095 ms","url":"/submissions/detail/1016455334/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1016455058,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1691573858,"status":10,"status_display":"Accepted","runtime":"2190 ms","url":"/submissions/detail/1016455058/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":13}],"has_next":true,"last_key":""}'
2025-08-26 11:56:50,346 [INFO] __main__.py:245 - Writing average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql
2025-08-26 11:56:51,191 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:51,194 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:51,814 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:51,816 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:52,394 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:52,407 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:52,948 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:52,948 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:54,141 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:54,144 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:54,715 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:54,717 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:55,035 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:55,044 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:55,667 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:55,675 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:56,153 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:56,161 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:56,539 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:56,544 [INFO] __main__.py:251 - customer-placing-the-largest-number-of-orders/2024-08-11 22.33.14 - Accepted - runtime 444ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:56,922 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:56,937 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2024-08-08 15.31.19 - Accepted - runtime 1265ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:57,330 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:56:57,332 [INFO] __main__.py:251 - top-travellers/2024-08-02 22.39.39 - Accepted - runtime 843ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:56:57,332 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.53.10 - Accepted - runtime 1344ms - memory 0.0B.sql
2025-08-26 11:56:57,334 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.48.36 - Runtime Error - runtime NA - memory NA.sql
2025-08-26 11:56:57,338 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-25 10.40.12 - Accepted - runtime 1338ms - memory 0.0B.sql
2025-08-26 11:56:57,339 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.38.36 - Accepted - runtime 1642ms - memory 0.0B.sql
2025-08-26 11:56:57,339 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.37.46 - Accepted - runtime 1053ms - memory 0.0B.sql
2025-08-26 11:56:57,348 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.08.05 - Accepted - runtime 1095ms - memory 0.0B.sql
2025-08-26 11:56:57,348 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.07.38 - Accepted - runtime 2190ms - memory 0.0B.sql
2025-08-26 11:57:02,348 [DEBUG] leetcode.py:150 - Exporting submissions from 120 to 140
2025-08-26 11:57:03,563 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=120&limit=20 HTTP/1.1" 200 None
2025-08-26 11:57:03,628 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1009234981,"question_id":183,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1690881420,"status":10,"status_display":"Accepted","runtime":"724 ms","url":"/submissions/detail/1009234981/","is_pending":"Not Pending","title":"Customers Who Never Order","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as customers from Customers where id not in(select customerid from orders)","compare_result":"111111111111","title_slug":"customers-who-never-order","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1009161386,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1690874221,"status":10,"status_display":"Accepted","runtime":"875 ms","url":"/submissions/detail/1009161386/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1009161138,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years","timestamp":1690874197,"status":10,"status_display":"Accepted","runtime":"1543 ms","url":"/submissions/detail/1009161138/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1004211677,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years, 1\xc2\xa0month","timestamp":1690353557,"status":10,"status_display":"Accepted","runtime":"981 ms","url":"/submissions/detail/1004211677/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as Employee from Employee e1 where salary > (select salary from Employee where id = e1.managerId)","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1004210595,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years, 1\xc2\xa0month","timestamp":1690353467,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1004210595/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\nselect * from Employee e1 where salary > (select salary from Emplpoyee where id = e1.managerId)","compare_result":"00000000000000","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1003745627,"question_id":175,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0years, 1\xc2\xa0month","timestamp":1690304358,"status":10,"status_display":"Accepted","runtime":"1086 ms","url":"/submissions/detail/1003745627/","is_pending":"Not Pending","title":"Combine Two Tables","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect FirstName, LastName, city, state from person left join address \\r\\non person.personId = address.personId ","compare_result":"11111111","title_slug":"combine-two-tables","has_notes":false,"flag_type":1,"frontend_id":7},{"id":842546003,"question_id":327,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 9\xc2\xa0months","timestamp":1668329684,"status":10,"status_display":"Accepted","runtime":"2624 ms","url":"/submissions/detail/842546003/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"100.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} lower\\n * @param {number} upper\\n * @return {number}\\n */\\nvar countRangeSum = function(nums, lower, upper) {\\n    let preSum = Array(nums.length + 1).fill(0);\\n  let count = 0;\\n\\n  // create preSum array, use preSum to check the sum range\\n  for (let i = 0; i < nums.length; i++) {\\n      preSum[i + 1] = preSum[i] + nums[i];\\n  }\\n\\n  const sort = function(preSum) {\\n      if (preSum.length === 1) return preSum;\\n\\n      let mid = Math.floor(preSum.length / 2);\\n      let left = sort(preSum.slice(0, mid));\\n      let right = sort(preSum.slice(mid))\\n\\n      return merge(left, right);\\n  }\\n\\n  const merge = function(left, right) {\\n      let start = 0;\\n      let end = 0;\\n\\n      for (let i = 0; i < left.length; i++) {\\n          // all elements before start index, after subtracting left[i] are less than lower, which means all elements after start index are bigger or equal than lower\\n          while (start < right.length && right[start] - left[i] < lower) {\\n              start++;\\n          }\\n          // similarly, all elements before end index are less or euqal then upper\\n          while (end < right.length && right[end] - left[i] <= upper) {\\n              end++;\\n          }\\n\\n          // since the initial values of start and end are the same, and upper >= lower, so end will >= start too, which means the rest of the end minus start element difference will fall between [lower, upper].\\n          count += end - start;\\n      }\\n\\n      let sort = [];\\n      while (left.length && right.length) {\\n          if (left[0] <= right[0]) {\\n              sort.push(left.shift());\\n          } else {\\n              sort.push(right.shift());\\n          }\\n      }\\n\\n      return [...sort, ...left, ...right];\\n  }\\n\\n  sort(preSum);\\n  return count;\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1,"frontend_id":6},{"id":842024680,"question_id":2561,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 9\xc2\xa0months","timestamp":1668266557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/842024680/","is_pending":"Not Pending","title":"Number of Distinct Averages","memory":"N/A","code":"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    for(let i = 0; i < nums.length;i++)\\n    {\\n        let newnums = nums;\\n        let  res = [],max = Math.max(...nums), min = Math.min(...nums);   \\n        res[0] = min, res[1] = max\\n        let avg = (max+min)/2\\n    }\\n    \\n    \\n};","compare_result":"000000000000000000000000000000000000","title_slug":"number-of-distinct-averages","has_notes":false,"flag_type":1,"frontend_id":5},{"id":836960924,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 9\xc2\xa0months","timestamp":1667591646,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/836960924/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"42.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":4},{"id":836960390,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 9\xc2\xa0months","timestamp":1667591580,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/836960390/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"43 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":3},{"id":831406918,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 10\xc2\xa0months","timestamp":1666877523,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/831406918/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":2},{"id":831395512,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 10\xc2\xa0months","timestamp":1666876149,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/831395512/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-08-26 11:57:04,249 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:57:04,249 [INFO] __main__.py:251 - customers-who-never-order/2023-08-01 14.47.00 - Accepted - runtime 724ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:57:05,305 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:57:05,307 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.47.01 - Accepted - runtime 875ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:57:05,307 [INFO] __main__.py:245 - Writing duplicate-emails/2023-08-01 12.46.37 - Accepted - runtime 1543ms - memory 0.0B.sql
2025-08-26 11:57:05,309 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.09.17 - Accepted - runtime 981ms - memory 0.0B.sql
2025-08-26 11:57:05,311 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.07.47 - Runtime Error - runtime NA - memory NA.sql
2025-08-26 11:57:05,620 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:57:05,629 [INFO] __main__.py:251 - combine-two-tables/2023-07-25 22.29.18 - Accepted - runtime 1086ms - memory 0.0B.sql already exists, skipping it
2025-08-26 11:57:05,986 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:57:05,986 [INFO] __main__.py:251 - count-of-range-sum/2022-11-13 14.24.44 - Accepted - runtime 2624ms - memory 100.9MB.js already exists, skipping it
2025-08-26 11:57:06,761 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:57:06,786 [INFO] __main__.py:251 - number-of-distinct-averages/2022-11-12 20.52.37 - Wrong Answer - runtime NA - memory NA.js already exists, skipping it
2025-08-26 11:57:07,141 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:57:07,143 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.24.06 - Accepted - runtime 91ms - memory 42.9MB.js already exists, skipping it
2025-08-26 11:57:07,145 [INFO] __main__.py:245 - Writing find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.23.00 - Accepted - runtime 96ms - memory 43MB.js
2025-08-26 11:57:07,723 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-08-26 11:57:07,725 [INFO] __main__.py:251 - valid-anagram/2022-10-27 19.02.03 - Accepted - runtime 171ms - memory 49.4MB.js already exists, skipping it
2025-08-26 11:57:07,725 [INFO] __main__.py:245 - Writing valid-anagram/2022-10-27 18.39.09 - Accepted - runtime 122ms - memory 49.4MB.js
