2025-07-18 12:31:37,867 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-07-18 12:31:37,867 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-18 12:32:22,281 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-07-18 12:32:23,186 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-07-18 12:32:23,187 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"25Â minutes","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\nreturns int \nas\nBEGIN \n    Return ( \n        Select top(1) Salary \n    from (\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \n        from Employee \n    ) e\n    where D_Rank = @n\n    )\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106}],"has_next":true,"last_key":""}
2025-07-18 12:32:24,199 [DEBUG] leetcode.py:112 - User is logged in
2025-07-18 12:32:24,199 [INFO] leetcode.py:95 - Cookie set successful
2025-07-18 12:32:24,201 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-07-18 12:32:24,734 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-07-18 12:32:24,735 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"25\xc2\xa0minutes","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"26\xc2\xa0minutes","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"27\xc2\xa0minutes","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"28\xc2\xa0minutes","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 3\xc2\xa0minutes","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 4\xc2\xa0minutes","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 5\xc2\xa0minutes","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 6\xc2\xa0minutes","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 8\xc2\xa0minutes","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 15\xc2\xa0minutes","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 16\xc2\xa0minutes","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"22\xc2\xa0hours, 19\xc2\xa0minutes","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"23\xc2\xa0hours, 26\xc2\xa0minutes","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"23\xc2\xa0hours, 28\xc2\xa0minutes","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"23\xc2\xa0hours, 40\xc2\xa0minutes","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"23\xc2\xa0hours, 46\xc2\xa0minutes","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"23\xc2\xa0hours, 59\xc2\xa0minutes","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87}],"has_next":true,"last_key":""}'
2025-07-18 12:32:25,065 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:25,069 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql
2025-07-18 12:32:25,071 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql
2025-07-18 12:32:25,073 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql
2025-07-18 12:32:25,075 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql
2025-07-18 12:32:25,456 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:25,457 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:25,458 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,458 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,459 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,461 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,461 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,462 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,462 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,463 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,463 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:25,855 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:25,858 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:26,192 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:26,195 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:26,559 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:26,562 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:26,994 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:26,996 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:27,413 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:27,415 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:27,416 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:32,423 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-07-18 12:32:32,836 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-07-18 12:32:32,839 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 1\xc2\xa0hour","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 1\xc2\xa0hour","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 2\xc2\xa0hours","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 2\xc2\xa0hours","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 2\xc2\xa0hours","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 20\xc2\xa0hours","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 20\xc2\xa0hours","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 20\xc2\xa0hours","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 20\xc2\xa0hours","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 21\xc2\xa0hours","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 21\xc2\xa0hours","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 18\xc2\xa0hours","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67}],"has_next":true,"last_key":""}'
2025-07-18 12:32:32,840 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:32,840 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:33,186 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:33,190 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:33,190 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:33,539 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:33,542 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:33,896 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:33,899 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:33,901 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:34,281 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:34,289 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:34,624 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:34,627 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:35,469 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:35,471 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:35,472 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:35,472 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:35,893 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:35,901 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:35,902 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:36,243 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:36,245 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:36,246 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:36,608 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:36,616 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:36,940 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:36,948 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:37,277 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:37,286 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:37,287 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:42,300 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-07-18 12:32:42,732 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-07-18 12:32:42,743 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47}],"has_next":true,"last_key":""}'
2025-07-18 12:32:43,074 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:43,076 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:43,077 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:43,693 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:43,695 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:44,030 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:44,039 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:44,369 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:44,372 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:44,373 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:44,373 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:44,374 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:44,707 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:44,710 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:44,710 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:44,711 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:45,081 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:45,083 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:45,483 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:45,485 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:45,803 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:45,815 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:46,158 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:46,161 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:46,161 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:46,492 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:46,496 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:46,496 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:46,888 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:46,892 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:47,236 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:47,238 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:52,239 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-07-18 12:32:52,626 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-07-18 12:32:52,639 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 1\xc2\xa0day","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0weeks, 1\xc2\xa0day","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27}],"has_next":true,"last_key":""}'
2025-07-18 12:32:53,289 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:53,295 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:53,619 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:53,621 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:53,998 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:54,002 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:54,355 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:54,360 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:54,685 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:54,702 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:55,054 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:55,060 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:55,401 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:55,401 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:55,401 [INFO] __main__.py:251 - average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:55,741 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:55,744 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:55,751 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:56,071 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:56,080 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:56,452 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:56,452 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:57,069 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:57,076 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:57,403 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:57,407 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:57,407 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:32:58,406 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:58,410 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:58,855 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:58,866 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:59,209 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:59,211 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:59,569 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:59,569 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:32:59,921 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:32:59,936 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:04,947 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-07-18 12:33:05,356 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-07-18 12:33:05,363 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 1\xc2\xa0week","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 1\xc2\xa0week","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1029511014,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1692792516,"status":10,"status_display":"Accepted","runtime":"1642 ms","url":"/submissions/detail/1029511014/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1029510363,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1692792466,"status":10,"status_display":"Accepted","runtime":"1053 ms","url":"/submissions/detail/1029510363/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1016455334,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573885,"status":10,"status_display":"Accepted","runtime":"1095 ms","url":"/submissions/detail/1016455334/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1016455058,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573858,"status":10,"status_display":"Accepted","runtime":"2190 ms","url":"/submissions/detail/1016455058/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1009234981,"question_id":183,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690881420,"status":10,"status_display":"Accepted","runtime":"724 ms","url":"/submissions/detail/1009234981/","is_pending":"Not Pending","title":"Customers Who Never Order","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as customers from Customers where id not in(select customerid from orders)","compare_result":"111111111111","title_slug":"customers-who-never-order","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1009161386,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874221,"status":10,"status_display":"Accepted","runtime":"875 ms","url":"/submissions/detail/1009161386/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1009161138,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874197,"status":10,"status_display":"Accepted","runtime":"1543 ms","url":"/submissions/detail/1009161138/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1004211677,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690353557,"status":10,"status_display":"Accepted","runtime":"981 ms","url":"/submissions/detail/1004211677/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as Employee from Employee e1 where salary > (select salary from Employee where id = e1.managerId)","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1004210595,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690353467,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1004210595/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\nselect * from Employee e1 where salary > (select salary from Emplpoyee where id = e1.managerId)","compare_result":"00000000000000","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1003745627,"question_id":175,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690304358,"status":10,"status_display":"Accepted","runtime":"1086 ms","url":"/submissions/detail/1003745627/","is_pending":"Not Pending","title":"Combine Two Tables","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect FirstName, LastName, city, state from person left join address \\r\\non person.personId = address.personId ","compare_result":"11111111","title_slug":"combine-two-tables","has_notes":false,"flag_type":1,"frontend_id":7}],"has_next":true,"last_key":""}'
2025-07-18 12:33:05,693 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:05,702 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:06,054 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:06,054 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:06,398 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:06,402 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:07,823 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:07,832 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,188 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:08,198 [INFO] __main__.py:251 - customer-placing-the-largest-number-of-orders/2024-08-11 22.33.14 - Accepted - runtime 444ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,588 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:08,588 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2024-08-08 15.31.19 - Accepted - runtime 1265ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,971 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:08,971 [INFO] __main__.py:251 - top-travellers/2024-08-02 22.39.39 - Accepted - runtime 843ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,971 [INFO] __main__.py:251 - rising-temperature/2023-09-07 17.53.10 - Accepted - runtime 1344ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,971 [INFO] __main__.py:251 - rising-temperature/2023-09-07 17.48.36 - Runtime Error - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:33:08,978 [INFO] __main__.py:251 - second-highest-salary/2023-08-25 10.40.12 - Accepted - runtime 1338ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,978 [INFO] __main__.py:251 - second-highest-salary/2023-08-23 17.38.36 - Accepted - runtime 1642ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,979 [INFO] __main__.py:251 - second-highest-salary/2023-08-23 17.37.46 - Accepted - runtime 1053ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,979 [INFO] __main__.py:251 - delete-duplicate-emails/2023-08-09 15.08.05 - Accepted - runtime 1095ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:08,979 [INFO] __main__.py:251 - delete-duplicate-emails/2023-08-09 15.07.38 - Accepted - runtime 2190ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:09,306 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:09,324 [INFO] __main__.py:251 - customers-who-never-order/2023-08-01 14.47.00 - Accepted - runtime 724ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:09,652 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:09,655 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.47.01 - Accepted - runtime 875ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:09,656 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.46.37 - Accepted - runtime 1543ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:09,657 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2023-07-26 12.09.17 - Accepted - runtime 981ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:09,657 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2023-07-26 12.07.47 - Runtime Error - runtime NA - memory NA.sql already exists, skipping it
2025-07-18 12:33:09,991 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:09,999 [INFO] __main__.py:251 - combine-two-tables/2023-07-25 22.29.18 - Accepted - runtime 1086ms - memory 0.0B.sql already exists, skipping it
2025-07-18 12:33:15,011 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-07-18 12:33:15,366 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-07-18 12:33:15,366 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":842546003,"question_id":327,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668329684,"status":10,"status_display":"Accepted","runtime":"2624 ms","url":"/submissions/detail/842546003/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"100.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} lower\\n * @param {number} upper\\n * @return {number}\\n */\\nvar countRangeSum = function(nums, lower, upper) {\\n    let preSum = Array(nums.length + 1).fill(0);\\n  let count = 0;\\n\\n  // create preSum array, use preSum to check the sum range\\n  for (let i = 0; i < nums.length; i++) {\\n      preSum[i + 1] = preSum[i] + nums[i];\\n  }\\n\\n  const sort = function(preSum) {\\n      if (preSum.length === 1) return preSum;\\n\\n      let mid = Math.floor(preSum.length / 2);\\n      let left = sort(preSum.slice(0, mid));\\n      let right = sort(preSum.slice(mid))\\n\\n      return merge(left, right);\\n  }\\n\\n  const merge = function(left, right) {\\n      let start = 0;\\n      let end = 0;\\n\\n      for (let i = 0; i < left.length; i++) {\\n          // all elements before start index, after subtracting left[i] are less than lower, which means all elements after start index are bigger or equal than lower\\n          while (start < right.length && right[start] - left[i] < lower) {\\n              start++;\\n          }\\n          // similarly, all elements before end index are less or euqal then upper\\n          while (end < right.length && right[end] - left[i] <= upper) {\\n              end++;\\n          }\\n\\n          // since the initial values of start and end are the same, and upper >= lower, so end will >= start too, which means the rest of the end minus start element difference will fall between [lower, upper].\\n          count += end - start;\\n      }\\n\\n      let sort = [];\\n      while (left.length && right.length) {\\n          if (left[0] <= right[0]) {\\n              sort.push(left.shift());\\n          } else {\\n              sort.push(right.shift());\\n          }\\n      }\\n\\n      return [...sort, ...left, ...right];\\n  }\\n\\n  sort(preSum);\\n  return count;\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1,"frontend_id":6},{"id":842024680,"question_id":2561,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668266557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/842024680/","is_pending":"Not Pending","title":"Number of Distinct Averages","memory":"N/A","code":"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    for(let i = 0; i < nums.length;i++)\\n    {\\n        let newnums = nums;\\n        let  res = [],max = Math.max(...nums), min = Math.min(...nums);   \\n        res[0] = min, res[1] = max\\n        let avg = (max+min)/2\\n    }\\n    \\n    \\n};","compare_result":"000000000000000000000000000000000000","title_slug":"number-of-distinct-averages","has_notes":false,"flag_type":1,"frontend_id":5},{"id":836960924,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591646,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/836960924/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"42.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":4},{"id":836960390,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591580,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/836960390/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"43 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":3},{"id":831406918,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666877523,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/831406918/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":2},{"id":831395512,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666876149,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/831395512/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-07-18 12:33:15,721 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:15,721 [INFO] __main__.py:251 - count-of-range-sum/2022-11-13 14.24.44 - Accepted - runtime 2624ms - memory 100.9MB.js already exists, skipping it
2025-07-18 12:33:16,101 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:16,104 [INFO] __main__.py:251 - number-of-distinct-averages/2022-11-12 20.52.37 - Wrong Answer - runtime NA - memory NA.js already exists, skipping it
2025-07-18 12:33:16,438 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:16,440 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.24.06 - Accepted - runtime 91ms - memory 42.9MB.js already exists, skipping it
2025-07-18 12:33:16,441 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.23.00 - Accepted - runtime 96ms - memory 43MB.js already exists, skipping it
2025-07-18 12:33:16,788 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-18 12:33:16,797 [INFO] __main__.py:251 - valid-anagram/2022-10-27 19.02.03 - Accepted - runtime 171ms - memory 49.4MB.js already exists, skipping it
2025-07-18 12:33:16,798 [INFO] __main__.py:251 - valid-anagram/2022-10-27 18.39.09 - Accepted - runtime 122ms - memory 49.4MB.js already exists, skipping it
2025-07-21 09:53:51,836 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-07-21 09:53:51,836 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-21 09:56:01,048 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-07-21 09:56:03,196 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-07-21 09:56:03,202 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"7Â minutes","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\nwith cte_highest_salary_rank\nas (\nselect d.name as Department , e.name Employee , e.Salary ,\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\nfrom Employee e join Department d on e.departmentId = d.id\n)\nselect Department, Employee, salary\nfrom cte_highest_salary_rank\nwhere rn=1\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108}],"has_next":true,"last_key":""}
2025-07-21 09:56:04,216 [DEBUG] leetcode.py:112 - User is logged in
2025-07-21 09:56:04,216 [INFO] leetcode.py:95 - Cookie set successful
2025-07-21 09:56:04,220 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-07-21 09:56:04,679 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-07-21 09:56:04,692 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"7\xc2\xa0minutes","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1703090868,"question_id":178,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 22\xc2\xa0hours","timestamp":1752902814,"status":10,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/1703090868/","is_pending":"Not Pending","title":"Rank Scores","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT SCORE, DENSE_RANK() OVER(ORDER BY SCORE DESC) AS RANK\\nFROM SCORES\\n","compare_result":"11111111111","title_slug":"rank-scores","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"2\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 20\xc2\xa0hours","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92},{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89}],"has_next":true,"last_key":""}'
2025-07-21 09:56:05,102 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:05,120 [INFO] __main__.py:245 - Writing department-highest-salary/2025-07-21 09.48.07 - Accepted - runtime 420ms - memory 0.0B.sql
2025-07-21 09:56:05,437 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:05,442 [INFO] __main__.py:245 - Writing rank-scores/2025-07-19 10.56.54 - Accepted - runtime 362ms - memory 0.0B.sql
2025-07-21 09:56:05,747 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:05,757 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:05,758 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql
2025-07-21 09:56:05,758 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql
2025-07-21 09:56:05,762 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,073 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:06,075 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:06,075 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,081 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,083 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,084 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,084 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,089 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,091 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,091 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,095 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:06,420 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:06,431 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:07,055 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:07,055 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:09,084 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:09,093 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:09,715 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:09,724 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:14,737 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-07-21 09:56:15,204 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-07-21 09:56:15,216 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 22\xc2\xa0hours","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 18\xc2\xa0hours","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 18\xc2\xa0hours","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 18\xc2\xa0hours","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72},{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 18\xc2\xa0hours","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 18\xc2\xa0hours","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 19\xc2\xa0hours","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69}],"has_next":true,"last_key":""}'
2025-07-21 09:56:15,550 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:15,561 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:15,563 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:15,565 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:15,567 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:15,885 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:15,889 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:15,893 [INFO] __main__.py:245 - Writing fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:16,200 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:16,216 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:16,588 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:16,594 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:16,598 [INFO] __main__.py:245 - Writing investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:16,954 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:16,960 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:17,321 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:17,323 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:17,658 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:17,669 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:17,669 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql
2025-07-21 09:56:17,675 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:18,329 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:18,335 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:18,337 [INFO] __main__.py:245 - Writing exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:18,710 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:18,714 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:18,717 [INFO] __main__.py:245 - Writing employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:19,101 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:19,103 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:19,864 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:19,868 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:24,872 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-07-21 09:56:25,432 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-07-21 09:56:25,432 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 21\xc2\xa0hours","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days, 16\xc2\xa0hours","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 2\xc2\xa0days","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52},{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49}],"has_next":true,"last_key":""}'
2025-07-21 09:56:25,783 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:25,787 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:25,787 [INFO] __main__.py:245 - Writing product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql
2025-07-21 09:56:26,990 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:26,992 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:26,995 [INFO] __main__.py:245 - Writing consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:27,542 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:27,544 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:27,887 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:27,887 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:28,206 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:28,207 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:28,207 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:28,213 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:28,216 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:28,520 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:28,527 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:28,528 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:28,529 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:28,836 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:28,839 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:29,144 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:29,148 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:29,566 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:29,571 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:30,399 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:30,400 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:30,400 [INFO] __main__.py:245 - Writing product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:30,834 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:30,843 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:30,845 [INFO] __main__.py:245 - Writing user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:35,862 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-07-21 09:56:36,247 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-07-21 09:56:36,248 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32},{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29}],"has_next":true,"last_key":""}'
2025-07-21 09:56:36,739 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:36,749 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:37,070 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:37,078 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:37,482 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:37,482 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:37,834 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:37,834 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:38,581 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:38,583 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:38,916 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:38,918 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:39,357 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:39,362 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:39,698 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:39,705 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:40,075 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:40,079 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:40,080 [INFO] __main__.py:245 - Writing average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql
2025-07-21 09:56:40,516 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:40,521 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:40,523 [INFO] __main__.py:245 - Writing confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:40,848 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:40,857 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:41,178 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:41,183 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:42,323 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:42,333 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:42,753 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:42,758 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:42,758 [INFO] __main__.py:245 - Writing average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql
2025-07-21 09:56:43,071 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:43,075 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:43,436 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:43,439 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:44,138 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:44,143 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:49,158 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-07-21 09:56:49,549 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-07-21 09:56:49,550 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 1\xc2\xa0week","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1029511014,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792516,"status":10,"status_display":"Accepted","runtime":"1642 ms","url":"/submissions/detail/1029511014/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1029510363,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792466,"status":10,"status_display":"Accepted","runtime":"1053 ms","url":"/submissions/detail/1029510363/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1016455334,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573885,"status":10,"status_display":"Accepted","runtime":"1095 ms","url":"/submissions/detail/1016455334/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1016455058,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573858,"status":10,"status_display":"Accepted","runtime":"2190 ms","url":"/submissions/detail/1016455058/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1009234981,"question_id":183,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690881420,"status":10,"status_display":"Accepted","runtime":"724 ms","url":"/submissions/detail/1009234981/","is_pending":"Not Pending","title":"Customers Who Never Order","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as customers from Customers where id not in(select customerid from orders)","compare_result":"111111111111","title_slug":"customers-who-never-order","has_notes":false,"flag_type":1,"frontend_id":12},{"id":1009161386,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874221,"status":10,"status_display":"Accepted","runtime":"875 ms","url":"/submissions/detail/1009161386/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1009161138,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874197,"status":10,"status_display":"Accepted","runtime":"1543 ms","url":"/submissions/detail/1009161138/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1004211677,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690353557,"status":10,"status_display":"Accepted","runtime":"981 ms","url":"/submissions/detail/1004211677/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as Employee from Employee e1 where salary > (select salary from Employee where id = e1.managerId)","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":9}],"has_next":true,"last_key":""}'
2025-07-21 09:56:49,897 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:49,901 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:51,055 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:51,061 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:51,388 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:51,394 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:51,720 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:51,722 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:52,334 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:52,338 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:52,708 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:52,709 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:53,032 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:53,038 [INFO] __main__.py:251 - customer-placing-the-largest-number-of-orders/2024-08-11 22.33.14 - Accepted - runtime 444ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:53,383 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:53,389 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2024-08-08 15.31.19 - Accepted - runtime 1265ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:53,718 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:53,722 [INFO] __main__.py:251 - top-travellers/2024-08-02 22.39.39 - Accepted - runtime 843ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:53,724 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.53.10 - Accepted - runtime 1344ms - memory 0.0B.sql
2025-07-21 09:56:53,725 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.48.36 - Runtime Error - runtime NA - memory NA.sql
2025-07-21 09:56:53,730 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-25 10.40.12 - Accepted - runtime 1338ms - memory 0.0B.sql
2025-07-21 09:56:53,733 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.38.36 - Accepted - runtime 1642ms - memory 0.0B.sql
2025-07-21 09:56:53,736 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.37.46 - Accepted - runtime 1053ms - memory 0.0B.sql
2025-07-21 09:56:53,738 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.08.05 - Accepted - runtime 1095ms - memory 0.0B.sql
2025-07-21 09:56:53,740 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.07.38 - Accepted - runtime 2190ms - memory 0.0B.sql
2025-07-21 09:56:54,256 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:54,263 [INFO] __main__.py:251 - customers-who-never-order/2023-08-01 14.47.00 - Accepted - runtime 724ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:54,843 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:56:54,846 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.47.01 - Accepted - runtime 875ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:56:54,846 [INFO] __main__.py:245 - Writing duplicate-emails/2023-08-01 12.46.37 - Accepted - runtime 1543ms - memory 0.0B.sql
2025-07-21 09:56:54,848 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.09.17 - Accepted - runtime 981ms - memory 0.0B.sql
2025-07-21 09:56:59,849 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-07-21 09:57:00,193 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-07-21 09:57:00,197 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1004210595,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690353467,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1004210595/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\nselect * from Employee e1 where salary > (select salary from Emplpoyee where id = e1.managerId)","compare_result":"00000000000000","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1003745627,"question_id":175,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690304358,"status":10,"status_display":"Accepted","runtime":"1086 ms","url":"/submissions/detail/1003745627/","is_pending":"Not Pending","title":"Combine Two Tables","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect FirstName, LastName, city, state from person left join address \\r\\non person.personId = address.personId ","compare_result":"11111111","title_slug":"combine-two-tables","has_notes":false,"flag_type":1,"frontend_id":7},{"id":842546003,"question_id":327,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668329684,"status":10,"status_display":"Accepted","runtime":"2624 ms","url":"/submissions/detail/842546003/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"100.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} lower\\n * @param {number} upper\\n * @return {number}\\n */\\nvar countRangeSum = function(nums, lower, upper) {\\n    let preSum = Array(nums.length + 1).fill(0);\\n  let count = 0;\\n\\n  // create preSum array, use preSum to check the sum range\\n  for (let i = 0; i < nums.length; i++) {\\n      preSum[i + 1] = preSum[i] + nums[i];\\n  }\\n\\n  const sort = function(preSum) {\\n      if (preSum.length === 1) return preSum;\\n\\n      let mid = Math.floor(preSum.length / 2);\\n      let left = sort(preSum.slice(0, mid));\\n      let right = sort(preSum.slice(mid))\\n\\n      return merge(left, right);\\n  }\\n\\n  const merge = function(left, right) {\\n      let start = 0;\\n      let end = 0;\\n\\n      for (let i = 0; i < left.length; i++) {\\n          // all elements before start index, after subtracting left[i] are less than lower, which means all elements after start index are bigger or equal than lower\\n          while (start < right.length && right[start] - left[i] < lower) {\\n              start++;\\n          }\\n          // similarly, all elements before end index are less or euqal then upper\\n          while (end < right.length && right[end] - left[i] <= upper) {\\n              end++;\\n          }\\n\\n          // since the initial values of start and end are the same, and upper >= lower, so end will >= start too, which means the rest of the end minus start element difference will fall between [lower, upper].\\n          count += end - start;\\n      }\\n\\n      let sort = [];\\n      while (left.length && right.length) {\\n          if (left[0] <= right[0]) {\\n              sort.push(left.shift());\\n          } else {\\n              sort.push(right.shift());\\n          }\\n      }\\n\\n      return [...sort, ...left, ...right];\\n  }\\n\\n  sort(preSum);\\n  return count;\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1,"frontend_id":6},{"id":842024680,"question_id":2561,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668266557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/842024680/","is_pending":"Not Pending","title":"Number of Distinct Averages","memory":"N/A","code":"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    for(let i = 0; i < nums.length;i++)\\n    {\\n        let newnums = nums;\\n        let  res = [],max = Math.max(...nums), min = Math.min(...nums);   \\n        res[0] = min, res[1] = max\\n        let avg = (max+min)/2\\n    }\\n    \\n    \\n};","compare_result":"000000000000000000000000000000000000","title_slug":"number-of-distinct-averages","has_notes":false,"flag_type":1,"frontend_id":5},{"id":836960924,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591646,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/836960924/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"42.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":4},{"id":836960390,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591580,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/836960390/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"43 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":3},{"id":831406918,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666877523,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/831406918/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":2},{"id":831395512,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666876149,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/831395512/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-07-21 09:57:00,201 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.07.47 - Runtime Error - runtime NA - memory NA.sql
2025-07-21 09:57:00,510 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:57:00,527 [INFO] __main__.py:251 - combine-two-tables/2023-07-25 22.29.18 - Accepted - runtime 1086ms - memory 0.0B.sql already exists, skipping it
2025-07-21 09:57:00,867 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:57:00,876 [INFO] __main__.py:251 - count-of-range-sum/2022-11-13 14.24.44 - Accepted - runtime 2624ms - memory 100.9MB.js already exists, skipping it
2025-07-21 09:57:01,188 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:57:01,203 [INFO] __main__.py:251 - number-of-distinct-averages/2022-11-12 20.52.37 - Wrong Answer - runtime NA - memory NA.js already exists, skipping it
2025-07-21 09:57:01,544 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:57:01,551 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.24.06 - Accepted - runtime 91ms - memory 42.9MB.js already exists, skipping it
2025-07-21 09:57:01,551 [INFO] __main__.py:245 - Writing find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.23.00 - Accepted - runtime 96ms - memory 43MB.js
2025-07-21 09:57:01,872 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-21 09:57:01,874 [INFO] __main__.py:251 - valid-anagram/2022-10-27 19.02.03 - Accepted - runtime 171ms - memory 49.4MB.js already exists, skipping it
2025-07-21 09:57:01,876 [INFO] __main__.py:245 - Writing valid-anagram/2022-10-27 18.39.09 - Accepted - runtime 122ms - memory 49.4MB.js
2025-07-22 15:45:46,293 [INFO] __main__.py:145 - leetcode-export run with arguments: Namespace(cookies=None, extra_verbose=False, folder='.', language=None, language_unprocessed=None, no_problem_statement=False, only_accepted=False, only_last_submission=False, problem_folder_name='${question_id}-${title_slug}', problem_statement_content='<h1>${question_id} - ${title}</h1><h2>Difficulty: ${difficulty} - <a href="https://leetcode.com/problems/${title_slug}/">${title_slug}</a></h2>${content}', problem_statement_filename='${question_id}-${title_slug}.md', submission_filename='${date_formatted} - ${status_display} - runtime ${runtime} - memory ${memory}.${extension}', verbose=False)
2025-07-22 15:45:46,293 [DEBUG] leetcode.py:29 - LeetCode class instantiated
2025-07-22 15:46:24,568 [DEBUG] connectionpool.py:1023 - Starting new HTTPS connection (1): leetcode.com:443
2025-07-22 15:46:25,241 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=1 HTTP/1.1" 200 None
2025-07-22 15:46:25,242 [DEBUG] leetcode.py:109 - {"submissions_dump":[{"id":1707070691,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"4Â minutes","timestamp":1753179134,"status":10,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/1707070691/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"WITH helper AS\n(\n    SELECT \n        E.name Employee, \n        E.salary Salary,\n        D.name Department,\n        DENSE_RANK() OVER (PARTITION BY D.id ORDER BY salary DESC) rank\n    FROM Employee E JOIN Department D\n    ON D.id = E.departmentId\n)\nSELECT \n    Employee, \n    Salary,\n    Department\nFROM helper\nWHERE rank < 4;\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":111}],"has_next":true,"last_key":""}
2025-07-22 15:46:26,250 [DEBUG] leetcode.py:112 - User is logged in
2025-07-22 15:46:26,250 [INFO] leetcode.py:95 - Cookie set successful
2025-07-22 15:46:26,251 [DEBUG] leetcode.py:150 - Exporting submissions from 0 to 20
2025-07-22 15:46:26,704 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=0&limit=20 HTTP/1.1" 200 None
2025-07-22 15:46:26,729 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1707070691,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0minutes","timestamp":1753179134,"status":10,"status_display":"Accepted","runtime":"459 ms","url":"/submissions/detail/1707070691/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"WITH helper AS\\n(\\n    SELECT \\n        E.name Employee, \\n        E.salary Salary,\\n        D.name Department,\\n        DENSE_RANK() OVER (PARTITION BY D.id ORDER BY salary DESC) rank\\n    FROM Employee E JOIN Department D\\n    ON D.id = E.departmentId\\n)\\nSELECT \\n    Employee, \\n    Salary,\\n    Department\\nFROM helper\\nWHERE rank < 4;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":111},{"id":1707069861,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0minutes","timestamp":1753179084,"status":10,"status_display":"Accepted","runtime":"768 ms","url":"/submissions/detail/1707069861/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(\\nselect *, dense_rank() over(partition by e.departmentId order by e.salary desc) as rn\\nfrom Employee e \\n)\\nselect d.name as Department , e.name as Employee , e.salary\\nfrom cte_ranked e\\njoin Department d on e.departmentId = d.id \\nwhere rn <= 3","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":110},{"id":1705582347,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 3\xc2\xa0hours","timestamp":1753080312,"status":10,"status_display":"Accepted","runtime":"394 ms","url":"/submissions/detail/1705582347/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":109},{"id":1705434512,"question_id":184,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0day, 5\xc2\xa0hours","timestamp":1753071487,"status":10,"status_display":"Accepted","runtime":"420 ms","url":"/submissions/detail/1705434512/","is_pending":"Not Pending","title":"Department Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_highest_salary_rank\\nas (\\nselect d.name as Department , e.name Employee , e.Salary ,\\n    dense_rank() over(partition by d.name order by e.salary desc) as rn\\nfrom Employee e join Department d on e.departmentId = d.id\\n)\\nselect Department, Employee, salary\\nfrom cte_highest_salary_rank\\nwhere rn=1\\n","compare_result":"11111111111111","title_slug":"department-highest-salary","has_notes":false,"flag_type":1,"frontend_id":108},{"id":1703090868,"question_id":178,"lang":"mssql","lang_name":"MS SQL Server","time":"3\xc2\xa0days, 4\xc2\xa0hours","timestamp":1752902814,"status":10,"status_display":"Accepted","runtime":"362 ms","url":"/submissions/detail/1703090868/","is_pending":"Not Pending","title":"Rank Scores","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT SCORE, DENSE_RANK() OVER(ORDER BY SCORE DESC) AS RANK\\nFROM SCORES\\n","compare_result":"11111111111","title_slug":"rank-scores","has_notes":false,"flag_type":1,"frontend_id":107},{"id":1702104793,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752820601,"status":10,"status_display":"Accepted","runtime":"368 ms","url":"/submissions/detail/1702104793/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend ","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":106},{"id":1702103825,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752820542,"status":10,"status_display":"Accepted","runtime":"395 ms","url":"/submissions/detail/1702103825/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"Create Function getNthHighestSalary(@n int)\\nreturns int \\nas\\nBEGIN \\n    Return ( \\n        Select top(1) Salary \\n    from (\\n        Select Salary, DENSE_RANK() OVER (order by salary DESC) as D_Rank \\n        from Employee \\n    ) e\\n    where D_Rank = @n\\n    )\\nend","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":105},{"id":1702102972,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752820487,"status":10,"status_display":"Accepted","runtime":"597 ms","url":"/submissions/detail/1702102972/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"0.0B","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary desc) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n","compare_result":"111111111111111111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":104},{"id":1702102188,"question_id":177,"lang":"mssql","lang_name":"MS SQL Server","time":"4\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752820442,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1702102188/","is_pending":"Not Pending","title":"Nth Highest Salary","memory":"N/A","code":"CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS\\nBEGIN\\n    RETURN (\\n        /* Write your T-SQL query statement below. */\\n        select top 1 salary from\\n        (select salary, \\n        dense_rank() over(order by salary) as rn \\n        from Employee ) as ranked_salary\\n        where rn = @n\\n    );\\nEND\\n\\n--select getNthHighestSalary(2)","compare_result":"111111001001001111","title_slug":"nth-highest-salary","has_notes":false,"flag_type":1,"frontend_id":103},{"id":1701076413,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742754,"status":10,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/1701076413/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"0.0B","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\' (case-sensitive)\\n    mail COLLATE Latin1_General_CS_AS LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":102},{"id":1701075239,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742683,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701075239/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT\\n    user_id,\\n    name,\\n    mail\\nFROM\\n    Users\\nWHERE\\n    -- 1. Ensure the email ends exactly with \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- 2. Ensure the \'@\' symbol is only present once and is correctly positioned\\n    -- This checks if the character at the position (Length of mail - Length of \'@leetcode.com\') is \'@\'\\n    -- and implicitly ensures there are no other \'@\' symbols before it in the prefix.\\n    SUBSTRING(mail, LEN(mail) - LEN(\'@leetcode.com\') + 1, 1) = \'@\'\\n    AND\\n    -- 3. Ensure the prefix (part before \'@\') starts with a letter.\\n    -- We take the first character of the entire mail string, as it must be part of the prefix.\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- 4. Ensure no invalid characters exist in the prefix.\\n    -- The prefix is extracted from the beginning of the string up to the character before \'@leetcode.com\'.\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, LEN(mail) - LEN(\'@leetcode.com\'))) = 0;","compare_result":"111111111111111111111111110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":101},{"id":1701073980,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742608,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073980/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT    user_id,    name,    mail\\nFROM    Users\\nWHERE\\n    -- Ensure the domain is exactly \'@leetcode.com\'\\n    mail LIKE \'%@leetcode.com\'\\n    AND\\n    -- Ensure the mail starts with a letter (A-Z or a-z)\\n    mail LIKE \'[a-zA-Z]%\'\\n    AND\\n    -- Ensure no invalid characters exist in the prefix before \'@\'\\n    -- PATINDEX returns 0 if no match is found, meaning no invalid characters\\n    PATINDEX(\'%[^a-zA-Z0-9_.-]%\', SUBSTRING(mail, 1, CHARINDEX(\'@\', mail) - 1)) = 0;\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":100},{"id":1701073027,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742547,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701073027/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' AND\\n    mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' AND\\n    mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' AND\\n    mail NOT LIKE \'[_-]%@leetcode.com\'\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":99},{"id":1701071169,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701071169/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9]%@leetcode.com\' -- local-part starts with letter or digit\\n    AND mail NOT LIKE \'%..%@leetcode.com\' -- no consecutive dots\\n    AND mail NOT LIKE \'[._%-]%@leetcode.com\' -- local-part doesn\'t start with special char\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n","compare_result":"110110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":98},{"id":1701064844,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752742013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064844/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"SELECT user_id, name, mail\\nFROM Users\\nWHERE \\n    mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n    AND mail LIKE \'[a-zA-Z0-9][a-zA-Z0-9._-]*@leetcode.com\' -- valid local-part\\n    AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- no illegal characters\\n    AND mail NOT LIKE \'[_.-]%@leetcode.com\' -- cannot start with invalid character\\n    AND mail NOT LIKE \'%..%@leetcode.com\'  -- no consecutive dots\\n","compare_result":"000000000000000000000000111","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":97},{"id":1701064260,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752741973,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701064260/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT user_id, name, mail\\nFROM Users\\nWHERE mail LIKE \'%@leetcode.com\'\\n  AND mail LIKE \'[a-zA-Z]%\'  -- prefix starts with a letter\\n  AND mail NOT LIKE \'%[^a-zA-Z0-9._@-]%\' -- disallow invalid characters\\n\\n\\n\\n","compare_result":"111110000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":96},{"id":1701061567,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 1\xc2\xa0hour","timestamp":1752741794,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701061567/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":95},{"id":1701004800,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 2\xc2\xa0hours","timestamp":1752737769,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701004800/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nWHERE mail LIKE \'[a-zA-Z]%\'      -- starts with a letter\\n  AND mail LIKE \'%@leetcode.com\' -- ends with @leetcode.com\\n  AND mail NOT LIKE \'%#%\'        -- does not contain #\\n","compare_result":"110000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":94},{"id":1701003191,"question_id":1664,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 2\xc2\xa0hours","timestamp":1752737663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1701003191/","is_pending":"Not Pending","title":"Find Users With Valid E-Mails","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id, name, mail  \\nfrom Users \\nwhere mail like \'%@leetcode.com\' \\nand mail not like \'%#%\'\\nand mail not like \'.%\'","compare_result":"100000000000000000000001110","title_slug":"find-users-with-valid-e-mails","has_notes":false,"flag_type":1,"frontend_id":93},{"id":1700992254,"question_id":1462,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 2\xc2\xa0hours","timestamp":1752736938,"status":10,"status_display":"Accepted","runtime":"735 ms","url":"/submissions/detail/1700992254/","is_pending":"Not Pending","title":"List the Products Ordered in a Period","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, sum(unit) as unit\\nfrom Products p join Orders o on p.product_id = o.product_id \\nwhere year(order_date) = 2020 and month(order_date) = 2\\ngroup by p.product_name\\nhaving sum(unit) >= 100","compare_result":"1111111111111111","title_slug":"list-the-products-ordered-in-a-period","has_notes":false,"flag_type":1,"frontend_id":92}],"has_next":true,"last_key":""}'
2025-07-22 15:46:27,066 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:27,070 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-22 15.42.14 - Accepted - runtime 459ms - memory 0.0B.sql
2025-07-22 15:46:27,073 [INFO] __main__.py:245 - Writing department-top-three-salaries/2025-07-22 15.41.24 - Accepted - runtime 768ms - memory 0.0B.sql
2025-07-22 15:46:27,429 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:27,432 [INFO] __main__.py:245 - Writing department-highest-salary/2025-07-21 12.15.12 - Accepted - runtime 394ms - memory 0.0B.sql
2025-07-22 15:46:27,436 [INFO] __main__.py:251 - department-highest-salary/2025-07-21 09.48.07 - Accepted - runtime 420ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:27,783 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:27,786 [INFO] __main__.py:251 - rank-scores/2025-07-19 10.56.54 - Accepted - runtime 362ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:28,122 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:28,125 [INFO] __main__.py:251 - nth-highest-salary/2025-07-18 12.06.41 - Accepted - runtime 368ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:28,125 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.05.42 - Accepted - runtime 395ms - memory 0.0B.sql
2025-07-22 15:46:28,127 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.47 - Accepted - runtime 597ms - memory 0.0B.sql
2025-07-22 15:46:28,128 [INFO] __main__.py:245 - Writing nth-highest-salary/2025-07-18 12.04.02 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,466 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:28,470 [INFO] __main__.py:251 - find-users-with-valid-e-mails/2025-07-17 14.29.14 - Accepted - runtime 794ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:28,471 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.28.03 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,473 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.26.48 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,475 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.25.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,476 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.23.45 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,477 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.53 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,479 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.16.13 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,480 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 14.13.14 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,482 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.06.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,484 [INFO] __main__.py:245 - Writing find-users-with-valid-e-mails/2025-07-17 13.04.23 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:28,844 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:28,852 [INFO] __main__.py:251 - list-the-products-ordered-in-a-period/2025-07-17 12.52.18 - Accepted - runtime 735ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:33,857 [DEBUG] leetcode.py:150 - Exporting submissions from 20 to 40
2025-07-22 15:46:34,251 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=20&limit=20 HTTP/1.1" 200 None
2025-07-22 15:46:34,280 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1700986026,"question_id":1625,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752736557,"status":10,"status_display":"Accepted","runtime":"745 ms","url":"/submissions/detail/1700986026/","is_pending":"Not Pending","title":"Group Sold Products By The Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect dp.sell_date, count(dp.product) as num_sold ,\\nstring_agg(dp.product,\',\') WITHIN GROUP (ORDER BY Product) AS Products\\nfrom \\n(\\n    select distinct sell_date , product from Activities \\n) dp\\ngroup by sell_date\\n\\n","compare_result":"1111111111111111","title_slug":"group-sold-products-by-the-date","has_notes":false,"flag_type":1,"frontend_id":91},{"id":1700972781,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752735762,"status":10,"status_display":"Accepted","runtime":"353 ms","url":"/submissions/detail/1700972781/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    (SELECT DISTINCT TOP 1 salary\\n     FROM Employee\\n     WHERE salary < (SELECT MAX(salary) FROM Employee)\\n     ORDER BY salary DESC) AS SecondHighestSalary;\\n","compare_result":"1111111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":90},{"id":1700957052,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734878,"status":10,"status_display":"Accepted","runtime":"392 ms","url":"/submissions/detail/1700957052/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte_ranked as\\n(select id, email , row_number() over(partition by email order by id) as rn\\nfrom Person),\\nduplicate_id as(\\n    select id from cte_ranked where rn > 1\\n)\\ndelete from person \\nwhere id in (select id from duplicate_id)","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":89},{"id":1700947804,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734377,"status":10,"status_display":"Accepted","runtime":"333 ms","url":"/submissions/detail/1700947804/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT *\\nFROM Patients\\nWHERE \\n    conditions LIKE \'DIAB1%\'             -- at the start\\n    OR conditions LIKE \'DIAB1 %\'         -- starts with and followed by space\\n    OR conditions LIKE \'% DIAB1%\'        -- appears in middle\\n    OR conditions LIKE \'% DIAB1\'         -- appears at end\\n\\n","compare_result":"111111111111111","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":88},{"id":1700945911,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734276,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945911/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":87},{"id":1700945413,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700945413/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\' or conditions  like \'% DIAB1%\' \\n","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":86},{"id":1700941974,"question_id":1670,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752734066,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700941974/","is_pending":"Not Pending","title":"Patients With a Condition","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from Patients \\nwhere conditions  like \'%DIAB1%\'","compare_result":"111111111111100","title_slug":"patients-with-a-condition","has_notes":false,"flag_type":1,"frontend_id":85},{"id":1700938666,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752733884,"status":10,"status_display":"Accepted","runtime":"1154 ms","url":"/submissions/detail/1700938666/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users order by user_id","compare_result":"1111111111111111111111","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":84},{"id":1700938179,"question_id":1811,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752733860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700938179/","is_pending":"Not Pending","title":"Fix Names in a Table","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect user_id,upper(left(name,1))+lower(substring(name,2,len(name))) as name\\nfrom Users ","compare_result":"1000000000000000000000","title_slug":"fix-names-in-a-table","has_notes":false,"flag_type":1,"frontend_id":83},{"id":1700930907,"question_id":185,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 3\xc2\xa0hours","timestamp":1752733486,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/1700930907/","is_pending":"Not Pending","title":"Department Top Three Salaries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n-- Get top 3 highest paid employees per department\\nWITH cte_ranked AS (\\n    SELECT \\n        d.name AS Department, \\n        e.name AS Employee,\\n        e.salary,\\n        DENSE_RANK() OVER (\\n            PARTITION BY e.departmentId \\n            ORDER BY e.salary DESC\\n        ) AS rn\\n    FROM Employee e JOIN Department d ON e.departmentId = d.id\\n)\\nSELECT Department, Employee, salary\\nFROM cte_ranked\\nWHERE rn <= 3;\\n","compare_result":"111111111111111111111","title_slug":"department-top-three-salaries","has_notes":false,"flag_type":1,"frontend_id":82},{"id":1700918701,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 4\xc2\xa0hours","timestamp":1752732866,"status":10,"status_display":"Accepted","runtime":"1110 ms","url":"/submissions/detail/1700918701/","is_pending":"Not Pending","title":"Investments in 2016","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect cast(sum(tiv_2016)as decimal(10,2)) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111111111111111111111","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":81},{"id":1700917960,"question_id":585,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 4\xc2\xa0hours","timestamp":1752732827,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700917960/","is_pending":"Not Pending","title":"Investments in 2016","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect sum(tiv_2016) as tiv_2016 from Insurance\\nwhere tiv_2015 in\\n(select tiv_2015 from Insurance \\ngroup by tiv_2015 having count(*) > 1)\\nand concat(lat,lon) not in \\n(\\n    select concat(lat,lon) as location \\n    from Insurance\\n    group by lat,lon \\n    having count(*) > 1\\n)","compare_result":"1111011111100001000100","title_slug":"investments-in-2016","has_notes":false,"flag_type":1,"frontend_id":80},{"id":1700877102,"question_id":602,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 4\xc2\xa0hours","timestamp":1752730492,"status":10,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/1700877102/","is_pending":"Not Pending","title":"Friend Requests II: Who Has the Most Friends","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect top 1 id, count(*) as num from\\n(\\nselect requester_id as id from RequestAccepted \\nunion all\\nselect accepter_id as id from RequestAccepted\\n) as temp\\ngroup by id\\norder by 2 desc","compare_result":"111111111111","title_slug":"friend-requests-ii-who-has-the-most-friends","has_notes":false,"flag_type":1,"frontend_id":79},{"id":1700850728,"question_id":1452,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 5\xc2\xa0hours","timestamp":1752728967,"status":10,"status_display":"Accepted","runtime":"376 ms","url":"/submissions/detail/1700850728/","is_pending":"Not Pending","title":"Restaurant Growth","memory":"0.0B","code":"WITH cte_daily AS (\\n    SELECT \\n        visited_on, \\n        SUM(amount) AS daily_total\\n    FROM customer\\n    GROUP BY visited_on\\n),\\ncte_moving_avg AS (\\n    SELECT \\n        visited_on,\\n        SUM(daily_total) OVER (\\n            ORDER BY visited_on \\n            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n        ) AS amount,\\n        CAST(\\n            AVG(daily_total * 1.0) OVER (\\n                ORDER BY visited_on \\n                ROWS BETWEEN 6 PRECEDING AND CURRENT ROW\\n            ) AS DECIMAL(5,2)\\n        ) AS average_amount\\n    FROM cte_daily\\n)\\nSELECT *\\nFROM cte_moving_avg\\nWHERE visited_on >= (\\n    SELECT DATEADD(DAY, 6, MIN(visited_on)) \\n    FROM cte_daily\\n)\\nORDER BY visited_on;\\n","compare_result":"11111111111111","title_slug":"restaurant-growth","has_notes":false,"flag_type":1,"frontend_id":78},{"id":1700801779,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 5\xc2\xa0hours","timestamp":1752725884,"status":10,"status_display":"Accepted","runtime":"447 ms","url":"/submissions/detail/1700801779/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n\\n\\n-- Top user by rating count (lexicographically smaller in case of tie)\\n-- SELECT TOP 1 name AS results\\n-- FROM Users u\\n-- JOIN MovieRating mr ON u.user_id = mr.user_id\\n-- GROUP BY u.name\\n-- ORDER BY COUNT(*) DESC, u.name;\\n\\n-- Top movie by average rating in Feb 2020 (lexicographically smaller in case of tie)\\n-- UNION ALL\\n-- SELECT TOP 1 m.title AS results\\n-- FROM Movies m\\n-- JOIN MovieRating mr ON m.movie_id = mr.movie_id\\n-- WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n-- GROUP BY m.title\\n-- ORDER BY AVG(CAST(mr.rating AS FLOAT)) DESC, m.title;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":77},{"id":1700800094,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 6\xc2\xa0hours","timestamp":1752725770,"status":10,"status_display":"Accepted","runtime":"477 ms","url":"/submissions/detail/1700800094/","is_pending":"Not Pending","title":"Movie Rating","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte_rating_cnt AS (\\n    SELECT \\n        u.user_id, \\n        u.name, \\n        COUNT(mr.rating) AS rating_cnt\\n    FROM users u\\n    LEFT JOIN movierating mr ON u.user_id = mr.user_id \\n    GROUP BY u.user_id, u.name\\n),\\nuser_rated_greatest_number AS (\\n    SELECT TOP 1 name \\n    FROM cte_rating_cnt\\n    ORDER BY rating_cnt DESC, name\\n),\\ncte_movie_rating AS (\\n    SELECT \\n        m.title, \\n        AVG(CAST(mr.rating AS FLOAT)) AS avg_rating\\n    FROM MovieRating mr \\n    JOIN Movies m ON mr.movie_id = m.movie_id\\n    WHERE YEAR(mr.created_at) = 2020 AND MONTH(mr.created_at) = 2\\n    GROUP BY m.title\\n),\\nhighest_rated_movie AS (\\n    SELECT TOP 1 title \\n    FROM cte_movie_rating\\n    ORDER BY avg_rating DESC, title\\n)\\n-- Final result\\nSELECT name AS results FROM user_rated_greatest_number\\nUNION ALL\\nSELECT title FROM highest_rated_movie;\\n","compare_result":"1111111111111111111","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":76},{"id":1700790139,"question_id":1480,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 6\xc2\xa0hours","timestamp":1752725052,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1700790139/","is_pending":"Not Pending","title":"Movie Rating","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte_rating_cnt as\\n(\\nselect u.user_id, u.name , count(rating) as rating_cnt,\\nrow_number() over(order by count(rating) desc) as rn\\nfrom users u\\nleft join movierating m\\non u.user_id = m.user_id \\ngroup by u.user_id, name\\n),\\nuser_rated_greatest_number as\\n(\\nselect top 1 name from cte_rating_cnt\\norder by rating_cnt desc, name\\n),\\ncte_movie_rating as\\n(\\nselect top 1 m.movie_id, m.title, avg(mr.rating) as avg_ratings\\nfrom MovieRating mr left join Movies m on mr.movie_id = m.movie_id\\ngroup by m.movie_id,title\\norder by avg(mr.rating) desc, m.title asc\\n)\\nselect name as results from user_rated_greatest_number \\nunion all\\nselect title from cte_movie_rating","compare_result":"1110001101111000010","title_slug":"movie-rating","has_notes":false,"flag_type":1,"frontend_id":75},{"id":1699923891,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752661054,"status":10,"status_display":"Accepted","runtime":"347 ms","url":"/submissions/detail/1699923891/","is_pending":"Not Pending","title":"Exchange Seats","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <= (select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"11111111111111","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":74},{"id":1699923503,"question_id":626,"lang":"mssql","lang_name":"MS SQL Server","time":"5\xc2\xa0days, 23\xc2\xa0hours","timestamp":1752661030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699923503/","is_pending":"Not Pending","title":"Exchange Seats","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect \\ncase\\nwhen id%2 = 1 and id+1 <(select max(id) from seat) then id+1\\nwhen id%2=0 then id-1\\nelse id\\nend as id, student\\nfrom seat\\norder by id","compare_result":"10011010111001","title_slug":"exchange-seats","has_notes":false,"flag_type":1,"frontend_id":73},{"id":1699910674,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days","timestamp":1752660228,"status":10,"status_display":"Accepted","runtime":"433 ms","url":"/submissions/detail/1699910674/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)\\norder by employee_id","compare_result":"1111111111111","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":72}],"has_next":true,"last_key":""}'
2025-07-22 15:46:34,621 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:34,631 [INFO] __main__.py:251 - group-sold-products-by-the-date/2025-07-17 12.45.57 - Accepted - runtime 745ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:35,019 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:35,022 [INFO] __main__.py:251 - second-highest-salary/2025-07-17 12.32.42 - Accepted - runtime 353ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:35,386 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:35,400 [INFO] __main__.py:251 - delete-duplicate-emails/2025-07-17 12.17.58 - Accepted - runtime 392ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:35,771 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:35,775 [INFO] __main__.py:251 - patients-with-a-condition/2025-07-17 12.09.37 - Accepted - runtime 333ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:35,776 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:35,777 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.07.31 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:35,777 [INFO] __main__.py:245 - Writing patients-with-a-condition/2025-07-17 12.04.26 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:36,228 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:36,230 [INFO] __main__.py:251 - fix-names-in-a-table/2025-07-17 12.01.24 - Accepted - runtime 1154ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:36,232 [INFO] __main__.py:245 - Writing fix-names-in-a-table/2025-07-17 12.01.00 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:36,237 [INFO] __main__.py:251 - department-top-three-salaries/2025-07-17 11.54.46 - Accepted - runtime 397ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:36,583 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:36,590 [INFO] __main__.py:251 - investments-in-2016/2025-07-17 11.44.26 - Accepted - runtime 1110ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:36,590 [INFO] __main__.py:245 - Writing investments-in-2016/2025-07-17 11.43.47 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:37,232 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:37,241 [INFO] __main__.py:251 - friend-requests-ii-who-has-the-most-friends/2025-07-17 11.04.52 - Accepted - runtime 282ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:37,601 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:37,604 [INFO] __main__.py:251 - restaurant-growth/2025-07-17 10.39.27 - Accepted - runtime 376ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:37,928 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:37,939 [INFO] __main__.py:251 - movie-rating/2025-07-17 09.48.04 - Accepted - runtime 447ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:37,939 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.46.10 - Accepted - runtime 477ms - memory 0.0B.sql
2025-07-22 15:46:37,944 [INFO] __main__.py:245 - Writing movie-rating/2025-07-17 09.34.12 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:38,288 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:38,292 [INFO] __main__.py:251 - exchange-seats/2025-07-16 15.47.34 - Accepted - runtime 347ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:38,293 [INFO] __main__.py:245 - Writing exchange-seats/2025-07-16 15.47.10 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:38,648 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:38,682 [INFO] __main__.py:251 - employees-whose-manager-left-the-company/2025-07-16 15.33.48 - Accepted - runtime 433ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:43,683 [DEBUG] leetcode.py:150 - Exporting submissions from 40 to 60
2025-07-22 15:46:44,102 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=40&limit=20 HTTP/1.1" 200 None
2025-07-22 15:46:44,132 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1699910217,"question_id":2127,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days","timestamp":1752660200,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1699910217/","is_pending":"Not Pending","title":"Employees Whose Manager Left the Company","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect employee_id\\nfrom Employees \\nwhere salary < 30000\\nand manager_id not in (select distinct employee_id from employees)","compare_result":"1110111110101","title_slug":"employees-whose-manager-left-the-company","has_notes":false,"flag_type":1,"frontend_id":71},{"id":1699905913,"question_id":2057,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days","timestamp":1752659928,"status":10,"status_display":"Accepted","runtime":"11407 ms","url":"/submissions/detail/1699905913/","is_pending":"Not Pending","title":"Count Salary Categories","memory":"0.0B","code":"SELECT \\n  \'Low Salary\' AS category, COUNT(*) AS accounts_count\\nFROM Accounts\\nWHERE income < 20000\\n\\nUNION ALL\\n\\nSELECT \\n  \'Average Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income BETWEEN 20000 AND 50000\\n\\nUNION ALL\\n\\nSELECT \\n  \'High Salary\', COUNT(*)\\nFROM Accounts\\nWHERE income > 50000;\\n","compare_result":"11111111111","title_slug":"count-salary-categories","has_notes":false,"flag_type":1,"frontend_id":70},{"id":1699874879,"question_id":1327,"lang":"mssql","lang_name":"MS SQL Server","time":"6\xc2\xa0days","timestamp":1752657971,"status":10,"status_display":"Accepted","runtime":"1217 ms","url":"/submissions/detail/1699874879/","is_pending":"Not Pending","title":"Last Person to Fit in the Bus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect turn, person_id, person_name , weight,\\nsum(weight) over(order by turn) as total_weight\\nfrom Queue\\n),\\nordered_cte as\\n(select person_name, total_weight from cte\\nwhere total_weight <= 1000)\\nselect top 1 person_name \\nfrom ordered_cte\\norder by total_weight desc","compare_result":"11111111111111111111111111111","title_slug":"last-person-to-fit-in-the-bus","has_notes":false,"flag_type":1,"frontend_id":69},{"id":1698480048,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752564253,"status":10,"status_display":"Accepted","runtime":"801 ms","url":"/submissions/detail/1698480048/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":68},{"id":1697477621,"question_id":1278,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week","timestamp":1752495372,"status":10,"status_display":"Accepted","runtime":"943 ms","url":"/submissions/detail/1697477621/","is_pending":"Not Pending","title":"Product Price at a Given Date","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH latest_price_before_date AS (\\n    SELECT product_id, new_price,\\n           RANK() OVER (PARTITION BY product_id ORDER BY change_date DESC) AS rk\\n    FROM Products\\n    WHERE change_date <= \'2019-08-16\'\\n),\\nall_products AS (\\n    SELECT DISTINCT product_id FROM Products\\n)\\nSELECT \\n    ap.product_id,\\n    COALESCE(lp.new_price, 10) AS price\\nFROM all_products ap\\nLEFT JOIN latest_price_before_date lp\\n    ON ap.product_id = lp.product_id AND lp.rk = 1;\\n","compare_result":"111111111111111","title_slug":"product-price-at-a-given-date","has_notes":false,"flag_type":1,"frontend_id":67},{"id":1694167679,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752230604,"status":10,"status_display":"Accepted","runtime":"517 ms","url":"/submissions/detail/1694167679/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"0.0B","code":"WITH consecutive_num AS (\\n  SELECT num,\\n         LEAD(num, 1) OVER (ORDER BY id) AS num1,\\n         LEAD(num, 2) OVER (ORDER BY id) AS num2\\n  FROM logs\\n)\\nSELECT DISTINCT num AS ConsecutiveNums\\nFROM consecutive_num\\nWHERE num = num1 AND num = num2;\\n","compare_result":"11111111111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":66},{"id":1694165275,"question_id":180,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 3\xc2\xa0days","timestamp":1752230425,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1694165275/","is_pending":"Not Pending","title":"Consecutive Numbers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith consecutive_num as\\n(\\nselect num,\\nlead(num,1,0) over(order by id) as num1,\\nlead(num,2,0) over(order by id) as num2\\nfrom logs\\n),\\nnum_cnt as\\n(\\n    select num,\\n    case when num=num1 and num=num2 then 1 else 0\\n    end as is_consecutive_three\\n    from consecutive_num\\n)\\nselect distinct num ConsecutiveNums  from num_cnt\\nwhere is_consecutive_three = 1","compare_result":"11111101111111111111111","title_slug":"consecutive-numbers","has_notes":false,"flag_type":1,"frontend_id":65},{"id":1694143307,"question_id":610,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752228816,"status":10,"status_display":"Accepted","runtime":"294 ms","url":"/submissions/detail/1694143307/","is_pending":"Not Pending","title":"Triangle Judgement","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect x,y,z,\\ncase when x+y>z and y+z>x and x+z>y then \'Yes\' else \'No\' end as triangle \\nfrom triangle","compare_result":"11111111111","title_slug":"triangle-judgement","has_notes":false,"flag_type":1,"frontend_id":64},{"id":1693929450,"question_id":1942,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 4\xc2\xa0days","timestamp":1752214010,"status":10,"status_display":"Accepted","runtime":"523 ms","url":"/submissions/detail/1693929450/","is_pending":"Not Pending","title":"Primary Department for Each Employee","memory":"0.0B","code":"SELECT employee_id, department_id\\nFROM employee\\nWHERE employee_id IN (\\n    SELECT employee_id\\n    FROM employee\\n    GROUP BY employee_id\\n    HAVING COUNT(*) = 1\\n)\\nUNION\\nSELECT employee_id, department_id\\nFROM employee\\nWHERE primary_flag = \'Y\';\\n","compare_result":"11111111111111111111111","title_slug":"primary-department-for-each-employee","has_notes":false,"flag_type":1,"frontend_id":63},{"id":1692848980,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752130931,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1692848980/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT     e1.employee_id,     e1.name, \\n    COUNT(e2.reports_to) AS reports_count, \\n    FLOOR(AVG(1.0 * e2.age) + 0.5) AS average_age\\nFROM employees e1\\nJOIN employees e2 \\n    ON e1.employee_id = e2.reports_to\\nGROUP BY e1.employee_id, e1.name\\nORDER BY e1.employee_id;\\n\\n","compare_result":"111111111111111111111111","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":62},{"id":1692837512,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752130268,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692837512/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":61},{"id":1692825688,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752129596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692825688/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    e.reports_to AS employee_id,\\n    m.name,\\n    COUNT(*) AS reports_count,\\n    ROUND(AVG(e.age * 1.0), 0) AS average_age\\nFROM Employees e\\nJOIN Employees m \\n    ON e.reports_to = m.employee_id\\nWHERE e.reports_to IS NOT NULL\\nGROUP BY e.reports_to, m.name\\n\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":60},{"id":1692823420,"question_id":1882,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752129464,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692823420/","is_pending":"Not Pending","title":"The Number of Employees Which Report to Each Employee","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect e.reports_to employee_id , \\nm.name as name,\\ncount(e.employee_id) as reports_count ,\\nround(avg(e.age * 1.0),0) as average_age \\nfrom Employees e\\njoin Employees m\\non e.reports_to = m.employee_id\\ngroup by e.reports_to , m.name\\n","compare_result":"111111111111111000000000","title_slug":"the-number-of-employees-which-report-to-each-employee","has_notes":false,"flag_type":1,"frontend_id":59},{"id":1692792746,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752127732,"status":10,"status_display":"Accepted","runtime":"1433 ms","url":"/submissions/detail/1692792746/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\ngroup by customer_id\\nhaving count(distinct c.product_key) = \\n(select count(distinct product_key) from product)","compare_result":"111111111","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":58},{"id":1692790425,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752127596,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692790425/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":57},{"id":1692789535,"question_id":1135,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752127543,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692789535/","is_pending":"Not Pending","title":"Customers Who Bought All Products","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect customer_id\\nfrom Customer c\\njoin Product p\\non c.product_key  = p.product_key \\ngroup by customer_id\\nhaving count(distinct c.product_key) = 2","compare_result":"100010000","title_slug":"customers-who-bought-all-products","has_notes":false,"flag_type":1,"frontend_id":56},{"id":1692779658,"question_id":619,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752126974,"status":10,"status_display":"Accepted","runtime":"1876 ms","url":"/submissions/detail/1692779658/","is_pending":"Not Pending","title":"Biggest Single Number","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect max(num) as num\\nfrom(\\nselect num\\nfrom MyNumbers\\ngroup by num\\nhaving count(num) = 1\\n) as singles","compare_result":"111111111111111111","title_slug":"biggest-single-number","has_notes":false,"flag_type":1,"frontend_id":55},{"id":1692767666,"question_id":1877,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752126260,"status":10,"status_display":"Accepted","runtime":"785 ms","url":"/submissions/detail/1692767666/","is_pending":"Not Pending","title":"Find Followers Count","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect user_id , count(follower_id ) as followers_count\\nfrom followers\\ngroup by user_id","compare_result":"1111111111111111111111","title_slug":"find-followers-count","has_notes":false,"flag_type":1,"frontend_id":54},{"id":1692753178,"question_id":596,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752125368,"status":10,"status_display":"Accepted","runtime":"707 ms","url":"/submissions/detail/1692753178/","is_pending":"Not Pending","title":"Classes With at Least 5 Students","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect class\\nfrom courses\\ngroup by class\\nhaving count(class) >= 5\\n","compare_result":"11111111111","title_slug":"classes-with-at-least-5-students","has_notes":false,"flag_type":1,"frontend_id":53},{"id":1692744059,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752124817,"status":10,"status_display":"Accepted","runtime":"2338 ms","url":"/submissions/detail/1692744059/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],quantity , price,\\ndense_rank() over(partition by product_id order by year) as rn\\nfrom sales\\n)\\nselect product_id, [year] first_year, quantity, price\\nfrom cte\\nwhere rn = 1\\n\\n","compare_result":"1111111111","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":52}],"has_next":true,"last_key":""}'
2025-07-22 15:46:44,136 [INFO] __main__.py:245 - Writing employees-whose-manager-left-the-company/2025-07-16 15.33.20 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:44,554 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:44,568 [INFO] __main__.py:251 - count-salary-categories/2025-07-16 15.28.48 - Accepted - runtime 11407ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:44,909 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:44,918 [INFO] __main__.py:251 - last-person-to-fit-in-the-bus/2025-07-16 14.56.11 - Accepted - runtime 1217ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:45,295 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:45,301 [INFO] __main__.py:251 - product-price-at-a-given-date/2025-07-15 12.54.13 - Accepted - runtime 801ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:45,301 [INFO] __main__.py:245 - Writing product-price-at-a-given-date/2025-07-14 17.46.12 - Accepted - runtime 943ms - memory 0.0B.sql
2025-07-22 15:46:45,644 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:45,652 [INFO] __main__.py:251 - consecutive-numbers/2025-07-11 16.13.24 - Accepted - runtime 517ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:45,652 [INFO] __main__.py:245 - Writing consecutive-numbers/2025-07-11 16.10.25 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:46,033 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:46,033 [INFO] __main__.py:251 - triangle-judgement/2025-07-11 15.43.36 - Accepted - runtime 294ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:46,388 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:46,388 [INFO] __main__.py:251 - primary-department-for-each-employee/2025-07-11 11.36.50 - Accepted - runtime 523ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:46,807 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:46,812 [INFO] __main__.py:251 - the-number-of-employees-which-report-to-each-employee/2025-07-10 12.32.11 - Accepted - runtime 995ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:46,812 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.21.08 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:46,813 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.09.56 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:46,814 [INFO] __main__.py:245 - Writing the-number-of-employees-which-report-to-each-employee/2025-07-10 12.07.44 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:47,182 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:47,188 [INFO] __main__.py:251 - customers-who-bought-all-products/2025-07-10 11.38.52 - Accepted - runtime 1433ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:47,188 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.36.36 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:47,191 [INFO] __main__.py:245 - Writing customers-who-bought-all-products/2025-07-10 11.35.43 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:47,538 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:47,538 [INFO] __main__.py:251 - biggest-single-number/2025-07-10 11.26.14 - Accepted - runtime 1876ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:47,983 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:47,997 [INFO] __main__.py:251 - find-followers-count/2025-07-10 11.14.20 - Accepted - runtime 785ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:48,330 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:48,332 [INFO] __main__.py:251 - classes-with-at-least-5-students/2025-07-10 10.59.28 - Accepted - runtime 707ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:48,777 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:48,782 [INFO] __main__.py:251 - product-sales-analysis-iii/2025-07-10 10.50.17 - Accepted - runtime 2338ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:53,783 [DEBUG] leetcode.py:150 - Exporting submissions from 60 to 80
2025-07-22 15:46:54,412 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=60&limit=20 HTTP/1.1" 200 None
2025-07-22 15:46:54,427 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1692737946,"question_id":1155,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752124449,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692737946/","is_pending":"Not Pending","title":"Product Sales Analysis III","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nwith cte as\\n(\\nselect product_id, [year],\\ndense_rank() over(partition by product_id order by year) as rn,\\nquantity , price\\nfrom sales\\n)\\nselect \\nproduct_id, [year] first_year, \\nsum(quantity) quantity, \\nsum( price ) price\\nfrom cte\\nwhere rn = 1\\ngroup by product_id, year","compare_result":"1000000000","title_slug":"product-sales-analysis-iii","has_notes":false,"flag_type":1,"frontend_id":51},{"id":1692719348,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752123258,"status":10,"status_display":"Accepted","runtime":"2354 ms","url":"/submissions/detail/1692719348/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct user_id ) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1111111111111111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":50},{"id":1692715449,"question_id":1245,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752122997,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1692715449/","is_pending":"Not Pending","title":"User Activity for the Past 30 Days I","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect activity_date as [day], \\ncount(distinct session_id) as active_users \\nfrom activity\\nwhere activity_date between dateadd(day,-29,\'2019-07-27\') and \'2019-07-27\'\\ngroup by activity_date\\norder by 1","compare_result":"1110000000000111","title_slug":"user-activity-for-the-past-30-days-i","has_notes":false,"flag_type":1,"frontend_id":49},{"id":1691979425,"question_id":2495,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752065317,"status":10,"status_display":"Accepted","runtime":"1340 ms","url":"/submissions/detail/1691979425/","is_pending":"Not Pending","title":"Number of Unique Subjects Taught by Each Teacher","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect teacher_id, count(distinct subject_id) as cnt\\nfrom teacher\\ngroup by teacher_id","compare_result":"11111111111111","title_slug":"number-of-unique-subjects-taught-by-each-teacher","has_notes":false,"flag_type":1,"frontend_id":48},{"id":1691960670,"question_id":1182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752064013,"status":10,"status_display":"Accepted","runtime":"1748 ms","url":"/submissions/detail/1691960670/","is_pending":"Not Pending","title":"Game Play Analysis IV","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH firstLogin AS (\\n    SELECT player_id, MIN(event_date) AS first_login\\n    FROM activity\\n    GROUP BY player_id\\n),\\nnextDayLogin AS (\\n    SELECT a.player_id\\n    FROM activity a\\n    JOIN firstLogin f\\n      ON a.player_id = f.player_id\\n     AND a.event_date = DATEADD(day, 1, f.first_login)\\n)\\nSELECT \\n    ROUND(CAST(COUNT(DISTINCT n.player_id) AS FLOAT) / COUNT(DISTINCT f.player_id), 2) AS fraction\\nFROM firstLogin f\\nLEFT JOIN nextDayLogin n\\n    ON f.player_id = n.player_id;\\n","compare_result":"111111111111111","title_slug":"game-play-analysis-iv","has_notes":false,"flag_type":1,"frontend_id":47},{"id":1691937332,"question_id":1292,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 5\xc2\xa0days","timestamp":1752062357,"status":10,"status_display":"Accepted","runtime":"1485 ms","url":"/submissions/detail/1691937332/","is_pending":"Not Pending","title":"Immediate Food Delivery II","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nWITH cte AS (\\n    SELECT *, \\n        CASE \\n            WHEN order_date = customer_pref_delivery_date THEN \'immediate\'\\n            ELSE \'scheduled\' END AS schedule_type,\\n        ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS rn\\n    FROM Delivery\\n)\\nSELECT ROUND(100.0 * SUM(CASE WHEN schedule_type = \'immediate\' THEN 1 ELSE 0 END)/ \\n    COUNT(*), 2) AS immediate_percentage\\nFROM cte\\nWHERE rn = 1;\\n","compare_result":"11111111111111111111111","title_slug":"immediate-food-delivery-ii","has_notes":false,"flag_type":1,"frontend_id":46},{"id":1691831879,"question_id":1317,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752055228,"status":10,"status_display":"Accepted","runtime":"1588 ms","url":"/submissions/detail/1691831879/","is_pending":"Not Pending","title":"Monthly Transactions I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    FORMAT(trans_date, \'yyyy-MM\') AS month,\\n    country,\\n    COUNT(*) AS trans_count,\\n    SUM(CASE WHEN state = \'approved\' THEN 1 ELSE 0 END) AS approved_count,\\n    SUM(amount) AS trans_total_amount,\\n    SUM(CASE WHEN state = \'approved\' THEN amount ELSE 0 END) AS approved_total_amount\\nFROM Transactions\\nGROUP BY FORMAT(trans_date, \'yyyy-MM\'), country;\\n\\n","compare_result":"1111111111111111","title_slug":"monthly-transactions-i","has_notes":false,"flag_type":1,"frontend_id":45},{"id":1691610045,"question_id":1338,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0week, 6\xc2\xa0days","timestamp":1752041270,"status":10,"status_display":"Accepted","runtime":"912 ms","url":"/submissions/detail/1691610045/","is_pending":"Not Pending","title":"Queries Quality and Percentage","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT \\n    query_name,\\n    ROUND(SUM(CAST(rating AS FLOAT) / position) / COUNT(*), 2) AS quality,\\n    ROUND(SUM(CASE WHEN rating < 3 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) AS poor_query_percentage\\nFROM Queries\\nGROUP BY query_name;\\n","compare_result":"1111111111111","title_slug":"queries-quality-and-percentage","has_notes":false,"flag_type":1,"frontend_id":44},{"id":1670155173,"question_id":1773,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750398439,"status":10,"status_display":"Accepted","runtime":"2733 ms","url":"/submissions/detail/1670155173/","is_pending":"Not Pending","title":"Percentage of Users Attended a Contest","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect \\nr.contest_id , \\nround(count( r.contest_id) * 100/(select count(user_id) * 1.0 from Users),2) as percentage \\nfrom Register r join Users u \\non r.user_id=u.user_id \\ngroup by contest_id \\norder by percentage desc , contest_id asc","compare_result":"11111111111111","title_slug":"percentage-of-users-attended-a-contest","has_notes":false,"flag_type":1,"frontend_id":43},{"id":1669381795,"question_id":1161,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334989,"status":10,"status_display":"Accepted","runtime":"1253 ms","url":"/submissions/detail/1669381795/","is_pending":"Not Pending","title":"Project Employees I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.project_id  , \\nround(\\nisnull(sum(e.experience_years ) * 1.0/count(e.employee_id ),0) , 2\\n) as average_years \\nfrom project p\\njoin employee e\\non p.employee_id  = e.employee_id \\ngroup by p.project_id","compare_result":"11111111","title_slug":"project-employees-i","has_notes":false,"flag_type":1,"frontend_id":42},{"id":1669370515,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750334137,"status":10,"status_display":"Accepted","runtime":"326 ms","url":"/submissions/detail/1669370515/","is_pending":"Not Pending","title":"Average Selling Price","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT p.product_id,\\nROUND(\\n      ISNULL(SUM(u.units * p.price) * 1.0 / NULLIF(SUM(u.units), 0), 0),2\\n    ) AS average_price\\nFROM Prices p\\nLEFT JOIN UnitsSold u\\nON p.product_id = u.product_id\\nAND u.purchase_date BETWEEN p.start_date AND p.end_date\\nGROUP BY p.product_id;\\n\\n","compare_result":"111111111111111111","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":41},{"id":1669326291,"question_id":620,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330922,"status":10,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/1669326291/","is_pending":"Not Pending","title":"Not Boring Movies","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"11111111","title_slug":"not-boring-movies","has_notes":false,"flag_type":1,"frontend_id":40},{"id":1669326023,"question_id":1390,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330903,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1669326023/","is_pending":"Not Pending","title":"Average Selling Price","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect * from cinema\\nwhere (id%2 <> 0) and (description <> \'boring\')\\norder by rating desc","compare_result":"000000000000000000","title_slug":"average-selling-price","has_notes":false,"flag_type":1,"frontend_id":39},{"id":1669319594,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330458,"status":10,"status_display":"Accepted","runtime":"462 ms","url":"/submissions/detail/1669319594/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"0.0B","code":"SELECT \\ns.user_id, \\nround(ISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0),2)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11111111111111","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":38},{"id":1669318020,"question_id":2087,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750330348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1669318020/","is_pending":"Not Pending","title":"Confirmation Rate","memory":"N/A","code":"SELECT \\ns.user_id, \\nISNULL(sum(case when action = \'confirmed\' then 1 else null end)* 1.0 /count(action), 0)\\nas confirmation_rate\\nfrom Signups s left join Confirmations C\\non s.user_id = C.user_id\\ngroup by s.user_id\\norder by user_id","compare_result":"11100000000000","title_slug":"confirmation-rate","has_notes":false,"flag_type":1,"frontend_id":37},{"id":1669289392,"question_id":570,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750328441,"status":10,"status_display":"Accepted","runtime":"1565 ms","url":"/submissions/detail/1669289392/","is_pending":"Not Pending","title":"Managers with at Least 5 Direct Reports","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e1.name from employee e1\\njoin \\n(\\n    select managerid, count(*) AS directReports\\n    from employee\\n    group by managerid\\n    having count(*) >= 5\\n) e2\\non e1.id = e2.managerid","compare_result":"11111111111","title_slug":"managers-with-at-least-5-direct-reports","has_notes":false,"flag_type":1,"frontend_id":36},{"id":1669276284,"question_id":1415,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750327585,"status":10,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/1669276284/","is_pending":"Not Pending","title":"Students and Examinations","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT s.student_id, s.student_name, su.subject_name, \\nCOUNT(e.student_id) AS attended_exams\\nFROM Students s \\ncross join subjects su\\nleft JOIN Examinations e \\non s.student_id  = e.student_id and su.subject_name = e.subject_name\\nGROUP BY s.student_id, s.student_name, su.subject_name\\nORDER BY s.student_id, su.subject_name\\n","compare_result":"11111111111111","title_slug":"students-and-examinations","has_notes":false,"flag_type":1,"frontend_id":35},{"id":1668276598,"question_id":577,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750250093,"status":10,"status_display":"Accepted","runtime":"559 ms","url":"/submissions/detail/1668276598/","is_pending":"Not Pending","title":"Employee Bonus","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name , b.bonus\\nfrom Employee e full outer join bonus b\\non e.empid = b.empid\\nwhere b.bonus < 1000 or bonus is null\\n\\n","compare_result":"111111111111111111111","title_slug":"employee-bonus","has_notes":false,"flag_type":1,"frontend_id":34},{"id":1668254361,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248407,"status":10,"status_display":"Accepted","runtime":"249 ms","url":"/submissions/detail/1668254361/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,round(avg(b.timestamp - a.timestamp ),3 ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"111111111","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":33},{"id":1668254033,"question_id":1801,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month","timestamp":1750248381,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1668254033/","is_pending":"Not Pending","title":"Average Time of Process per Machine","memory":"N/A","code":"/* Write your T-SQL query statement below */\\nselect a.machine_id,avg(b.timestamp - a.timestamp ) processing_time\\nfrom Activity a\\njoin Activity b\\non a.machine_id = b.machine_id\\nand a.process_id = b.process_id \\nand a.activity_type = \'start\' \\nand b.activity_type  = \'end\'\\ngroup by a.machine_id","compare_result":"100000001","title_slug":"average-time-of-process-per-machine","has_notes":false,"flag_type":1,"frontend_id":32}],"has_next":true,"last_key":""}'
2025-07-22 15:46:54,428 [INFO] __main__.py:245 - Writing product-sales-analysis-iii/2025-07-10 10.44.09 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:55,017 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:55,021 [INFO] __main__.py:251 - user-activity-for-the-past-30-days-i/2025-07-10 10.24.18 - Accepted - runtime 2354ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:55,021 [INFO] __main__.py:245 - Writing user-activity-for-the-past-30-days-i/2025-07-10 10.19.57 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:46:55,703 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:55,705 [INFO] __main__.py:251 - number-of-unique-subjects-taught-by-each-teacher/2025-07-09 18.18.37 - Accepted - runtime 1340ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:56,156 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:56,163 [INFO] __main__.py:251 - game-play-analysis-iv/2025-07-09 17.56.53 - Accepted - runtime 1748ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:56,542 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:56,550 [INFO] __main__.py:251 - immediate-food-delivery-ii/2025-07-09 17.29.17 - Accepted - runtime 1485ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:57,068 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:57,069 [INFO] __main__.py:251 - monthly-transactions-i/2025-07-09 15.30.28 - Accepted - runtime 1588ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:57,449 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:57,459 [INFO] __main__.py:251 - queries-quality-and-percentage/2025-07-09 11.37.50 - Accepted - runtime 912ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:58,280 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:58,293 [INFO] __main__.py:251 - percentage-of-users-attended-a-contest/2025-06-20 11.17.19 - Accepted - runtime 2733ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:58,630 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:58,632 [INFO] __main__.py:251 - project-employees-i/2025-06-19 17.39.49 - Accepted - runtime 1253ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:58,958 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:58,961 [INFO] __main__.py:251 - average-selling-price/2025-06-19 17.25.37 - Accepted - runtime 326ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:59,334 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:59,338 [INFO] __main__.py:251 - not-boring-movies/2025-06-19 16.32.02 - Accepted - runtime 240ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:59,338 [INFO] __main__.py:245 - Writing average-selling-price/2025-06-19 16.31.43 - Runtime Error - runtime NA - memory NA.sql
2025-07-22 15:46:59,691 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:46:59,693 [INFO] __main__.py:251 - confirmation-rate/2025-06-19 16.24.18 - Accepted - runtime 462ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:46:59,693 [INFO] __main__.py:245 - Writing confirmation-rate/2025-06-19 16.22.28 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:47:00,035 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:00,050 [INFO] __main__.py:251 - managers-with-at-least-5-direct-reports/2025-06-19 15.50.41 - Accepted - runtime 1565ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:00,490 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:00,498 [INFO] __main__.py:251 - students-and-examinations/2025-06-19 15.36.25 - Accepted - runtime 448ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:00,860 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:00,882 [INFO] __main__.py:251 - employee-bonus/2025-06-18 18.04.53 - Accepted - runtime 559ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:01,261 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:01,262 [INFO] __main__.py:251 - average-time-of-process-per-machine/2025-06-18 17.36.47 - Accepted - runtime 249ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:01,262 [INFO] __main__.py:245 - Writing average-time-of-process-per-machine/2025-06-18 17.36.21 - Wrong Answer - runtime NA - memory NA.sql
2025-07-22 15:47:06,276 [DEBUG] leetcode.py:150 - Exporting submissions from 80 to 100
2025-07-22 15:47:07,001 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=80&limit=20 HTTP/1.1" 200 None
2025-07-22 15:47:07,016 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1662139715,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749747972,"status":10,"status_display":"Accepted","runtime":"537 ms","url":"/submissions/detail/1662139715/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nSELECT today.id\\nFROM Weather yesterday\\nCROSS JOIN Weather today\\nWHERE DATEDIFF(DAY, yesterday.recordDate, today.recordDate) = 1\\n    AND today.temperature > yesterday.temperature\\n;\\n\\n/*\\nselect pr.id from\\n(\\nselect id, temperature, lag(temperature) over(order by recordDate) as prev_temp\\n) as pr\\nwhere pr.temperature > pr.prev_temp\\n*/","compare_result":"111111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":31},{"id":1660489389,"question_id":1724,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749621704,"status":10,"status_display":"Accepted","runtime":"1131 ms","url":"/submissions/detail/1660489389/","is_pending":"Not Pending","title":"Customer Who Visited but Did Not Make Any Transactions","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect v.customer_id, count(v.visit_id )  count_no_trans\\nfrom visits v full join transactions t\\non v.visit_id = t.visit_id\\nwhere t.transaction_id  is null\\ngroup by v.customer_id\\norder by count_no_trans","compare_result":"11111111111111111111111111111","title_slug":"customer-who-visited-but-did-not-make-any-transactions","has_notes":false,"flag_type":1,"frontend_id":30},{"id":1660376945,"question_id":1153,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749613633,"status":10,"status_display":"Accepted","runtime":"3036 ms","url":"/submissions/detail/1660376945/","is_pending":"Not Pending","title":"Product Sales Analysis I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect p.product_name, s.year, s.price \\nfrom Sales s left join Product p\\non s.product_id = p.product_id\\n","compare_result":"1111111111111","title_slug":"product-sales-analysis-i","has_notes":false,"flag_type":1,"frontend_id":29},{"id":1659154428,"question_id":1509,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514556,"status":10,"status_display":"Accepted","runtime":"1140 ms","url":"/submissions/detail/1659154428/","is_pending":"Not Pending","title":"Replace Employee ID With The Unique Identifier","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect eu.unique_id, e.name from employees e\\nleft join EmployeeUNI eu \\non e.id = eu.id","compare_result":"1111111111111111111111111","title_slug":"replace-employee-id-with-the-unique-identifier","has_notes":false,"flag_type":1,"frontend_id":28},{"id":1659153081,"question_id":1827,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514375,"status":10,"status_display":"Accepted","runtime":"737 ms","url":"/submissions/detail/1659153081/","is_pending":"Not Pending","title":"Invalid Tweets","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect tweet_id  from Tweets\\nwhere len(content) > 15","compare_result":"1111111111111111111111","title_slug":"invalid-tweets","has_notes":false,"flag_type":1,"frontend_id":27},{"id":1659151794,"question_id":1258,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749514201,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/1659151794/","is_pending":"Not Pending","title":"Article Views I","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect distinct author_id as id from Views\\nwhere author_id = viewer_id\\norder by author_id","compare_result":"1111111111111","title_slug":"article-views-i","has_notes":false,"flag_type":1,"frontend_id":26},{"id":1659150305,"question_id":595,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749513993,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1659150305/","is_pending":"Not Pending","title":"Big Countries","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name, population, area from World\\nwhere area >= 3000000  or population >= 25000000","compare_result":"111111","title_slug":"big-countries","has_notes":false,"flag_type":1,"frontend_id":25},{"id":1659149149,"question_id":584,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 1\xc2\xa0week","timestamp":1749513824,"status":10,"status_display":"Accepted","runtime":"528 ms","url":"/submissions/detail/1659149149/","is_pending":"Not Pending","title":"Find Customer Referee","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect name from customer where referee_id <> 2 or referee_id is null","compare_result":"1111111111111111111","title_slug":"find-customer-referee","has_notes":false,"flag_type":1,"frontend_id":24},{"id":1652467197,"question_id":1908,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0month, 2\xc2\xa0weeks","timestamp":1748934639,"status":10,"status_display":"Accepted","runtime":"473 ms","url":"/submissions/detail/1652467197/","is_pending":"Not Pending","title":"Recyclable and Low Fat Products","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect product_id from Products\\nwhere low_fats = \'Y\' and recyclable  = \'Y\'","compare_result":"1111111111111111111111","title_slug":"recyclable-and-low-fat-products","has_notes":false,"flag_type":1,"frontend_id":23},{"id":1352286115,"question_id":586,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723395794,"status":10,"status_display":"Accepted","runtime":"444 ms","url":"/submissions/detail/1352286115/","is_pending":"Not Pending","title":"Customer Placing the Largest Number of Orders","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\n\\nselect top 1 customer_number from orders\\ngroup by customer_number \\norder by count(customer_number) desc\\n","compare_result":"11111111111111111111","title_slug":"customer-placing-the-largest-number-of-orders","has_notes":false,"flag_type":1,"frontend_id":22},{"id":1348725330,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 2\xc2\xa0weeks","timestamp":1723111279,"status":10,"status_display":"Accepted","runtime":"1265 ms","url":"/submissions/detail/1348725330/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect e.name as Employee from Employee e\\njoin Employee m\\non e.managerid = m.id and e.salary > m.salary","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":21},{"id":1342095014,"question_id":1541,"lang":"mssql","lang_name":"MS SQL Server","time":"11\xc2\xa0months, 3\xc2\xa0weeks","timestamp":1722618579,"status":10,"status_display":"Accepted","runtime":"843 ms","url":"/submissions/detail/1342095014/","is_pending":"Not Pending","title":"Top Travellers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\nselect u.name, isnull(r.sum_distance,0) as travelled_distance from \\n(\\n    select user_id, sum(distance) as sum_distance\\n    from rides\\n    group by user_id\\n) r right join users u\\non u.id = r.user_id\\norder by r.sum_distance desc, u.name\\n","compare_result":"111111111111111111","title_slug":"top-travellers","has_notes":false,"flag_type":1,"frontend_id":20},{"id":1043002317,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089390,"status":10,"status_display":"Accepted","runtime":"1344 ms","url":"/submissions/detail/1043002317/","is_pending":"Not Pending","title":"Rising Temperature","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect w1.id as ID\\r\\nfrom weather w1,weather w2\\r\\nwhere w1.temperature > w2.temperature \\r\\nand datediff(day,w2.recordDate,w1.recordDate) = 1\\r\\n ","compare_result":"11111111111111","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":19},{"id":1042999640,"question_id":197,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 10\xc2\xa0months","timestamp":1694089116,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1042999640/","is_pending":"Not Pending","title":"Rising Temperature","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\n/*select w1.id \\r\\nfrom weather w1\\r\\njoin weather w2\\r\\non datediff(dd,w1.recordDate,w2.recordDate) = 1\\r\\nwhere w1.temperature > w2.temperature */\\r\\n \\r\\nSELECT w1.id\\r\\nFROM Weather w1\\r\\nJOIN Weather w2 ON w1.recordDate = DATE_ADD(w2.recordDate, INTERVAL 1 DAY)\\r\\nWHERE w1.temperature > w2.temperature","compare_result":"00000000000000","title_slug":"rising-temperature","has_notes":false,"flag_type":1,"frontend_id":18},{"id":1031100921,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692940212,"status":10,"status_display":"Accepted","runtime":"1338 ms","url":"/submissions/detail/1031100921/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":17},{"id":1029511014,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792516,"status":10,"status_display":"Accepted","runtime":"1642 ms","url":"/submissions/detail/1029511014/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":16},{"id":1029510363,"question_id":176,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1692792466,"status":10,"status_display":"Accepted","runtime":"1053 ms","url":"/submissions/detail/1029510363/","is_pending":"Not Pending","title":"Second Highest Salary","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect max(salary) as SecondHighestSalary from employee where salary < (select max(salary) from employee)","compare_result":"11111111","title_slug":"second-highest-salary","has_notes":false,"flag_type":1,"frontend_id":15},{"id":1016455334,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573885,"status":10,"status_display":"Accepted","runtime":"1095 ms","url":"/submissions/detail/1016455334/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":14},{"id":1016455058,"question_id":196,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1691573858,"status":10,"status_display":"Accepted","runtime":"2190 ms","url":"/submissions/detail/1016455058/","is_pending":"Not Pending","title":"Delete Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nDELETE P1 FROM PERSON P1, PERSON P2\\r\\nWHERE P1.Email = p2.Email AND P1.Id>P2.Id","compare_result":"1111111111111111111111","title_slug":"delete-duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":13},{"id":1009234981,"question_id":183,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690881420,"status":10,"status_display":"Accepted","runtime":"724 ms","url":"/submissions/detail/1009234981/","is_pending":"Not Pending","title":"Customers Who Never Order","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as customers from Customers where id not in(select customerid from orders)","compare_result":"111111111111","title_slug":"customers-who-never-order","has_notes":false,"flag_type":1,"frontend_id":12}],"has_next":true,"last_key":""}'
2025-07-22 15:47:07,371 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:07,374 [INFO] __main__.py:251 - rising-temperature/2025-06-12 22.36.12 - Accepted - runtime 537ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:07,731 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:07,732 [INFO] __main__.py:251 - customer-who-visited-but-did-not-make-any-transactions/2025-06-11 11.31.44 - Accepted - runtime 1131ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:08,132 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:08,136 [INFO] __main__.py:251 - product-sales-analysis-i/2025-06-11 09.17.13 - Accepted - runtime 3036ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:08,681 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:08,683 [INFO] __main__.py:251 - replace-employee-id-with-the-unique-identifier/2025-06-10 05.45.56 - Accepted - runtime 1140ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:09,080 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:09,088 [INFO] __main__.py:251 - invalid-tweets/2025-06-10 05.42.55 - Accepted - runtime 737ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:09,450 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:09,452 [INFO] __main__.py:251 - article-views-i/2025-06-10 05.40.01 - Accepted - runtime 998ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:09,795 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:09,798 [INFO] __main__.py:251 - big-countries/2025-06-10 05.36.33 - Accepted - runtime 585ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:10,131 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:10,135 [INFO] __main__.py:251 - find-customer-referee/2025-06-10 05.33.44 - Accepted - runtime 528ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:10,496 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:10,504 [INFO] __main__.py:251 - recyclable-and-low-fat-products/2025-06-03 12.40.39 - Accepted - runtime 473ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:10,898 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:10,901 [INFO] __main__.py:251 - customer-placing-the-largest-number-of-orders/2024-08-11 22.33.14 - Accepted - runtime 444ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:11,471 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:11,503 [INFO] __main__.py:251 - employees-earning-more-than-their-managers/2024-08-08 15.31.19 - Accepted - runtime 1265ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:12,195 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:12,196 [INFO] __main__.py:251 - top-travellers/2024-08-02 22.39.39 - Accepted - runtime 843ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:12,196 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.53.10 - Accepted - runtime 1344ms - memory 0.0B.sql
2025-07-22 15:47:12,201 [INFO] __main__.py:245 - Writing rising-temperature/2023-09-07 17.48.36 - Runtime Error - runtime NA - memory NA.sql
2025-07-22 15:47:12,272 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-25 10.40.12 - Accepted - runtime 1338ms - memory 0.0B.sql
2025-07-22 15:47:12,274 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.38.36 - Accepted - runtime 1642ms - memory 0.0B.sql
2025-07-22 15:47:12,274 [INFO] __main__.py:245 - Writing second-highest-salary/2023-08-23 17.37.46 - Accepted - runtime 1053ms - memory 0.0B.sql
2025-07-22 15:47:12,278 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.08.05 - Accepted - runtime 1095ms - memory 0.0B.sql
2025-07-22 15:47:12,280 [INFO] __main__.py:245 - Writing delete-duplicate-emails/2023-08-09 15.07.38 - Accepted - runtime 2190ms - memory 0.0B.sql
2025-07-22 15:47:12,905 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:12,907 [INFO] __main__.py:251 - customers-who-never-order/2023-08-01 14.47.00 - Accepted - runtime 724ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:17,915 [DEBUG] leetcode.py:150 - Exporting submissions from 100 to 120
2025-07-22 15:47:18,301 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "GET /api/submissions/?offset=100&limit=20 HTTP/1.1" 200 None
2025-07-22 15:47:18,312 [DEBUG] leetcode.py:152 - b'{"submissions_dump":[{"id":1009161386,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874221,"status":10,"status_display":"Accepted","runtime":"875 ms","url":"/submissions/detail/1009161386/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":11},{"id":1009161138,"question_id":182,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 11\xc2\xa0months","timestamp":1690874197,"status":10,"status_display":"Accepted","runtime":"1543 ms","url":"/submissions/detail/1009161138/","is_pending":"Not Pending","title":"Duplicate Emails","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nSelect email from person group by email having count(*) > 1","compare_result":"111111111111111","title_slug":"duplicate-emails","has_notes":false,"flag_type":1,"frontend_id":10},{"id":1004211677,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690353557,"status":10,"status_display":"Accepted","runtime":"981 ms","url":"/submissions/detail/1004211677/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect name as Employee from Employee e1 where salary > (select salary from Employee where id = e1.managerId)","compare_result":"11111111111111","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":9},{"id":1004210595,"question_id":181,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690353467,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1004210595/","is_pending":"Not Pending","title":"Employees Earning More Than Their Managers","memory":"N/A","code":"/* Write your T-SQL query statement below */\\r\\nselect * from Employee e1 where salary > (select salary from Emplpoyee where id = e1.managerId)","compare_result":"00000000000000","title_slug":"employees-earning-more-than-their-managers","has_notes":false,"flag_type":1,"frontend_id":8},{"id":1003745627,"question_id":175,"lang":"mssql","lang_name":"MS SQL Server","time":"1\xc2\xa0year, 12\xc2\xa0months","timestamp":1690304358,"status":10,"status_display":"Accepted","runtime":"1086 ms","url":"/submissions/detail/1003745627/","is_pending":"Not Pending","title":"Combine Two Tables","memory":"0.0B","code":"/* Write your T-SQL query statement below */\\r\\nselect FirstName, LastName, city, state from person left join address \\r\\non person.personId = address.personId ","compare_result":"11111111","title_slug":"combine-two-tables","has_notes":false,"flag_type":1,"frontend_id":7},{"id":842546003,"question_id":327,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668329684,"status":10,"status_display":"Accepted","runtime":"2624 ms","url":"/submissions/detail/842546003/","is_pending":"Not Pending","title":"Count of Range Sum","memory":"100.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} lower\\n * @param {number} upper\\n * @return {number}\\n */\\nvar countRangeSum = function(nums, lower, upper) {\\n    let preSum = Array(nums.length + 1).fill(0);\\n  let count = 0;\\n\\n  // create preSum array, use preSum to check the sum range\\n  for (let i = 0; i < nums.length; i++) {\\n      preSum[i + 1] = preSum[i] + nums[i];\\n  }\\n\\n  const sort = function(preSum) {\\n      if (preSum.length === 1) return preSum;\\n\\n      let mid = Math.floor(preSum.length / 2);\\n      let left = sort(preSum.slice(0, mid));\\n      let right = sort(preSum.slice(mid))\\n\\n      return merge(left, right);\\n  }\\n\\n  const merge = function(left, right) {\\n      let start = 0;\\n      let end = 0;\\n\\n      for (let i = 0; i < left.length; i++) {\\n          // all elements before start index, after subtracting left[i] are less than lower, which means all elements after start index are bigger or equal than lower\\n          while (start < right.length && right[start] - left[i] < lower) {\\n              start++;\\n          }\\n          // similarly, all elements before end index are less or euqal then upper\\n          while (end < right.length && right[end] - left[i] <= upper) {\\n              end++;\\n          }\\n\\n          // since the initial values of start and end are the same, and upper >= lower, so end will >= start too, which means the rest of the end minus start element difference will fall between [lower, upper].\\n          count += end - start;\\n      }\\n\\n      let sort = [];\\n      while (left.length && right.length) {\\n          if (left[0] <= right[0]) {\\n              sort.push(left.shift());\\n          } else {\\n              sort.push(right.shift());\\n          }\\n      }\\n\\n      return [...sort, ...left, ...right];\\n  }\\n\\n  sort(preSum);\\n  return count;\\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-of-range-sum","has_notes":false,"flag_type":1,"frontend_id":6},{"id":842024680,"question_id":2561,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1668266557,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/842024680/","is_pending":"Not Pending","title":"Number of Distinct Averages","memory":"N/A","code":"/**\\n * @param {number[]} nums\\n * @return {number}\\n */\\nvar distinctAverages = function(nums) {\\n    for(let i = 0; i < nums.length;i++)\\n    {\\n        let newnums = nums;\\n        let  res = [],max = Math.max(...nums), min = Math.min(...nums);   \\n        res[0] = min, res[1] = max\\n        let avg = (max+min)/2\\n    }\\n    \\n    \\n};","compare_result":"000000000000000000000000000000000000","title_slug":"number-of-distinct-averages","has_notes":false,"flag_type":1,"frontend_id":5},{"id":836960924,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591646,"status":10,"status_display":"Accepted","runtime":"91 ms","url":"/submissions/detail/836960924/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"42.9 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":4},{"id":836960390,"question_id":34,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1667591580,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/836960390/","is_pending":"Not Pending","title":"Find First and Last Position of Element in Sorted Array","memory":"43 MB","code":"/**\\n * @param {number[]} nums\\n * @param {number} target\\n * @return {number[]}\\n */\\nvar searchRange = function(nums, target) \\n{\\n    let lo = 0, hi = nums.length-1, res = [-1,-1];\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[0] = m;\\n            hi = m - 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;\\n        }\\n    }\\n\\n\\n     lo = 0, hi = nums.length-1, f = -1, l = -1;\\n    while(lo <= hi)\\n    {\\n        let m = lo + Math.floor((hi - lo)/2)\\n\\n        if(nums[m] == target)\\n        {\\n            res[1] = m;\\n            lo = m + 1;\\n        }\\n        else if(nums[m] < target)\\n        {\\n            lo = m + 1;\\n        }\\n        else \\n        {\\n            hi = m - 1;;\\n        }\\n    }\\n\\n    return res;\\n}\\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-first-and-last-position-of-element-in-sorted-array","has_notes":false,"flag_type":1,"frontend_id":3},{"id":831406918,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666877523,"status":10,"status_display":"Accepted","runtime":"171 ms","url":"/submissions/detail/831406918/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":2},{"id":831395512,"question_id":242,"lang":"javascript","lang_name":"JavaScript","time":"2\xc2\xa0years, 8\xc2\xa0months","timestamp":1666876149,"status":10,"status_display":"Accepted","runtime":"122 ms","url":"/submissions/detail/831395512/","is_pending":"Not Pending","title":"Valid Anagram","memory":"49.4 MB","code":"/**\\n * @param {string} s\\n * @param {string} t\\n * @return {boolean}\\n */\\nvar isAnagram = function(s, t) {\\n  s = s.split(\\"\\").sort().join(\\"\\");  \\n  t = t.split(\\"\\").sort().join(\\"\\");\\n  return s==t;\\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"valid-anagram","has_notes":false,"flag_type":1,"frontend_id":1}],"has_next":false,"last_key":""}'
2025-07-22 15:47:18,660 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:18,663 [INFO] __main__.py:251 - duplicate-emails/2023-08-01 12.47.01 - Accepted - runtime 875ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:18,663 [INFO] __main__.py:245 - Writing duplicate-emails/2023-08-01 12.46.37 - Accepted - runtime 1543ms - memory 0.0B.sql
2025-07-22 15:47:18,665 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.09.17 - Accepted - runtime 981ms - memory 0.0B.sql
2025-07-22 15:47:18,666 [INFO] __main__.py:245 - Writing employees-earning-more-than-their-managers/2023-07-26 12.07.47 - Runtime Error - runtime NA - memory NA.sql
2025-07-22 15:47:19,000 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:19,000 [INFO] __main__.py:251 - combine-two-tables/2023-07-25 22.29.18 - Accepted - runtime 1086ms - memory 0.0B.sql already exists, skipping it
2025-07-22 15:47:19,353 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:19,357 [INFO] __main__.py:251 - count-of-range-sum/2022-11-13 14.24.44 - Accepted - runtime 2624ms - memory 100.9MB.js already exists, skipping it
2025-07-22 15:47:19,786 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:19,795 [INFO] __main__.py:251 - number-of-distinct-averages/2022-11-12 20.52.37 - Wrong Answer - runtime NA - memory NA.js already exists, skipping it
2025-07-22 15:47:20,167 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:20,168 [INFO] __main__.py:251 - find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.24.06 - Accepted - runtime 91ms - memory 42.9MB.js already exists, skipping it
2025-07-22 15:47:20,168 [INFO] __main__.py:245 - Writing find-first-and-last-position-of-element-in-sorted-array/2022-11-05 01.23.00 - Accepted - runtime 96ms - memory 43MB.js
2025-07-22 15:47:20,529 [DEBUG] connectionpool.py:483 - https://leetcode.com:443 "POST /graphql HTTP/1.1" 200 None
2025-07-22 15:47:20,531 [INFO] __main__.py:251 - valid-anagram/2022-10-27 19.02.03 - Accepted - runtime 171ms - memory 49.4MB.js already exists, skipping it
2025-07-22 15:47:20,531 [INFO] __main__.py:245 - Writing valid-anagram/2022-10-27 18.39.09 - Accepted - runtime 122ms - memory 49.4MB.js
